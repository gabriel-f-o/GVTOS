
GVTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004720  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080048a8  080048a8  000148a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e4  080048e4  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048ec  080048ec  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080048f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000140e4  20000038  08004928  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001411c  08004928  0002411c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012194  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c57  00000000  00000000  000321f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  00034e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  00035990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022147  00000000  00000000  000363c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b95f  00000000  00000000  00058507  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7cf7  00000000  00000000  00063e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012bb5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb0  00000000  00000000  0012bbd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004890 	.word	0x08004890

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	08004890 	.word	0x08004890

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b972 	b.w	80004d8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	4688      	mov	r8, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14b      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021a:	428a      	cmp	r2, r1
 800021c:	4615      	mov	r5, r2
 800021e:	d967      	bls.n	80002f0 <__udivmoddi4+0xe4>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0720 	rsb	r7, r2, #32
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	fa20 f707 	lsr.w	r7, r0, r7
 8000232:	4095      	lsls	r5, r2
 8000234:	ea47 0803 	orr.w	r8, r7, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbb8 f7fe 	udiv	r7, r8, lr
 8000244:	fa1f fc85 	uxth.w	ip, r5
 8000248:	fb0e 8817 	mls	r8, lr, r7, r8
 800024c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000250:	fb07 f10c 	mul.w	r1, r7, ip
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18eb      	adds	r3, r5, r3
 800025a:	f107 30ff 	add.w	r0, r7, #4294967295
 800025e:	f080 811b 	bcs.w	8000498 <__udivmoddi4+0x28c>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8118 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000268:	3f02      	subs	r7, #2
 800026a:	442b      	add	r3, r5
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0fe 	udiv	r0, r3, lr
 8000274:	fb0e 3310 	mls	r3, lr, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000280:	45a4      	cmp	ip, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	192c      	adds	r4, r5, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x290>
 800028e:	45a4      	cmp	ip, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x290>
 8000294:	3802      	subs	r0, #2
 8000296:	442c      	add	r4, r5
 8000298:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800029c:	eba4 040c 	sub.w	r4, r4, ip
 80002a0:	2700      	movs	r7, #0
 80002a2:	b11e      	cbz	r6, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c6 4300 	strd	r4, r3, [r6]
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xbe>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80eb 	beq.w	8000492 <__udivmoddi4+0x286>
 80002bc:	2700      	movs	r7, #0
 80002be:	e9c6 0100 	strd	r0, r1, [r6]
 80002c2:	4638      	mov	r0, r7
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f783 	clz	r7, r3
 80002ce:	2f00      	cmp	r7, #0
 80002d0:	d147      	bne.n	8000362 <__udivmoddi4+0x156>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd0>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2c4>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa0>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa0>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xe8>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 808f 	bne.w	800041c <__udivmoddi4+0x210>
 80002fe:	1b49      	subs	r1, r1, r5
 8000300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000304:	fa1f f885 	uxth.w	r8, r5
 8000308:	2701      	movs	r7, #1
 800030a:	fbb1 fcfe 	udiv	ip, r1, lr
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	fb0e 111c 	mls	r1, lr, ip, r1
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb08 f10c 	mul.w	r1, r8, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x124>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4299      	cmp	r1, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 800032e:	4684      	mov	ip, r0
 8000330:	1a59      	subs	r1, r3, r1
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb1 f0fe 	udiv	r0, r1, lr
 8000338:	fb0e 1410 	mls	r4, lr, r0, r1
 800033c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000340:	fb08 f800 	mul.w	r8, r8, r0
 8000344:	45a0      	cmp	r8, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x14c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x14a>
 8000350:	45a0      	cmp	r8, r4
 8000352:	f200 80b6 	bhi.w	80004c2 <__udivmoddi4+0x2b6>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 0408 	sub.w	r4, r4, r8
 800035c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000360:	e79f      	b.n	80002a2 <__udivmoddi4+0x96>
 8000362:	f1c7 0c20 	rsb	ip, r7, #32
 8000366:	40bb      	lsls	r3, r7
 8000368:	fa22 fe0c 	lsr.w	lr, r2, ip
 800036c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000370:	fa01 f407 	lsl.w	r4, r1, r7
 8000374:	fa20 f50c 	lsr.w	r5, r0, ip
 8000378:	fa21 f30c 	lsr.w	r3, r1, ip
 800037c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000380:	4325      	orrs	r5, r4
 8000382:	fbb3 f9f8 	udiv	r9, r3, r8
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	fb08 3319 	mls	r3, r8, r9, r3
 800038c:	fa1f fa8e 	uxth.w	sl, lr
 8000390:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000394:	fb09 f40a 	mul.w	r4, r9, sl
 8000398:	429c      	cmp	r4, r3
 800039a:	fa02 f207 	lsl.w	r2, r2, r7
 800039e:	fa00 f107 	lsl.w	r1, r0, r7
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1e 0303 	adds.w	r3, lr, r3
 80003a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ac:	f080 8087 	bcs.w	80004be <__udivmoddi4+0x2b2>
 80003b0:	429c      	cmp	r4, r3
 80003b2:	f240 8084 	bls.w	80004be <__udivmoddi4+0x2b2>
 80003b6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ba:	4473      	add	r3, lr
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	b2ad      	uxth	r5, r5
 80003c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c4:	fb08 3310 	mls	r3, r8, r0, r3
 80003c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d0:	45a2      	cmp	sl, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1e 0404 	adds.w	r4, lr, r4
 80003d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003dc:	d26b      	bcs.n	80004b6 <__udivmoddi4+0x2aa>
 80003de:	45a2      	cmp	sl, r4
 80003e0:	d969      	bls.n	80004b6 <__udivmoddi4+0x2aa>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4474      	add	r4, lr
 80003e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ea:	fba0 8902 	umull	r8, r9, r0, r2
 80003ee:	eba4 040a 	sub.w	r4, r4, sl
 80003f2:	454c      	cmp	r4, r9
 80003f4:	46c2      	mov	sl, r8
 80003f6:	464b      	mov	r3, r9
 80003f8:	d354      	bcc.n	80004a4 <__udivmoddi4+0x298>
 80003fa:	d051      	beq.n	80004a0 <__udivmoddi4+0x294>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d069      	beq.n	80004d4 <__udivmoddi4+0x2c8>
 8000400:	ebb1 050a 	subs.w	r5, r1, sl
 8000404:	eb64 0403 	sbc.w	r4, r4, r3
 8000408:	fa04 fc0c 	lsl.w	ip, r4, ip
 800040c:	40fd      	lsrs	r5, r7
 800040e:	40fc      	lsrs	r4, r7
 8000410:	ea4c 0505 	orr.w	r5, ip, r5
 8000414:	e9c6 5400 	strd	r5, r4, [r6]
 8000418:	2700      	movs	r7, #0
 800041a:	e747      	b.n	80002ac <__udivmoddi4+0xa0>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f703 	lsr.w	r7, r0, r3
 8000424:	4095      	lsls	r5, r2
 8000426:	fa01 f002 	lsl.w	r0, r1, r2
 800042a:	fa21 f303 	lsr.w	r3, r1, r3
 800042e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000432:	4338      	orrs	r0, r7
 8000434:	0c01      	lsrs	r1, r0, #16
 8000436:	fbb3 f7fe 	udiv	r7, r3, lr
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000442:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000446:	fb07 f308 	mul.w	r3, r7, r8
 800044a:	428b      	cmp	r3, r1
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x256>
 8000452:	1869      	adds	r1, r5, r1
 8000454:	f107 3cff 	add.w	ip, r7, #4294967295
 8000458:	d22f      	bcs.n	80004ba <__udivmoddi4+0x2ae>
 800045a:	428b      	cmp	r3, r1
 800045c:	d92d      	bls.n	80004ba <__udivmoddi4+0x2ae>
 800045e:	3f02      	subs	r7, #2
 8000460:	4429      	add	r1, r5
 8000462:	1acb      	subs	r3, r1, r3
 8000464:	b281      	uxth	r1, r0
 8000466:	fbb3 f0fe 	udiv	r0, r3, lr
 800046a:	fb0e 3310 	mls	r3, lr, r0, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb00 f308 	mul.w	r3, r0, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x27e>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000480:	d217      	bcs.n	80004b2 <__udivmoddi4+0x2a6>
 8000482:	428b      	cmp	r3, r1
 8000484:	d915      	bls.n	80004b2 <__udivmoddi4+0x2a6>
 8000486:	3802      	subs	r0, #2
 8000488:	4429      	add	r1, r5
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000490:	e73b      	b.n	800030a <__udivmoddi4+0xfe>
 8000492:	4637      	mov	r7, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e709      	b.n	80002ac <__udivmoddi4+0xa0>
 8000498:	4607      	mov	r7, r0
 800049a:	e6e7      	b.n	800026c <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x8c>
 80004a0:	4541      	cmp	r1, r8
 80004a2:	d2ab      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a8:	eb69 020e 	sbc.w	r2, r9, lr
 80004ac:	3801      	subs	r0, #1
 80004ae:	4613      	mov	r3, r2
 80004b0:	e7a4      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b2:	4660      	mov	r0, ip
 80004b4:	e7e9      	b.n	800048a <__udivmoddi4+0x27e>
 80004b6:	4618      	mov	r0, r3
 80004b8:	e795      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004ba:	4667      	mov	r7, ip
 80004bc:	e7d1      	b.n	8000462 <__udivmoddi4+0x256>
 80004be:	4681      	mov	r9, r0
 80004c0:	e77c      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c2:	3802      	subs	r0, #2
 80004c4:	442c      	add	r4, r5
 80004c6:	e747      	b.n	8000358 <__udivmoddi4+0x14c>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	442b      	add	r3, r5
 80004ce:	e72f      	b.n	8000330 <__udivmoddi4+0x124>
 80004d0:	4638      	mov	r0, r7
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xda>
 80004d4:	4637      	mov	r7, r6
 80004d6:	e6e9      	b.n	80002ac <__udivmoddi4+0xa0>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <os_init_get>:
 * @brief This function informs other processes that the OS is initialized
 *
 * @return bool : 1 = done
 *
 **********************************************************************/
bool os_init_get(){
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	return os_init_done;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <os_init_get+0x14>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20000054 	.word	0x20000054

080004f4 <os_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, char* idle_name, uint32_t idle_stack_size){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	607a      	str	r2, [r7, #4]
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	460b      	mov	r3, r1
 8000502:	72fb      	strb	r3, [r7, #11]

	/* Check if OS was already init
	 ------------------------------------------------------*/
	if(os_init_done == 1) return OS_ERR_FORBIDDEN;
 8000504:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <os_init+0xbc>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <os_init+0x1c>
 800050c:	2305      	movs	r3, #5
 800050e:	e04a      	b.n	80005a6 <os_init+0xb2>

	/* Init FPU if enabled
	 ------------------------------------------------------*/
#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	OS_FPU_ENABLE();			//Enable
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <os_init+0xc0>)
 8000512:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	; 0xd80
 8000516:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <os_init+0xc0>)
 8000518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800051c:	f8c2 3d80 	str.w	r3, [r2, #3456]	; 0xd80
	OS_FPU_LAZY_ENABLE();		//Always lazy save
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <os_init+0xc4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a24      	ldr	r2, [pc, #144]	; (80005b8 <os_init+0xc4>)
 8000526:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800052a:	6013      	str	r3, [r2, #0]
	OS_FPU_STATUS_ENABLE();		//Allows FPU to indicate that it is active
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <os_init+0xc4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <os_init+0xc4>)
 8000532:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000536:	6013      	str	r3, [r2, #0]
#endif

	/* Set priorities for pendSv and systick
	 ------------------------------------------------------*/
	OS_SYSTICK_DISABLE();
 8000538:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <os_init+0xc0>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	4a1d      	ldr	r2, [pc, #116]	; (80005b4 <os_init+0xc0>)
 800053e:	f023 0301 	bic.w	r3, r3, #1
 8000542:	6093      	str	r3, [r2, #8]
	OS_SYSTICK_SET_PRIO(14);
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <os_init+0xc0>)
 8000546:	22e0      	movs	r2, #224	; 0xe0
 8000548:	f883 2d1b 	strb.w	r2, [r3, #3355]	; 0xd1b
	OS_PENDSV_SET_PRIO(15);
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <os_init+0xc0>)
 800054e:	22f0      	movs	r2, #240	; 0xf0
 8000550:	f883 2d1a 	strb.w	r2, [r3, #3354]	; 0xd1a
	OS_SYSTICK_ENABLE();
 8000554:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <os_init+0xc0>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <os_init+0xc0>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6093      	str	r3, [r2, #8]

	/* Init Heap
	 ------------------------------------------------------*/
	os_heap_clear();
 8000560:	f000 f8da 	bl	8000718 <os_heap_clear>

	/* Init Tasks
	 ------------------------------------------------------*/
	os_err_e ret = os_task_init(main_name, main_task_priority, interrput_stack_size, idle_stack_size);
 8000564:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8000568:	6a3b      	ldr	r3, [r7, #32]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	68f8      	ldr	r0, [r7, #12]
 800056e:	f002 f897 	bl	80026a0 <os_task_init>
 8000572:	4603      	mov	r3, r0
 8000574:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK)
 8000576:	7dfb      	ldrb	r3, [r7, #23]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <os_init+0x8c>
		return ret;
 800057c:	7dfb      	ldrb	r3, [r7, #23]
 800057e:	e012      	b.n	80005a6 <os_init+0xb2>

	/* Flag init as done
	 ------------------------------------------------------*/
	os_init_done = ret == OS_ERR_OK ? 1 : 0;
 8000580:	7dfb      	ldrb	r3, [r7, #23]
 8000582:	2b00      	cmp	r3, #0
 8000584:	bf0c      	ite	eq
 8000586:	2301      	moveq	r3, #1
 8000588:	2300      	movne	r3, #0
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <os_init+0xbc>)
 800058e:	701a      	strb	r2, [r3, #0]

	return os_task_create(&idle_task, idle_name, os_idle_task_fn, 0, idle_stack_size, NULL);
 8000590:	2300      	movs	r3, #0
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <os_init+0xc8>)
 800059c:	6839      	ldr	r1, [r7, #0]
 800059e:	4808      	ldr	r0, [pc, #32]	; (80005c0 <os_init+0xcc>)
 80005a0:	f002 f954 	bl	800284c <os_task_create>
 80005a4:	4603      	mov	r3, r0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000054 	.word	0x20000054
 80005b4:	e000e008 	.word	0xe000e008
 80005b8:	e000ef34 	.word	0xe000ef34
 80005bc:	080005ed 	.word	0x080005ed
 80005c0:	20014084 	.word	0x20014084

080005c4 <os_task_on_ready_cb>:
 * @brief This function is called by the OS qfter a task that was blocked gets ready
 *
 * @param os_handle_t h : [in] Task that became ready
 *
 **********************************************************************/
__weak void os_task_on_ready_cb(os_handle_t h){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(h);
	return;
 80005cc:	bf00      	nop
}
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <os_task_on_block_cb>:
 * This callback allows the user to perform a logic before interruption
 *
 * @param os_handle_t h : [in] Task that became ready
 *
 **********************************************************************/
__weak void os_task_on_block_cb(os_handle_t h){
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(h);
	return;
 80005e0:	bf00      	nop
}
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <os_idle_task_fn>:
 * @brief This function is executed when the idle task is called (i.e) no other task is available
 *
 * @return : void* : generic return value
 *
 **********************************************************************/
__weak void* os_idle_task_fn(void* i){
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(i);
	while(1){
 80005f4:	e7fe      	b.n	80005f4 <os_idle_task_fn+0x8>

080005f6 <os_no_task_ready_cb>:
 * or is unblocked by an interrupt that this function will stop calling
 *
 * ATTENTION : This function is called in ISR time (PendSV)
 *
 **********************************************************************/
__weak void os_no_task_ready_cb(){
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
	return;
 80005fa:	bf00      	nop
}
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <os_insufficient_heap_cb>:
 *
 * @brief This function is called by the OS when an os_alloc fails due to
 * not enogh memory
 *
 **********************************************************************/
__weak void os_insufficient_heap_cb(){
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	return;
 8000608:	bf00      	nop
}
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <os_heap_BlockGetSize>:
 *
 * @param heap_header_t* p : [in] address of the header of the block
 *
 * @return uint32_t : Size of the block in bytes (header + data)
 **********************************************************************/
inline static uint32_t os_heap_BlockGetSize(os_heap_header_t const * p){
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	if(p == NULL) return 0; //Avoid explosion
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d101      	bne.n	8000626 <os_heap_BlockGetSize+0x12>
 8000622:	2300      	movs	r3, #0
 8000624:	e00b      	b.n	800063e <os_heap_BlockGetSize+0x2a>

	return ( (p->addr_next != 0) ? p->addr_next - (uint32_t)p : (uint32_t)&os_heap[sizeof(os_heap)] - (uint32_t)p ); //Calculate size in bytes
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d004      	beq.n	8000638 <os_heap_BlockGetSize+0x24>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	e002      	b.n	800063e <os_heap_BlockGetSize+0x2a>
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <os_heap_BlockGetSize+0x38>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	1ad3      	subs	r3, r2, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20014058 	.word	0x20014058

08000650 <os_heap_AllocateBeginning>:
 * @param heap_header_t* p : [in] address of the header of the block
 * @param uint32_t size    : [in] Size of the data part in bytes
 *
 * @return void* : Address of the data part of the block
 **********************************************************************/
static void* os_heap_AllocateBeginning(os_heap_header_t* p, uint32_t size){
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return NULL;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <os_heap_AllocateBeginning+0x14>
 8000660:	2300      	movs	r3, #0
 8000662:	e01f      	b.n	80006a4 <os_heap_AllocateBeginning+0x54>
	if(size == 0) return NULL;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <os_heap_AllocateBeginning+0x1e>
 800066a:	2300      	movs	r3, #0
 800066c:	e01a      	b.n	80006a4 <os_heap_AllocateBeginning+0x54>

	/* Get references to manipulate
	 ---------------------------------------------------*/
	os_heap_header_t* newBlock   = p;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	60fb      	str	r3, [r7, #12]
	os_heap_header_t* newTopHead = (os_heap_header_t*) ( (uint32_t) (newBlock) + sizeof(os_heap_header_t) + size);
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	4413      	add	r3, r2
 8000678:	3308      	adds	r3, #8
 800067a:	60bb      	str	r3, [r7, #8]

	/* Add Block to list
	 ---------------------------------------------------*/
	newTopHead->addr_next = newBlock->addr_next != (uint32_t)newTopHead ? newBlock->addr_next : newTopHead->addr_next;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	429a      	cmp	r2, r3
 8000684:	d002      	beq.n	800068c <os_heap_AllocateBeginning+0x3c>
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	e001      	b.n	8000690 <os_heap_AllocateBeginning+0x40>
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68ba      	ldr	r2, [r7, #8]
 8000692:	6013      	str	r3, [r2, #0]
	newBlock->addr_next	  = (uint32_t) newTopHead;
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	601a      	str	r2, [r3, #0]

	/* Mark block as used memory
	 ---------------------------------------------------*/
	newBlock->block_used = 1;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2201      	movs	r2, #1
 800069e:	605a      	str	r2, [r3, #4]

	/* Return reference of data block
	 ---------------------------------------------------*/
	return (void*) ( (uint32_t)newBlock + sizeof(os_heap_header_t) );
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3308      	adds	r3, #8
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <os_heap_AllocateEnd>:
 * @param heap_header_t* p : [in] address of the header of the block
 * @param uint32_t size    : [in] Size of the data part in bytes
 *
 * @return void* : Address of the data part of the block
 **********************************************************************/
static void* os_heap_AllocateEnd(os_heap_header_t* p, uint32_t size){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return NULL;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <os_heap_AllocateEnd+0x14>
 80006c0:	2300      	movs	r3, #0
 80006c2:	e024      	b.n	800070e <os_heap_AllocateEnd+0x5e>
	if(size == 0) return NULL;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <os_heap_AllocateEnd+0x1e>
 80006ca:	2300      	movs	r3, #0
 80006cc:	e01f      	b.n	800070e <os_heap_AllocateEnd+0x5e>

	/* Get references to manipulate
	 ---------------------------------------------------*/
	uint32_t block_size = os_heap_BlockGetSize(p);
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ffa0 	bl	8000614 <os_heap_BlockGetSize>
 80006d4:	6178      	str	r0, [r7, #20]
	os_heap_header_t* newBlock   = (os_heap_header_t*) ( (uint32_t)p + block_size - size - sizeof(os_heap_header_t) );
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	441a      	add	r2, r3
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	3b08      	subs	r3, #8
 80006e2:	613b      	str	r3, [r7, #16]
	os_heap_header_t* oldTopHead = (os_heap_header_t*) (p);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	60fb      	str	r3, [r7, #12]

	/* Add Block to list
	 ---------------------------------------------------*/
	newBlock->addr_next   = oldTopHead->addr_next;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	601a      	str	r2, [r3, #0]
	oldTopHead->addr_next = newBlock != oldTopHead ? (uint32_t) newBlock : oldTopHead->addr_next;
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d102      	bne.n	80006fe <os_heap_AllocateEnd+0x4e>
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	e000      	b.n	8000700 <os_heap_AllocateEnd+0x50>
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	68fa      	ldr	r2, [r7, #12]
 8000702:	6013      	str	r3, [r2, #0]

	/* Mark block as used memory
	 ---------------------------------------------------*/
	newBlock->block_used = 1;
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	2201      	movs	r2, #1
 8000708:	605a      	str	r2, [r3, #4]

	/* Return reference of data block
	 ---------------------------------------------------*/
	return (void*) ( (uint32_t)newBlock + sizeof(os_heap_header_t) );
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	3308      	adds	r3, #8

}
 800070e:	4618      	mov	r0, r3
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <os_heap_clear>:
 * OS Heap Clear
 *
 * @brief This function clears the heap
 *
 **********************************************************************/
void os_heap_clear(){
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

	/* Clear heap
	 ---------------------------------------------------*/
	memset(&os_heap, 0, sizeof(os_heap));
 800071e:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8000722:	2100      	movs	r1, #0
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <os_heap_clear+0x2c>)
 8000726:	f004 f8ab 	bl	8004880 <memset>

	/* Get header pointers
	 ---------------------------------------------------*/
	os_heap_header_t* p = (os_heap_header_t*) &os_heap[0];
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <os_heap_clear+0x2c>)
 800072c:	607b      	str	r3, [r7, #4]

	/* Initialize headers
	 ---------------------------------------------------*/
	p->block_used = 0; //Mark as not used
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2200      	movs	r2, #0
 8000732:	605a      	str	r2, [r3, #4]
	p->addr_next  = 0; //Point outside of the heap to indicate end
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000058 	.word	0x20000058

08000748 <os_heap_alloc>:
 *
 * @param uint32_t size : [in] Size to be allocated
 *
 * @return void* : Address of the memory block or NULL if the function failed (bad argument or not enough memory)
 **********************************************************************/
void* os_heap_alloc(uint32_t size){
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(size == 0) return NULL;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d101      	bne.n	800075a <os_heap_alloc+0x12>
 8000756:	2300      	movs	r3, #0
 8000758:	e054      	b.n	8000804 <os_heap_alloc+0xbc>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 800075a:	f3ef 8310 	mrs	r3, PRIMASK
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	b672      	cpsid	i
 8000762:	f3bf 8f6f 	isb	sy

	/* Declare variables to get the tiniest block that has the size required
	 ---------------------------------------------------*/
	os_heap_header_t* pBlock = NULL;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t min_size = 0xFFFFFFFF;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	623b      	str	r3, [r7, #32]
	os_heap_header_t* p = (os_heap_header_t*) &os_heap[0];
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <os_heap_alloc+0xc4>)
 8000772:	61fb      	str	r3, [r7, #28]

	/* Search for entire list
	 ---------------------------------------------------*/
	size_t totalSize = (size + 8U - 1U) & ~(8U - 1U); //Calculate the closest multiple of 8
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3307      	adds	r3, #7
 8000778:	f023 0307 	bic.w	r3, r3, #7
 800077c:	61bb      	str	r3, [r7, #24]
	while(p != NULL){
 800077e:	e018      	b.n	80007b2 <os_heap_alloc+0x6a>

		/* If the block is free, it's big enough and it's smaller than the previous, save it
		 ---------------------------------------------------*/
		uint32_t data_size = os_heap_BlockGetSize(p) - sizeof(os_heap_header_t);
 8000780:	69f8      	ldr	r0, [r7, #28]
 8000782:	f7ff ff47 	bl	8000614 <os_heap_BlockGetSize>
 8000786:	4603      	mov	r3, r0
 8000788:	3b08      	subs	r3, #8
 800078a:	613b      	str	r3, [r7, #16]
		if(p->block_used == 0 && data_size < min_size && data_size >= totalSize) {
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d10b      	bne.n	80007ac <os_heap_alloc+0x64>
 8000794:	693a      	ldr	r2, [r7, #16]
 8000796:	6a3b      	ldr	r3, [r7, #32]
 8000798:	429a      	cmp	r2, r3
 800079a:	d207      	bcs.n	80007ac <os_heap_alloc+0x64>
 800079c:	693a      	ldr	r2, [r7, #16]
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d303      	bcc.n	80007ac <os_heap_alloc+0x64>
			pBlock = p;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
			min_size = data_size;
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	623b      	str	r3, [r7, #32]
		}

		/* Go to next block
		 ---------------------------------------------------*/
		p = (os_heap_header_t*) ( p->addr_next );
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	61fb      	str	r3, [r7, #28]
	while(p != NULL){
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e3      	bne.n	8000780 <os_heap_alloc+0x38>
	}

	/* If pBlock is outside the heap, there is no memory available
	 ---------------------------------------------------*/
	if(!(&os_heap[0] <= (uint8_t*)pBlock && (uint8_t*)pBlock <= &os_heap[sizeof(os_heap) - 1] ) ) {
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <os_heap_alloc+0xc4>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d303      	bcc.n	80007c8 <os_heap_alloc+0x80>
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	4a13      	ldr	r2, [pc, #76]	; (8000810 <os_heap_alloc+0xc8>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d908      	bls.n	80007da <os_heap_alloc+0x92>

		/* Execute callback
		 ---------------------------------------------------*/
		os_insufficient_heap_cb();
 80007c8:	f7ff ff1c 	bl	8000604 <os_insufficient_heap_cb>
		OS_EXIT_CRITICAL();
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f383 8810 	msr	PRIMASK, r3
 80007d2:	f3bf 8f6f 	isb	sy
		return NULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e014      	b.n	8000804 <os_heap_alloc+0xbc>
	}

	/* If pBlock is not NULL, reserve a memory block
	 ---------------------------------------------------*/
	void* ret = ( (totalSize < OS_HEAP_BIG_BLOCK_THRESHOLD) ? os_heap_AllocateBeginning(pBlock, totalSize) : os_heap_AllocateEnd(pBlock, totalSize) );
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	2b31      	cmp	r3, #49	; 0x31
 80007de:	d805      	bhi.n	80007ec <os_heap_alloc+0xa4>
 80007e0:	69b9      	ldr	r1, [r7, #24]
 80007e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007e4:	f7ff ff34 	bl	8000650 <os_heap_AllocateBeginning>
 80007e8:	4603      	mov	r3, r0
 80007ea:	e004      	b.n	80007f6 <os_heap_alloc+0xae>
 80007ec:	69b9      	ldr	r1, [r7, #24]
 80007ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007f0:	f7ff ff5e 	bl	80006b0 <os_heap_AllocateEnd>
 80007f4:	4603      	mov	r3, r0
 80007f6:	617b      	str	r3, [r7, #20]
	OS_EXIT_CRITICAL();
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f383 8810 	msr	PRIMASK, r3
 80007fe:	f3bf 8f6f 	isb	sy
	return ret;
 8000802:	697b      	ldr	r3, [r7, #20]

}
 8000804:	4618      	mov	r0, r3
 8000806:	3728      	adds	r7, #40	; 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000058 	.word	0x20000058
 8000810:	20014057 	.word	0x20014057

08000814 <os_heap_free>:
 *
 * @param void* p : [in] Pointer to the data as given by Alloc
 *
 * @return OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_heap_free(void* p){
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

	/* Check for argument errors
	 ---------------------------------------------------*/
	if(p == NULL) return OS_ERR_BAD_ARG;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d101      	bne.n	8000826 <os_heap_free+0x12>
 8000822:	2301      	movs	r3, #1
 8000824:	e065      	b.n	80008f2 <os_heap_free+0xde>
	if( !(&os_heap[sizeof(os_heap_header_t)] <= (uint8_t*)p && (uint8_t*)p <= &os_heap[sizeof(os_heap) - 1] ) ) return OS_ERR_BAD_ARG;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a35      	ldr	r2, [pc, #212]	; (8000900 <os_heap_free+0xec>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d303      	bcc.n	8000836 <os_heap_free+0x22>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a34      	ldr	r2, [pc, #208]	; (8000904 <os_heap_free+0xf0>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d901      	bls.n	800083a <os_heap_free+0x26>
 8000836:	2301      	movs	r3, #1
 8000838:	e05b      	b.n	80008f2 <os_heap_free+0xde>

	/* If the task gets interrupted, the heap may be corrupted when it recovers
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 800083a:	f3ef 8310 	mrs	r3, PRIMASK
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	b672      	cpsid	i
 8000842:	f3bf 8f6f 	isb	sy

	/* Declare Current block and target block
	 ---------------------------------------------------*/
	os_heap_header_t* cur   = (os_heap_header_t*)(&os_heap[0]);
 8000846:	4b30      	ldr	r3, [pc, #192]	; (8000908 <os_heap_free+0xf4>)
 8000848:	61fb      	str	r3, [r7, #28]
	os_heap_header_t* block = (os_heap_header_t*)((uint32_t)p - sizeof(os_heap_header_t));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3b08      	subs	r3, #8
 800084e:	617b      	str	r3, [r7, #20]

	/* Declare auxiliary pointers to help deleting
	 ---------------------------------------------------*/
	os_heap_header_t* pNext = NULL;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
	os_heap_header_t* pPrev = NULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]

	/* Search for the target block while still inside the heap
	 ---------------------------------------------------*/
	while(&os_heap[0] <= (uint8_t*)cur && (uint8_t*)cur <= &os_heap[sizeof(os_heap) - 1] && cur != (os_heap_header_t*) block){
 8000858:	e004      	b.n	8000864 <os_heap_free+0x50>

		/* Save current block and go to next block
		 ---------------------------------------------------*/
		pPrev = cur;
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	61bb      	str	r3, [r7, #24]
		cur = (os_heap_header_t*) ( cur->addr_next );
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	61fb      	str	r3, [r7, #28]
	while(&os_heap[0] <= (uint8_t*)cur && (uint8_t*)cur <= &os_heap[sizeof(os_heap) - 1] && cur != (os_heap_header_t*) block){
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	4a28      	ldr	r2, [pc, #160]	; (8000908 <os_heap_free+0xf4>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d307      	bcc.n	800087c <os_heap_free+0x68>
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	4a25      	ldr	r2, [pc, #148]	; (8000904 <os_heap_free+0xf0>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d803      	bhi.n	800087c <os_heap_free+0x68>
 8000874:	69fa      	ldr	r2, [r7, #28]
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	429a      	cmp	r2, r3
 800087a:	d1ee      	bne.n	800085a <os_heap_free+0x46>
	}

	/* If the block was not found, or the block is outside the heap, return
	 ---------------------------------------------------*/
	if(cur != block || !(&os_heap[0] <= (uint8_t*)cur && (uint8_t*)cur <= &os_heap[sizeof(os_heap) - 1]) ) {
 800087c:	69fa      	ldr	r2, [r7, #28]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	429a      	cmp	r2, r3
 8000882:	d107      	bne.n	8000894 <os_heap_free+0x80>
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	4a20      	ldr	r2, [pc, #128]	; (8000908 <os_heap_free+0xf4>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d303      	bcc.n	8000894 <os_heap_free+0x80>
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	4a1d      	ldr	r2, [pc, #116]	; (8000904 <os_heap_free+0xf0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d906      	bls.n	80008a2 <os_heap_free+0x8e>
		OS_EXIT_CRITICAL();
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f383 8810 	msr	PRIMASK, r3
 800089a:	f3bf 8f6f 	isb	sy
		return OS_ERR_INVALID;
 800089e:	2302      	movs	r3, #2
 80008a0:	e027      	b.n	80008f2 <os_heap_free+0xde>
	}

	/* Get next address and tag the block as free
	 ---------------------------------------------------*/
	cur->block_used = 0;
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
	pNext = (os_heap_header_t*) ( cur->addr_next );
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	613b      	str	r3, [r7, #16]

	/* Merge the current block with the next one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pNext != NULL && pNext->block_used == 0){
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00a      	beq.n	80008ca <os_heap_free+0xb6>
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d106      	bne.n	80008ca <os_heap_free+0xb6>
		cur->addr_next = pNext->addr_next;
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	601a      	str	r2, [r3, #0]
		pNext->addr_next = 0; //For principle, but not necessary
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
	}

	/* Merge the current block with the previous one if it not used (and exists)
	 ---------------------------------------------------*/
	if(pPrev != NULL && pPrev->block_used == 0){
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00a      	beq.n	80008e6 <os_heap_free+0xd2>
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d106      	bne.n	80008e6 <os_heap_free+0xd2>
		pPrev->addr_next = cur->addr_next;
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	601a      	str	r2, [r3, #0]
		cur->addr_next = 0; //For principle, but not necessary
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
	}

	OS_EXIT_CRITICAL();
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	f383 8810 	msr	PRIMASK, r3
 80008ec:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3724      	adds	r7, #36	; 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000060 	.word	0x20000060
 8000904:	20014057 	.word	0x20014057
 8000908:	20000058 	.word	0x20000058

0800090c <os_mutex_udpatePrio>:
 * @param os_handle_t h : [in] The reference to the mutex
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
static bool os_mutex_udpatePrio(os_handle_t h){
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

	/* Error Check
	 ---------------------------------------------------*/
	if(h == NULL) return false;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d101      	bne.n	800091e <os_mutex_udpatePrio+0x12>
 800091a:	2300      	movs	r3, #0
 800091c:	e032      	b.n	8000984 <os_mutex_udpatePrio+0x78>
	if(h->type != OS_OBJ_MUTEX) return false;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d001      	beq.n	800092a <os_mutex_udpatePrio+0x1e>
 8000926:	2300      	movs	r3, #0
 8000928:	e02c      	b.n	8000984 <os_mutex_udpatePrio+0x78>

	/* Convet reference and store previous priority
	 ---------------------------------------------------*/
	os_mutex_t* mutex = (os_mutex_t*)h;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	617b      	str	r3, [r7, #20]
	int8_t prev_max_prio = mutex->max_prio;
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	7f5b      	ldrb	r3, [r3, #29]
 8000932:	74fb      	strb	r3, [r7, #19]

	/* Get reference to the first blocked task
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 8000934:	23ff      	movs	r3, #255	; 0xff
 8000936:	77fb      	strb	r3, [r7, #31]
	os_list_head_t* head = (os_list_head_t*)h->blockList;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	60fb      	str	r3, [r7, #12]
	os_list_cell_t* it = head->head.next;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	61bb      	str	r3, [r7, #24]

	/* While it is a valid task
	 ---------------------------------------------------*/
	while(it != NULL){
 8000944:	e00f      	b.n	8000966 <os_mutex_udpatePrio+0x5a>

		/* Get task's priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800094e:	72fb      	strb	r3, [r7, #11]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8000950:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8000954:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000958:	429a      	cmp	r2, r3
 800095a:	da01      	bge.n	8000960 <os_mutex_udpatePrio+0x54>
 800095c:	7afb      	ldrb	r3, [r7, #11]
 800095e:	77fb      	strb	r3, [r7, #31]

		/* Goes to next task
		 ---------------------------------------------------*/
		it = it->next;
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1ec      	bne.n	8000946 <os_mutex_udpatePrio+0x3a>
	}

	/* Store priority and return
	 ---------------------------------------------------*/
	mutex->max_prio = maxPrio;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	7ffa      	ldrb	r2, [r7, #31]
 8000970:	775a      	strb	r2, [r3, #29]
	return prev_max_prio != maxPrio;
 8000972:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000976:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800097a:	429a      	cmp	r2, r3
 800097c:	bf14      	ite	ne
 800097e:	2301      	movne	r3, #1
 8000980:	2300      	moveq	r3, #0
 8000982:	b2db      	uxtb	r3, r3
}
 8000984:	4618      	mov	r0, r3
 8000986:	3724      	adds	r7, #36	; 0x24
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <os_task_udpatePrio>:
 * @param os_handle_t h : [in] The reference to the task
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
static bool os_task_udpatePrio(os_handle_t h){
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

	/* Error check
	 ---------------------------------------------------*/
	if(h == NULL) return false;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d101      	bne.n	80009a2 <os_task_udpatePrio+0x12>
 800099e:	2300      	movs	r3, #0
 80009a0:	e04e      	b.n	8000a40 <os_task_udpatePrio+0xb0>
	if(h->type != OS_OBJ_TASK) return false;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d001      	beq.n	80009ae <os_task_udpatePrio+0x1e>
 80009aa:	2300      	movs	r3, #0
 80009ac:	e048      	b.n	8000a40 <os_task_udpatePrio+0xb0>

	/* Store priority
	 ---------------------------------------------------*/
	os_task_t* tsk = (os_task_t*)h;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	617b      	str	r3, [r7, #20]
	int8_t prev_prio = tsk->priority;
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009b8:	74fb      	strb	r3, [r7, #19]

	/* Point to the first task on block list
	 ---------------------------------------------------*/
	int8_t maxPrio = tsk->basePriority;
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	7e5b      	ldrb	r3, [r3, #25]
 80009be:	77fb      	strb	r3, [r7, #31]
	os_list_head_t* head = (os_list_head_t*)h->blockList;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	60fb      	str	r3, [r7, #12]
	os_list_cell_t* it = head->head.next;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	61bb      	str	r3, [r7, #24]

	/* While it is a valid task
	 ---------------------------------------------------*/
	while(it != NULL){
 80009cc:	e00f      	b.n	80009ee <os_task_udpatePrio+0x5e>

		/* Get task's priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_task_t*)it->element)->priority;
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009d6:	72bb      	strb	r3, [r7, #10]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 80009d8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80009dc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	da01      	bge.n	80009e8 <os_task_udpatePrio+0x58>
 80009e4:	7abb      	ldrb	r3, [r7, #10]
 80009e6:	77fb      	strb	r3, [r7, #31]

		/* Goes to next task
		 ---------------------------------------------------*/
		it = it->next;
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1ec      	bne.n	80009ce <os_task_udpatePrio+0x3e>
	}

	/* Point to the first mutex in the owned list
	 ---------------------------------------------------*/
	head = (os_list_head_t*) ( ((os_task_t*)h)->ownedMutex);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f8:	60fb      	str	r3, [r7, #12]
	it = head->head.next;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	61bb      	str	r3, [r7, #24]

	/* While it is a valid mutex
	 ---------------------------------------------------*/
	while(it != NULL){
 8000a00:	e00e      	b.n	8000a20 <os_task_udpatePrio+0x90>

		/* Get mutex' priority and calculate maximum
		 ---------------------------------------------------*/
		int8_t taskPrio = ((os_mutex_t*)it->element)->max_prio;
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	7f5b      	ldrb	r3, [r3, #29]
 8000a08:	72fb      	strb	r3, [r7, #11]
		if(maxPrio < taskPrio) maxPrio = taskPrio;
 8000a0a:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8000a0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	da01      	bge.n	8000a1a <os_task_udpatePrio+0x8a>
 8000a16:	7afb      	ldrb	r3, [r7, #11]
 8000a18:	77fb      	strb	r3, [r7, #31]

		/* Goes to next mutex
		 ---------------------------------------------------*/
		it = it->next;
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	61bb      	str	r3, [r7, #24]
	while(it != NULL){
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1ed      	bne.n	8000a02 <os_task_udpatePrio+0x72>
	}

	/* Store priority and return
	 ---------------------------------------------------*/
	tsk->priority = maxPrio;
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	7ffa      	ldrb	r2, [r7, #31]
 8000a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	return prev_prio != maxPrio;
 8000a2e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000a32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	bf14      	ite	ne
 8000a3a:	2301      	movne	r3, #1
 8000a3c:	2300      	moveq	r3, #0
 8000a3e:	b2db      	uxtb	r3, r3
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3724      	adds	r7, #36	; 0x24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <os_obj_updatePrio>:
 * @param os_handle_t h : [in] The reference to the object
 *
 * @return bool : (1) = priority changed; (0) = Nothing changed
 *
 **********************************************************************/
void os_obj_updatePrio(os_handle_t h){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

	/* Enter critical section
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8000a54:	f3ef 8310 	mrs	r3, PRIMASK
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	b672      	cpsid	i
 8000a5c:	f3bf 8f6f 	isb	sy

	/* If the object is a mutex, update its priority
	 ---------------------------------------------------*/
	if(h->type == OS_OBJ_MUTEX && os_mutex_udpatePrio(h)){
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d10a      	bne.n	8000a7e <os_obj_updatePrio+0x32>
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff4f 	bl	800090c <os_mutex_udpatePrio>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d004      	beq.n	8000a7e <os_obj_updatePrio+0x32>
		os_obj_updatePrio(((os_mutex_t*)h)->owner); //Update its owner priority if the mutex's priority changed
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ffe7 	bl	8000a4c <os_obj_updatePrio>
	}

	/* If the object is a task, update its priority
	 ---------------------------------------------------*/
	if(h->type == OS_OBJ_TASK && os_task_udpatePrio(h)){
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d13d      	bne.n	8000b02 <os_obj_updatePrio+0xb6>
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff ff82 	bl	8000990 <os_task_udpatePrio>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d037      	beq.n	8000b02 <os_obj_updatePrio+0xb6>

		/* If its priority changed, we must update the objects the task is waiting
		 ---------------------------------------------------*/
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	e02f      	b.n	8000af8 <os_obj_updatePrio+0xac>

			/* objects that are not tasks or mutexes
			 ---------------------------------------------------*/
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MUTEX || ((os_task_t*)h)->objWaited[i]->type == OS_OBJ_TASK){
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d008      	beq.n	8000abc <os_obj_updatePrio+0x70>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d108      	bne.n	8000ace <os_obj_updatePrio+0x82>

				/* Update object's priority
				 ---------------------------------------------------*/
				os_obj_updatePrio(((os_task_t*)h)->objWaited[i]);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4413      	add	r3, r2
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ffbf 	bl	8000a4c <os_obj_updatePrio>
			}

			/* update msgQ
			 ---------------------------------------------------*/
			if(((os_task_t*)h)->objWaited[i]->type == OS_OBJ_MSGQ){
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b05      	cmp	r3, #5
 8000ade:	d108      	bne.n	8000af2 <os_obj_updatePrio+0xa6>
				os_msgQ_updateAndCheck((os_hMsgQ_t)((os_task_t*)h)->objWaited[i]);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fd3f 	bl	8001570 <os_msgQ_updateAndCheck>
		for(size_t i = 0; i < ((os_task_t*)h)->sizeObjs; i++){
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d3ca      	bcc.n	8000a98 <os_obj_updatePrio+0x4c>
		}
	}

	/* Exit critical section
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	f383 8810 	msr	PRIMASK, r3
 8000b08:	f3bf 8f6f 	isb	sy
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <os_list_init>:
 *
 * @brief This function initializes a list
 *
 * @return os_list_head_t* : reference to the head of the list
 **********************************************************************/
os_list_head_t* os_list_init(){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0

	/* Allocate head
	 ---------------------------------------------------*/
	os_list_head_t* ret = (os_list_head_t*)os_heap_alloc(sizeof(os_list_head_t));
 8000b1a:	201c      	movs	r0, #28
 8000b1c:	f7ff fe14 	bl	8000748 <os_heap_alloc>
 8000b20:	6078      	str	r0, [r7, #4]
	if(ret == NULL) return NULL;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d101      	bne.n	8000b2c <os_list_init+0x18>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e012      	b.n	8000b52 <os_list_init+0x3e>

	/* Init head and return
	 ---------------------------------------------------*/
	ret->head.next = NULL;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
	ret->head.prev = NULL;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
	ret->head.element = NULL;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
	ret->first = NULL;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
	ret->last = NULL;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
	ret->listSize = 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]

	return ret;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <os_list_search>:
 * @param os_list_head_t* head : [in] reference to the head of the list
 * @param void* el	  		   : [in] element to search
 *
 * @return os_list_cell_t* : reference to the cell containing the element or null if not found
 **********************************************************************/
os_list_cell_t* os_list_search(os_list_head_t* head, void* el){
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(el == NULL) return NULL;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <os_list_search+0x14>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e01f      	b.n	8000bae <os_list_search+0x54>
	if(head == NULL) return NULL;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <os_list_search+0x1e>
 8000b74:	2300      	movs	r3, #0
 8000b76:	e01a      	b.n	8000bae <os_list_search+0x54>

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8000b78:	f3ef 8310 	mrs	r3, PRIMASK
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	b672      	cpsid	i
 8000b80:	f3bf 8f6f 	isb	sy

	/* Search position to insert
	 ------------------------------------------------------*/
	os_list_cell_t* it = head->head.next;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
	while(it != NULL && it->element != el){
 8000b8a:	e002      	b.n	8000b92 <os_list_search+0x38>
		it = it->next;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
	while(it != NULL && it->element != el){
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d004      	beq.n	8000ba2 <os_list_search+0x48>
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d1f4      	bne.n	8000b8c <os_list_search+0x32>
	}

	OS_EXIT_CRITICAL();
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f383 8810 	msr	PRIMASK, r3
 8000ba8:	f3bf 8f6f 	isb	sy
	return it;
 8000bac:	68fb      	ldr	r3, [r7, #12]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <os_handle_list_searchByName>:
 * @param os_obj_type_e type   : [in] type of the object
 * @param char* name		   : [in] name of the object
 *
 * @return os_list_cell_t* : reference to the cell containing the handle or null if not found
 **********************************************************************/
os_list_cell_t* os_handle_list_searchByName(os_list_head_t* head, os_obj_type_e type, char const * name){
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	60f8      	str	r0, [r7, #12]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	72fb      	strb	r3, [r7, #11]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(head == NULL) return NULL;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <os_handle_list_searchByName+0x18>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e031      	b.n	8000c36 <os_handle_list_searchByName+0x7c>
	if(name == NULL) return NULL;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d101      	bne.n	8000bdc <os_handle_list_searchByName+0x22>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e02c      	b.n	8000c36 <os_handle_list_searchByName+0x7c>

	/* Enter Critical Section
	 * If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8000bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	b672      	cpsid	i
 8000be4:	f3bf 8f6f 	isb	sy

	/* Search list
	 ------------------------------------------------------*/
	os_list_cell_t* it = head->head.next;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	617b      	str	r3, [r7, #20]
	while(it != NULL){
 8000bee:	e017      	b.n	8000c20 <os_handle_list_searchByName+0x66>

		/* If type and name match, we break.
		 ------------------------------------------------------*/
		if( ((os_handle_t)(it->element))->type == type && ((os_handle_t)(it->element))->name != NULL && strcmp(name, ((os_handle_t)(it->element))->name) == 0) break;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	7afa      	ldrb	r2, [r7, #11]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d10e      	bne.n	8000c1a <os_handle_list_searchByName+0x60>
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d009      	beq.n	8000c1a <os_handle_list_searchByName+0x60>
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fada 	bl	80001c8 <strcmp>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d006      	beq.n	8000c28 <os_handle_list_searchByName+0x6e>

		/* Otherwise we go to next one
		 ------------------------------------------------------*/
		it = it->next;
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	617b      	str	r3, [r7, #20]
	while(it != NULL){
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1e4      	bne.n	8000bf0 <os_handle_list_searchByName+0x36>
 8000c26:	e000      	b.n	8000c2a <os_handle_list_searchByName+0x70>
		if( ((os_handle_t)(it->element))->type == type && ((os_handle_t)(it->element))->name != NULL && strcmp(name, ((os_handle_t)(it->element))->name) == 0) break;
 8000c28:	bf00      	nop
	}

	OS_EXIT_CRITICAL();
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	f383 8810 	msr	PRIMASK, r3
 8000c30:	f3bf 8f6f 	isb	sy
	return it;
 8000c34:	697b      	ldr	r3, [r7, #20]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <os_list_add>:
 * @param void* el	   		    : [in] reference to the element
 * @param os_list_add_pos_e pos : [in] flag to indicate whether to add at the first or last position
 *
 * @return os_err_e : error code (0 = OK)
 **********************************************************************/
os_err_e os_list_add(os_list_head_t* head, void* el, os_list_pos_e pos){
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	71fb      	strb	r3, [r7, #7]

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 8000c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	b672      	cpsid	i
 8000c54:	f3bf 8f6f 	isb	sy

	/* Allocate cell
	 ------------------------------------------------------*/
	os_list_cell_t* new = (os_list_cell_t*)os_heap_alloc(sizeof(os_list_cell_t));
 8000c58:	2010      	movs	r0, #16
 8000c5a:	f7ff fd75 	bl	8000748 <os_heap_alloc>
 8000c5e:	6178      	str	r0, [r7, #20]

	/* Check allocation
	 ------------------------------------------------------*/
	if(new == NULL) {
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d106      	bne.n	8000c74 <os_list_add+0x36>

		/* EXIT Critical Section
		 ------------------------------------------------------*/
		OS_EXIT_CRITICAL();
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	f383 8810 	msr	PRIMASK, r3
 8000c6c:	f3bf 8f6f 	isb	sy
		return OS_ERR_INSUFFICIENT_HEAP;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e04e      	b.n	8000d12 <os_list_add+0xd4>
	}

	/* Store information on new cell
	 ------------------------------------------------------*/
	new->order  = head->listSize++;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	1c59      	adds	r1, r3, #1
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	6191      	str	r1, [r2, #24]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	60d3      	str	r3, [r2, #12]
	new->element = el;
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	609a      	str	r2, [r3, #8]

	/* Add first element
	 ------------------------------------------------------*/
	if(head->head.next == NULL) {
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10f      	bne.n	8000cb0 <os_list_add+0x72>
		head->last = new;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	615a      	str	r2, [r3, #20]
		new->prev = &head->head;
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	605a      	str	r2, [r3, #4]
		new->next = NULL;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
		head->head.next = new;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	601a      	str	r2, [r3, #0]
		head->first = new;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	611a      	str	r2, [r3, #16]
 8000cae:	e02a      	b.n	8000d06 <os_list_add+0xc8>
	}
	else{

		/* Add cell at the beginning
		 ------------------------------------------------------*/
		if(pos == OS_LIST_FIRST){
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d114      	bne.n	8000ce0 <os_list_add+0xa2>
			new->prev = head->first->prev;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	605a      	str	r2, [r3, #4]
			new->next = head->first;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	691a      	ldr	r2, [r3, #16]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	601a      	str	r2, [r3, #0]
			head->first->prev->next = new;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	601a      	str	r2, [r3, #0]
			head->first->prev = new;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	605a      	str	r2, [r3, #4]
			head->first = new;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	611a      	str	r2, [r3, #16]
		}

		/* Add cell at the end
		 ------------------------------------------------------*/
		if(pos == OS_LIST_LAST){
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d10f      	bne.n	8000d06 <os_list_add+0xc8>
			new->next  = head->last->next;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	601a      	str	r2, [r3, #0]
			new->prev  = head->last;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	695a      	ldr	r2, [r3, #20]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	605a      	str	r2, [r3, #4]
			head->last->next = new;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	601a      	str	r2, [r3, #0]
			head->last = new;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	615a      	str	r2, [r3, #20]
		}
	}
	OS_EXIT_CRITICAL();
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	f383 8810 	msr	PRIMASK, r3
 8000d0c:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <os_list_remove>:
 * @param os_list_head_t* head : [in] reference to the head of the list
 * @param void* el	   		   : [in]  reference to the element
 *
 * @return os_err_e : error code (0 = OK)
 **********************************************************************/
os_err_e os_list_remove(os_list_head_t* head, void* el){
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b088      	sub	sp, #32
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) el;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	617b      	str	r3, [r7, #20]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(t == NULL) return OS_ERR_BAD_ARG;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <os_list_remove+0x18>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e042      	b.n	8000db8 <os_list_remove+0x9e>

	/* Search cell to verify it is in the list
	 ------------------------------------------------------*/
	os_list_cell_t* pCell = os_list_search(head, el);
 8000d32:	6839      	ldr	r1, [r7, #0]
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff10 	bl	8000b5a <os_list_search>
 8000d3a:	6138      	str	r0, [r7, #16]

	/* Return if not
	 ------------------------------------------------------*/
	if(pCell == NULL) return OS_ERR_INVALID;
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <os_list_remove+0x2c>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e038      	b.n	8000db8 <os_list_remove+0x9e>

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 8000d46:	f3ef 8310 	mrs	r3, PRIMASK
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	b672      	cpsid	i
 8000d4e:	f3bf 8f6f 	isb	sy

	/* Declare Iterators
	 ------------------------------------------------------*/
	os_list_cell_t* it = &head->head;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	61fb      	str	r3, [r7, #28]
	os_list_cell_t* pPrev = NULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]

	/* Search for the task
	 ------------------------------------------------------*/
	while(it->next != NULL){
 8000d5a:	e016      	b.n	8000d8a <os_list_remove+0x70>

		/* Update order
		 ------------------------------------------------------*/
		if(it->next->order > pCell->order) it->next->order--;
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d904      	bls.n	8000d74 <os_list_remove+0x5a>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	3a01      	subs	r2, #1
 8000d72:	60da      	str	r2, [r3, #12]

		/* Store previous
		 ------------------------------------------------------*/
		if(it->next->element == el) pPrev = it;
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d101      	bne.n	8000d84 <os_list_remove+0x6a>
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	61bb      	str	r3, [r7, #24]

		/* Go to next
		 ------------------------------------------------------*/
		it = it->next;
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	61fb      	str	r3, [r7, #28]
	while(it->next != NULL){
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1e4      	bne.n	8000d5c <os_list_remove+0x42>
	}

	/* Kill cell
	 ------------------------------------------------------*/
	pPrev->next = pPrev->next->next;
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	601a      	str	r2, [r3, #0]

	/* Reduce size and return
	 ------------------------------------------------------*/
	head->listSize--;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	619a      	str	r2, [r3, #24]
	OS_EXIT_CRITICAL();
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f383 8810 	msr	PRIMASK, r3
 8000dac:	f3bf 8f6f 	isb	sy
	return os_heap_free(pCell);
 8000db0:	6938      	ldr	r0, [r7, #16]
 8000db2:	f7ff fd2f 	bl	8000814 <os_heap_free>
 8000db6:	4603      	mov	r3, r0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <os_list_pop>:
 * @param os_list_add_pos_e pos : [ in] flag to indicate whether to add at the first or last position
 * @param os_err_e* err			: [out] OS error code, NULL to ignore
 *
 * @return void* : address of the element popped or NULL if error
 **********************************************************************/
void* os_list_pop(os_list_head_t* head, os_list_pos_e pos, os_err_e* err){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	72fb      	strb	r3, [r7, #11]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(head == NULL) {
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d107      	bne.n	8000de4 <os_list_pop+0x24>
		if(err != NULL) *err = OS_ERR_BAD_ARG;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <os_list_pop+0x20>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
		return NULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	e071      	b.n	8000ec8 <os_list_pop+0x108>
	}

	/* Return if not
	 ------------------------------------------------------*/
	if(head->last == NULL || head->first == NULL) {
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <os_list_pop+0x34>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d107      	bne.n	8000e04 <os_list_pop+0x44>
		if(err != NULL) *err = OS_ERR_INVALID;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <os_list_pop+0x40>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	701a      	strb	r2, [r3, #0]
		return NULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	e061      	b.n	8000ec8 <os_list_pop+0x108>
	}

	/* Enter Critical Section
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL(); //If it's searching / inserting a block, it can be interrupted and another task can change the list. In this case, the first task will blow up when returning
 8000e04:	f3ef 8310 	mrs	r3, PRIMASK
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	b672      	cpsid	i
 8000e0c:	f3bf 8f6f 	isb	sy

	/* Point to cell and content
	 ------------------------------------------------------*/
	void* del = (pos == OS_LIST_FIRST) ? head->first : head->last;
 8000e10:	7afb      	ldrb	r3, [r7, #11]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <os_list_pop+0x5c>
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	e001      	b.n	8000e20 <os_list_pop+0x60>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	61fb      	str	r3, [r7, #28]
	void* ret = (pos == OS_LIST_FIRST) ? head->first->element : head->last->element;
 8000e22:	7afb      	ldrb	r3, [r7, #11]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d103      	bne.n	8000e30 <os_list_pop+0x70>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	e002      	b.n	8000e36 <os_list_pop+0x76>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	61bb      	str	r3, [r7, #24]

	/* Kill first element
	 ------------------------------------------------------*/
	if(pos == OS_LIST_FIRST){
 8000e38:	7afb      	ldrb	r3, [r7, #11]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d117      	bne.n	8000e6e <os_list_pop+0xae>
		head->first->prev->next = head->first->next;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	601a      	str	r2, [r3, #0]
		if(head->first->next != NULL){
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <os_list_pop+0xa4>
			head->first->next->prev = head->first->prev;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	691a      	ldr	r2, [r3, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6852      	ldr	r2, [r2, #4]
 8000e62:	605a      	str	r2, [r3, #4]
		}
		head->first = head->first->next;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
	}


	/* Kill last element
	 ------------------------------------------------------*/
	if(pos == OS_LIST_LAST){
 8000e6e:	7afb      	ldrb	r3, [r7, #11]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d113      	bne.n	8000e9c <os_list_pop+0xdc>
		head->last->prev->next = NULL;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
		if(head->last->prev == &head->head){
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d103      	bne.n	8000e92 <os_list_pop+0xd2>
			head->last = NULL;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
 8000e90:	e004      	b.n	8000e9c <os_list_pop+0xdc>
		}
		else{
			head->last = head->last->prev;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	615a      	str	r2, [r3, #20]
		}
	}

	/* Free heap
	 ------------------------------------------------------*/
	os_err_e error = os_heap_free(del);
 8000e9c:	69f8      	ldr	r0, [r7, #28]
 8000e9e:	f7ff fcb9 	bl	8000814 <os_heap_free>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	75fb      	strb	r3, [r7, #23]
	if(err != NULL) *err = error;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <os_list_pop+0xf2>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7dfa      	ldrb	r2, [r7, #23]
 8000eb0:	701a      	strb	r2, [r3, #0]

	/* Reduce size and return
	 ------------------------------------------------------*/
	head->listSize--;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	1e5a      	subs	r2, r3, #1
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	619a      	str	r2, [r3, #24]
	OS_EXIT_CRITICAL();
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	f383 8810 	msr	PRIMASK, r3
 8000ec2:	f3bf 8f6f 	isb	sy

	return ret;
 8000ec6:	69bb      	ldr	r3, [r7, #24]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <os_list_clear>:
 * @brief This function clears a list, freeing all its cells and head
 *
 * @param os_list_head_t* head : [in] reference to the head of the list
 *
 **********************************************************************/
void os_list_clear(os_list_head_t* head){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ---------------------------------------------------*/
	if(head == NULL) return;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d01c      	beq.n	8000f18 <os_list_clear+0x48>

	/* Enter critical to avoid list changing
	 ---------------------------------------------------*/
	OS_CRITICAL_SECTION(
 8000ede:	f3ef 8310 	mrs	r3, PRIMASK
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	b672      	cpsid	i
 8000ee6:	f3bf 8f6f 	isb	sy
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e007      	b.n	8000f00 <os_list_clear+0x30>
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	6938      	ldr	r0, [r7, #16]
 8000efc:	f7ff fc8a 	bl	8000814 <os_heap_free>
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f4      	bne.n	8000ef0 <os_list_clear+0x20>
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fc84 	bl	8000814 <os_heap_free>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f383 8810 	msr	PRIMASK, r3
 8000f12:	f3bf 8f6f 	isb	sy
 8000f16:	e000      	b.n	8000f1a <os_list_clear+0x4a>
	if(head == NULL) return;
 8000f18:	bf00      	nop

		/* Free head
		 ---------------------------------------------------*/
		os_heap_free(head);
	);
}
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <os_task_list_sort>:
 * Must be used on task lists
 *
 * @param os_list_head_t* head : [in] reference to the head of the list
 *
 **********************************************************************/
void os_task_list_sort(os_list_head_t* head){
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b08b      	sub	sp, #44	; 0x2c
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ---------------------------------------------------*/
	if(head == NULL) return;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 8098 	beq.w	8001060 <os_task_list_sort+0x140>

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8000f30:	f3ef 8310 	mrs	r3, PRIMASK
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	b672      	cpsid	i
 8000f38:	f3bf 8f6f 	isb	sy

	/* Update priority for all tasks
	 ---------------------------------------------------*/
	os_list_cell_t* p = head->head.next;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
	while(p != NULL){
 8000f42:	e00c      	b.n	8000f5e <os_task_list_sort+0x3e>
		((os_task_t*)p->element)->priority = os_task_getPrio(p->element);
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	689c      	ldr	r4, [r3, #8]
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	f001 fef9 	bl	8002d44 <os_task_getPrio>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		p = p->next;
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
	while(p != NULL){
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1ef      	bne.n	8000f44 <os_task_list_sort+0x24>
	}

	/* Begin sort
	 ---------------------------------------------------*/
	os_list_cell_t* it_slow = &head->head;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	623b      	str	r3, [r7, #32]
	while(it_slow->next != NULL && it_slow->next->next != NULL){
 8000f68:	e069      	b.n	800103e <os_task_list_sort+0x11e>

		/* For each cell
		 ---------------------------------------------------*/
		bool changeMade = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	77fb      	strb	r3, [r7, #31]
		os_list_cell_t* it_fast = &head->head;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	61bb      	str	r3, [r7, #24]
		while(it_fast->next != NULL && it_fast->next->next != NULL){
 8000f72:	e052      	b.n	800101a <os_task_list_sort+0xfa>

			/* Decide to swap or not
			 ---------------------------------------------------*/
			bool swap  = ((os_task_t*)it_fast->next->element)->priority == ((os_task_t*)it_fast->next->next->element)->priority;
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f993 2044 	ldrsb.w	r2, [r3, #68]	; 0x44
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	bf0c      	ite	eq
 8000f8e:	2301      	moveq	r3, #1
 8000f90:	2300      	movne	r3, #0
 8000f92:	75fb      	strb	r3, [r7, #23]
				 swap &= it_fast->next->order > it_fast->next->next->order;
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	6812      	ldr	r2, [r2, #0]
 8000f9a:	68d1      	ldr	r1, [r2, #12]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	68d2      	ldr	r2, [r2, #12]
 8000fa4:	4291      	cmp	r1, r2
 8000fa6:	bf8c      	ite	hi
 8000fa8:	2201      	movhi	r2, #1
 8000faa:	2200      	movls	r2, #0
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	4013      	ands	r3, r2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf14      	ite	ne
 8000fb4:	2301      	movne	r3, #1
 8000fb6:	2300      	moveq	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]
				 swap |= ((os_task_t*)it_fast->next->element)->priority < ((os_task_t*)it_fast->next->next->element)->priority;
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	6812      	ldr	r2, [r2, #0]
 8000fc0:	6892      	ldr	r2, [r2, #8]
 8000fc2:	f992 1044 	ldrsb.w	r1, [r2, #68]	; 0x44
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	6892      	ldr	r2, [r2, #8]
 8000fce:	f992 2044 	ldrsb.w	r2, [r2, #68]	; 0x44
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	bfb4      	ite	lt
 8000fd6:	2201      	movlt	r2, #1
 8000fd8:	2200      	movge	r2, #0
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf14      	ite	ne
 8000fe2:	2301      	movne	r3, #1
 8000fe4:	2300      	moveq	r3, #0
 8000fe6:	75fb      	strb	r3, [r7, #23]

			/* Swap cells
			 ---------------------------------------------------*/
			if(swap){
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d012      	beq.n	8001014 <os_task_list_sort+0xf4>

				/* Store references
				 ---------------------------------------------------*/
				os_list_cell_t* pN1 = it_fast->next;
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
				os_list_cell_t* pN2 = it_fast->next->next;
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	60fb      	str	r3, [r7, #12]

				/* Swap
				 ---------------------------------------------------*/
				it_fast->next = pN2;
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	601a      	str	r2, [r3, #0]
				pN1->next = pN2->next;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	601a      	str	r2, [r3, #0]
				pN2->next = pN1;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	601a      	str	r2, [r3, #0]

				changeMade = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	77fb      	strb	r3, [r7, #31]

			}

			it_fast = it_fast->next;
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61bb      	str	r3, [r7, #24]
		while(it_fast->next != NULL && it_fast->next->next != NULL){
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d004      	beq.n	800102c <os_task_list_sort+0x10c>
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1a3      	bne.n	8000f74 <os_task_list_sort+0x54>

		}

		/* If no changement was made, we finished
		 ---------------------------------------------------*/
		if(changeMade == 0) break;
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	f083 0301 	eor.w	r3, r3, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10c      	bne.n	8001052 <os_task_list_sort+0x132>

		it_slow = it_slow->next;
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	623b      	str	r3, [r7, #32]
	while(it_slow->next != NULL && it_slow->next->next != NULL){
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <os_task_list_sort+0x134>
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d18c      	bne.n	8000f6a <os_task_list_sort+0x4a>
 8001050:	e000      	b.n	8001054 <os_task_list_sort+0x134>
		if(changeMade == 0) break;
 8001052:	bf00      	nop
	}

	OS_EXIT_CRITICAL();
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	f383 8810 	msr	PRIMASK, r3
 800105a:	f3bf 8f6f 	isb	sy
 800105e:	e000      	b.n	8001062 <os_task_list_sort+0x142>
	if(head == NULL) return;
 8001060:	bf00      	nop
}
 8001062:	372c      	adds	r7, #44	; 0x2c
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}

08001068 <os_handle_list_getObjToUpdate>:
 *
 * @brief This function searches for an object in the object list that needs to update. Must be used in a handle list
 *
 * @return os_handle_t handle to the object to update or NULL if nothing to do
 **********************************************************************/
os_handle_t os_handle_list_getObjToUpdate(){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0

	/* Search object list
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = os_obj_head.head.next; it != NULL; it = it->next){
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <os_handle_list_getObjToUpdate+0x38>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	e00a      	b.n	800108c <os_handle_list_getObjToUpdate+0x24>
		if( ((os_handle_t)it->element)->objUpdate == 1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	7a1b      	ldrb	r3, [r3, #8]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <os_handle_list_getObjToUpdate+0x1e>
			return it->element;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	e006      	b.n	8001094 <os_handle_list_getObjToUpdate+0x2c>
	for(os_list_cell_t* it = os_obj_head.head.next; it != NULL; it = it->next){
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f1      	bne.n	8001076 <os_handle_list_getObjToUpdate+0xe>
	}

	return NULL;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20014068 	.word	0x20014068

080010a4 <os_task_list_isObjFreeOnTask>:
 * @param os_handle_t obj  : [in] object to scan
 * @param os_handle_t task : [in] task to stop the scan
 *
 * @return bool : 1 = object is free ; 0 = object is not free
 **********************************************************************/
bool os_task_list_isObjFreeOnTask(os_handle_t obj, os_handle_t task){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]

	/* Enter critical to avoid list changing
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80010ae:	f3ef 8310 	mrs	r3, PRIMASK
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	b672      	cpsid	i
 80010b6:	f3bf 8f6f 	isb	sy

	/* Get current free count
	 ---------------------------------------------------*/
	uint32_t freeCount = obj->getFreeCount(obj);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	4798      	blx	r3
 80010c2:	6278      	str	r0, [r7, #36]	; 0x24

	/* If it is 0, return 0 immediately
	 ---------------------------------------------------*/
	if(freeCount == 0) {
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d106      	bne.n	80010d8 <os_task_list_isObjFreeOnTask+0x34>
		OS_EXIT_CRITICAL();
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f383 8810 	msr	PRIMASK, r3
 80010d0:	f3bf 8f6f 	isb	sy
		return 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e0a8      	b.n	800122a <os_task_list_isObjFreeOnTask+0x186>
	}

	/* If it can be taken more times than the number of tasks waiting for it return 1
	 ---------------------------------------------------*/
	if(freeCount >= ((os_list_head_t*)obj->blockList)->listSize || freeCount == 0xFFFFFFFF) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d203      	bcs.n	80010ec <os_task_list_isObjFreeOnTask+0x48>
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ea:	d106      	bne.n	80010fa <os_task_list_isObjFreeOnTask+0x56>
		OS_EXIT_CRITICAL();
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f383 8810 	msr	PRIMASK, r3
 80010f2:	f3bf 8f6f 	isb	sy
		return 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e097      	b.n	800122a <os_task_list_isObjFreeOnTask+0x186>
	}

	/* Otherwise, sort and start scan
	 ---------------------------------------------------*/
	os_task_list_sort(obj->blockList);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff0e 	bl	8000f20 <os_task_list_sort>

	/* Start scan by pointing to the first waiting task
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	623b      	str	r3, [r7, #32]
 800110c:	e07c      	b.n	8001208 <os_task_list_isObjFreeOnTask+0x164>

		/* Convert address
		 ---------------------------------------------------*/
		os_task_t* t = (os_task_t*) it->element;
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	613b      	str	r3, [r7, #16]

		/* Return if the object has no more free counters
		 ---------------------------------------------------*/
		if(freeCount == 0) {
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	2b00      	cmp	r3, #0
 8001118:	d106      	bne.n	8001128 <os_task_list_isObjFreeOnTask+0x84>
			OS_EXIT_CRITICAL();
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f383 8810 	msr	PRIMASK, r3
 8001120:	f3bf 8f6f 	isb	sy
			return 0;
 8001124:	2300      	movs	r3, #0
 8001126:	e080      	b.n	800122a <os_task_list_isObjFreeOnTask+0x186>
		}

		/* Stop scanning if we are pointing at the task we are searching
		 ---------------------------------------------------*/
		if(it->element == task) break;
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d06f      	beq.n	8001212 <os_task_list_isObjFreeOnTask+0x16e>

		/* Do not consider deleting or ended tasks
		 ---------------------------------------------------*/
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	7e1b      	ldrb	r3, [r3, #24]
 8001136:	2b04      	cmp	r3, #4
 8001138:	d062      	beq.n	8001200 <os_task_list_isObjFreeOnTask+0x15c>
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	7e1b      	ldrb	r3, [r3, #24]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d05e      	beq.n	8001200 <os_task_list_isObjFreeOnTask+0x15c>

		/* If the task is waiting one object
		 ---------------------------------------------------*/
		if(t->waitFlag == OS_OBJ_WAIT_ONE){
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001148:	2b00      	cmp	r3, #0
 800114a:	d121      	bne.n	8001190 <os_task_list_isObjFreeOnTask+0xec>

			/* Search for the position on the array of the object
			 ---------------------------------------------------*/
			size_t i = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
			for(i = 0; i < t->sizeObjs; i++){
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	e00b      	b.n	800116e <os_task_list_isObjFreeOnTask+0xca>
				if(t->objWaited[i] == obj) break;
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	d008      	beq.n	800117a <os_task_list_isObjFreeOnTask+0xd6>
			for(i = 0; i < t->sizeObjs; i++){
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	3301      	adds	r3, #1
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3ee      	bcc.n	8001156 <os_task_list_isObjFreeOnTask+0xb2>
 8001178:	e000      	b.n	800117c <os_task_list_isObjFreeOnTask+0xd8>
				if(t->objWaited[i] == obj) break;
 800117a:	bf00      	nop
			}

			/* If the position of the object is smaller than the current object the task wants, it will switch
			 ---------------------------------------------------*/
			freeCount = i < t->objWanted ? freeCount - 1 : freeCount;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	429a      	cmp	r2, r3
 8001184:	d202      	bcs.n	800118c <os_task_list_isObjFreeOnTask+0xe8>
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	3b01      	subs	r3, #1
 800118a:	e000      	b.n	800118e <os_task_list_isObjFreeOnTask+0xea>
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
		}

		/* If the task is waiting all objects
		 ---------------------------------------------------*/
		if(t->waitFlag == OS_OBJ_WAIT_ALL){
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001196:	2b01      	cmp	r3, #1
 8001198:	d133      	bne.n	8001202 <os_task_list_isObjFreeOnTask+0x15e>

			/* Scan all objects to know if all of them are available
			 ---------------------------------------------------*/
			bool getObjs = 1;
 800119a:	2301      	movs	r3, #1
 800119c:	76fb      	strb	r3, [r7, #27]
			for(size_t i = 0; i < t->sizeObjs; i++){
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e01f      	b.n	80011e4 <os_task_list_isObjFreeOnTask+0x140>

				/* Skip current object
				 ---------------------------------------------------*/
				if(t->objWaited[i] == obj) continue;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d012      	beq.n	80011dc <os_task_list_isObjFreeOnTask+0x138>

				/* If one of the objects is not free on the task, we must wait
				 ---------------------------------------------------*/
				if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6939      	ldr	r1, [r7, #16]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff6d 	bl	80010a4 <os_task_list_isObjFreeOnTask>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f083 0301 	eor.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <os_task_list_isObjFreeOnTask+0x13a>
					getObjs = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	76fb      	strb	r3, [r7, #27]
					break;
 80011da:	e008      	b.n	80011ee <os_task_list_isObjFreeOnTask+0x14a>
				if(t->objWaited[i] == obj) continue;
 80011dc:	bf00      	nop
			for(size_t i = 0; i < t->sizeObjs; i++){
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3da      	bcc.n	80011a4 <os_task_list_isObjFreeOnTask+0x100>
				}
			}

			/* Decrement freeCount if all objects are free
			 ---------------------------------------------------*/
			freeCount = getObjs ? freeCount - 1 : freeCount;
 80011ee:	7efb      	ldrb	r3, [r7, #27]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <os_task_list_isObjFreeOnTask+0x156>
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	3b01      	subs	r3, #1
 80011f8:	e000      	b.n	80011fc <os_task_list_isObjFreeOnTask+0x158>
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
 80011fe:	e000      	b.n	8001202 <os_task_list_isObjFreeOnTask+0x15e>
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8001200:	bf00      	nop
	for(os_list_cell_t* it = ((os_list_head_t*)obj->blockList)->head.next; it != NULL; it = it->next){
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	623b      	str	r3, [r7, #32]
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f47f af7f 	bne.w	800110e <os_task_list_isObjFreeOnTask+0x6a>
 8001210:	e000      	b.n	8001214 <os_task_list_isObjFreeOnTask+0x170>
		if(it->element == task) break;
 8001212:	bf00      	nop
		}
	}

	/* Return if the object is free or not
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f383 8810 	msr	PRIMASK, r3
 800121a:	f3bf 8f6f 	isb	sy
	return freeCount > 0 ? 1 : 0;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	2b00      	cmp	r3, #0
 8001222:	bf14      	ite	ne
 8001224:	2301      	movne	r3, #1
 8001226:	2300      	moveq	r3, #0
 8001228:	b2db      	uxtb	r3, r3
}
 800122a:	4618      	mov	r0, r3
 800122c:	3728      	adds	r7, #40	; 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <os_handle_list_updateAndCheck>:
 *
 * @param os_handle_t h : [in] handle to the object to update
 *
 * @return bool : 1 = current task must yield
 **********************************************************************/
bool os_handle_list_updateAndCheck(os_handle_t h){
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 800123c:	f3ef 8310 	mrs	r3, PRIMASK
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	b672      	cpsid	i
 8001244:	f3bf 8f6f 	isb	sy

	/* Declares auxiliary variables and starts the update
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(h != NULL){
 800124e:	e167      	b.n	8001520 <os_handle_list_updateAndCheck+0x2ec>

		/* Sort List
		 ---------------------------------------------------*/
		os_task_list_sort(h->blockList);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe63 	bl	8000f20 <os_task_list_sort>

		/* Get the number of times we can get the object
		 ---------------------------------------------------*/
		uint32_t freeCount = h->getFreeCount(h);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	4798      	blx	r3
 8001262:	6338      	str	r0, [r7, #48]	; 0x30

		/* Updates every task on the block list
		 ---------------------------------------------------*/
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800126c:	e14e      	b.n	800150c <os_handle_list_updateAndCheck+0x2d8>

			/* Ignore deleting and ended tasks
			 ---------------------------------------------------*/
			os_task_t* t = (os_task_t*)it->element;
 800126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	617b      	str	r3, [r7, #20]
			if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	7e1b      	ldrb	r3, [r3, #24]
 8001278:	2b04      	cmp	r3, #4
 800127a:	f000 8143 	beq.w	8001504 <os_handle_list_updateAndCheck+0x2d0>
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	7e1b      	ldrb	r3, [r3, #24]
 8001282:	2b01      	cmp	r3, #1
 8001284:	f000 813e 	beq.w	8001504 <os_handle_list_updateAndCheck+0x2d0>

			/* If the task is only waiting one object
			 ---------------------------------------------------*/
			if(t->waitFlag == OS_OBJ_WAIT_ONE){
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800128e:	2b00      	cmp	r3, #0
 8001290:	f040 8091 	bne.w	80013b6 <os_handle_list_updateAndCheck+0x182>

				/* Search the position of the object in the task array
				 ---------------------------------------------------*/
				size_t i = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
				for(i = 0; i < t->sizeObjs; i++){
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
 800129c:	e00b      	b.n	80012b6 <os_handle_list_updateAndCheck+0x82>
					if(t->objWaited[i] == h) break;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d008      	beq.n	80012c2 <os_handle_list_updateAndCheck+0x8e>
				for(i = 0; i < t->sizeObjs; i++){
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	3301      	adds	r3, #1
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012bc:	429a      	cmp	r2, r3
 80012be:	d3ee      	bcc.n	800129e <os_handle_list_updateAndCheck+0x6a>
 80012c0:	e000      	b.n	80012c4 <os_handle_list_updateAndCheck+0x90>
					if(t->objWaited[i] == h) break;
 80012c2:	bf00      	nop
				}

				/* If the object can still be taken
				 ---------------------------------------------------*/
				if(freeCount != 0){
 80012c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d026      	beq.n	8001318 <os_handle_list_updateAndCheck+0xe4>

					/* Only do something if the current object has a smaller index than the one the task is waiting for
					 ---------------------------------------------------*/
					if(i < t->objWanted){
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d270      	bcs.n	80013b6 <os_handle_list_updateAndCheck+0x182>

						/* Since the task will switch to the smaller index object, we must update the old object
						 * This update can possibly wake a task
						 ---------------------------------------------------*/
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	429a      	cmp	r2, r3
 80012de:	d208      	bcs.n	80012f2 <os_handle_list_updateAndCheck+0xbe>
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2201      	movs	r2, #1
 80012f0:	721a      	strb	r2, [r3, #8]

						/* Store the object's index and tag task as ready
						 ---------------------------------------------------*/
						t->objWanted = i;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
						t->state = OS_TASK_READY;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2202      	movs	r2, #2
 80012fc:	761a      	strb	r2, [r3, #24]

						/* Decrement freecount if needed
						 ---------------------------------------------------*/
						freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 80012fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001304:	d005      	beq.n	8001312 <os_handle_list_updateAndCheck+0xde>
 8001306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <os_handle_list_updateAndCheck+0xde>
 800130c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130e:	3b01      	subs	r3, #1
 8001310:	e000      	b.n	8001314 <os_handle_list_updateAndCheck+0xe0>
 8001312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
 8001316:	e04e      	b.n	80013b6 <os_handle_list_updateAndCheck+0x182>
				 ---------------------------------------------------*/
				else{

					/* Only do something if the current waited object is no longer available
					 ---------------------------------------------------*/
					if(t->objWanted == i){
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800131e:	429a      	cmp	r2, r3
 8001320:	d149      	bne.n	80013b6 <os_handle_list_updateAndCheck+0x182>

						/* Search for an available object in higher indexes
						 ---------------------------------------------------*/
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001326:	3301      	adds	r3, #1
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
 800132a:	e00f      	b.n	800134c <os_handle_list_updateAndCheck+0x118>
							if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) != 0) break;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6979      	ldr	r1, [r7, #20]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff feb2 	bl	80010a4 <os_task_list_isObjFreeOnTask>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d108      	bne.n	8001358 <os_handle_list_updateAndCheck+0x124>
						for(i = t->objWanted + 1; i < t->sizeObjs; i++)
 8001346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001348:	3301      	adds	r3, #1
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001352:	429a      	cmp	r2, r3
 8001354:	d3ea      	bcc.n	800132c <os_handle_list_updateAndCheck+0xf8>
 8001356:	e000      	b.n	800135a <os_handle_list_updateAndCheck+0x126>
							if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) != 0) break;
 8001358:	bf00      	nop


						/* Tag task as ready if there is an available object, or blocked if not timeout
						 ---------------------------------------------------*/
						t->state = i < t->sizeObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001360:	429a      	cmp	r2, r3
 8001362:	d201      	bcs.n	8001368 <os_handle_list_updateAndCheck+0x134>
 8001364:	2202      	movs	r2, #2
 8001366:	e000      	b.n	800136a <os_handle_list_updateAndCheck+0x136>
 8001368:	2203      	movs	r2, #3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	761a      	strb	r2, [r3, #24]
						t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <os_handle_list_updateAndCheck+0x148>
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	7e1a      	ldrb	r2, [r3, #24]
 800137a:	e000      	b.n	800137e <os_handle_list_updateAndCheck+0x14a>
 800137c:	2202      	movs	r2, #2
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	761a      	strb	r2, [r3, #24]
						t->objWanted = i < t->sizeObjs ? i : 0xFFFFFFFF;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001388:	429a      	cmp	r2, r3
 800138a:	d201      	bcs.n	8001390 <os_handle_list_updateAndCheck+0x15c>
 800138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138e:	e001      	b.n	8001394 <os_handle_list_updateAndCheck+0x160>
 8001390:	f04f 33ff 	mov.w	r3, #4294967295
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	6353      	str	r3, [r2, #52]	; 0x34

						/* If the task switched to a higher index object, update it
						 ---------------------------------------------------*/
						if(t->objWanted < t->sizeObjs) t->objWaited[t->objWanted]->objUpdate = 1;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d208      	bcs.n	80013b6 <os_handle_list_updateAndCheck+0x182>
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2201      	movs	r2, #1
 80013b4:	721a      	strb	r2, [r3, #8]
				}
			}

			/* If the task is waiting all objects
			 ---------------------------------------------------*/
			if(t->waitFlag == OS_OBJ_WAIT_ALL){
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013bc:	2b01      	cmp	r3, #1
 80013be:	f040 808d 	bne.w	80014dc <os_handle_list_updateAndCheck+0x2a8>

				/* Store objWanted to use it later
				 ---------------------------------------------------*/
				size_t last_objWanted = t->objWanted;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c6:	613b      	str	r3, [r7, #16]

				/* If the current object is available
				 ---------------------------------------------------*/
				if(freeCount != 0){
 80013c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d056      	beq.n	800147c <os_handle_list_updateAndCheck+0x248>

					/* Check if all other objects are available
					 ---------------------------------------------------*/
					bool getObjs = 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					for(size_t i = 0; i < t->sizeObjs; i++){
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
 80013d8:	e020      	b.n	800141c <os_handle_list_updateAndCheck+0x1e8>

						/* Skip current object
						 ---------------------------------------------------*/
						if(t->objWaited[i] == h) continue;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d013      	beq.n	8001414 <os_handle_list_updateAndCheck+0x1e0>

						/* If one of the objects is not free on the task, we must wait
						 ---------------------------------------------------*/
						if(os_task_list_isObjFreeOnTask(t->objWaited[i], (os_handle_t) t) == 0){
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6979      	ldr	r1, [r7, #20]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fe52 	bl	80010a4 <os_task_list_isObjFreeOnTask>
 8001400:	4603      	mov	r3, r0
 8001402:	f083 0301 	eor.w	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <os_handle_list_updateAndCheck+0x1e2>
							getObjs = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
 8001412:	e008      	b.n	8001426 <os_handle_list_updateAndCheck+0x1f2>
						if(t->objWaited[i] == h) continue;
 8001414:	bf00      	nop
					for(size_t i = 0; i < t->sizeObjs; i++){
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	3301      	adds	r3, #1
 800141a:	623b      	str	r3, [r7, #32]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	6a3a      	ldr	r2, [r7, #32]
 8001422:	429a      	cmp	r2, r3
 8001424:	d3d9      	bcc.n	80013da <os_handle_list_updateAndCheck+0x1a6>
						}
					}

					/* Update task infos according to the result
					 ---------------------------------------------------*/
					t->objWanted = getObjs ? 0 : 0xFFFFFFFF;
 8001426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <os_handle_list_updateAndCheck+0x1fe>
 800142e:	2200      	movs	r2, #0
 8001430:	e001      	b.n	8001436 <os_handle_list_updateAndCheck+0x202>
 8001432:	f04f 32ff 	mov.w	r2, #4294967295
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	635a      	str	r2, [r3, #52]	; 0x34
					t->state = getObjs ? OS_TASK_READY : OS_TASK_BLOCKED;
 800143a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <os_handle_list_updateAndCheck+0x212>
 8001442:	2202      	movs	r2, #2
 8001444:	e000      	b.n	8001448 <os_handle_list_updateAndCheck+0x214>
 8001446:	2203      	movs	r2, #3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	761a      	strb	r2, [r3, #24]
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : t->state;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <os_handle_list_updateAndCheck+0x226>
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	7e1a      	ldrb	r2, [r3, #24]
 8001458:	e000      	b.n	800145c <os_handle_list_updateAndCheck+0x228>
 800145a:	2202      	movs	r2, #2
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	761a      	strb	r2, [r3, #24]

					freeCount = getObjs && freeCount < OS_OBJ_COUNT_INF ? freeCount - 1 : freeCount;
 8001460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <os_handle_list_updateAndCheck+0x242>
 8001468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146e:	d002      	beq.n	8001476 <os_handle_list_updateAndCheck+0x242>
 8001470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001472:	3b01      	subs	r3, #1
 8001474:	e000      	b.n	8001478 <os_handle_list_updateAndCheck+0x244>
 8001476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
 800147a:	e00c      	b.n	8001496 <os_handle_list_updateAndCheck+0x262>
				 ---------------------------------------------------*/
				else{

					/* Just update task infos
					 ---------------------------------------------------*/
					t->objWanted = 0xFFFFFFFF;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f04f 32ff 	mov.w	r2, #4294967295
 8001482:	635a      	str	r2, [r3, #52]	; 0x34
					t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <os_handle_list_updateAndCheck+0x25c>
 800148c:	2202      	movs	r2, #2
 800148e:	e000      	b.n	8001492 <os_handle_list_updateAndCheck+0x25e>
 8001490:	2203      	movs	r2, #3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	761a      	strb	r2, [r3, #24]
				}

				/* Detects that the objWanted changed
				 ---------------------------------------------------*/
				if(last_objWanted != t->objWanted){
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d01d      	beq.n	80014dc <os_handle_list_updateAndCheck+0x2a8>

					/* If the task was waiting and now wants to get them all (all of them are available)
					 * or if the task wanted to get them all and now is waiting (one of them is no longer available)
					 * we must tag the other objects to update as well
					 ---------------------------------------------------*/
					for(size_t i = 0; i < t->sizeObjs; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	e015      	b.n	80014d2 <os_handle_list_updateAndCheck+0x29e>

						/* Skip current object
						 ---------------------------------------------------*/
						if(t->objWaited[i] == h) continue;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d008      	beq.n	80014ca <os_handle_list_updateAndCheck+0x296>

						/* Tag all objects to update
						 ---------------------------------------------------*/
						t->objWaited[i]->objUpdate = 1;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2201      	movs	r2, #1
 80014c6:	721a      	strb	r2, [r3, #8]
 80014c8:	e000      	b.n	80014cc <os_handle_list_updateAndCheck+0x298>
						if(t->objWaited[i] == h) continue;
 80014ca:	bf00      	nop
					for(size_t i = 0; i < t->sizeObjs; i++){
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	3301      	adds	r3, #1
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d3e4      	bcc.n	80014a6 <os_handle_list_updateAndCheck+0x272>
				}
			}

			/* If the task is ready, get its priority to check if we should yeild
			 ---------------------------------------------------*/
			maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	7e1b      	ldrb	r3, [r3, #24]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d10a      	bne.n	80014fa <os_handle_list_updateAndCheck+0x2c6>
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 80014ea:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 80014ee:	429a      	cmp	r2, r3
 80014f0:	da03      	bge.n	80014fa <os_handle_list_updateAndCheck+0x2c6>
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 80014f8:	e001      	b.n	80014fe <os_handle_list_updateAndCheck+0x2ca>
 80014fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80014fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001502:	e000      	b.n	8001506 <os_handle_list_updateAndCheck+0x2d2>
			if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 8001504:	bf00      	nop
		for(os_list_cell_t* it = ((os_list_head_t*)h->blockList)->head.next; it != NULL; it = it->next){
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	2b00      	cmp	r3, #0
 8001510:	f47f aead 	bne.w	800126e <os_handle_list_updateAndCheck+0x3a>
		}

		/* End of while. All tasks have been updated, so we remove the update flag
		 ---------------------------------------------------*/
		h->objUpdate = 0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	721a      	strb	r2, [r3, #8]
		 * This logic is important for 2 reasons
		 *
		 * 1 - avoids extra recursive calls
		 * 2 - makes sure that an object is updated ultil the end before switching to another one
		 ---------------------------------------------------*/
		h = os_handle_list_getObjToUpdate();
 800151a:	f7ff fda5 	bl	8001068 <os_handle_list_getObjToUpdate>
 800151e:	6078      	str	r0, [r7, #4]
	while(h != NULL){
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f47f ae94 	bne.w	8001250 <os_handle_list_updateAndCheck+0x1c>
	}

	/* Calculate if we must yield or not
	 ---------------------------------------------------*/
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 8001528:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800152c:	2b00      	cmp	r3, #0
 800152e:	dd0d      	ble.n	800154c <os_handle_list_updateAndCheck+0x318>
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <os_handle_list_updateAndCheck+0x338>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fc04 	bl	8002d44 <os_task_getPrio>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001544:	4293      	cmp	r3, r2
 8001546:	dd01      	ble.n	800154c <os_handle_list_updateAndCheck+0x318>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <os_handle_list_updateAndCheck+0x31a>
 800154c:	2300      	movs	r3, #0
 800154e:	76fb      	strb	r3, [r7, #27]
 8001550:	7efb      	ldrb	r3, [r7, #27]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	76fb      	strb	r3, [r7, #27]

	OS_EXIT_CRITICAL();
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f383 8810 	msr	PRIMASK, r3
 800155e:	f3bf 8f6f 	isb	sy
	return mustYield;
 8001562:	7efb      	ldrb	r3, [r7, #27]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3738      	adds	r7, #56	; 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2001405c 	.word	0x2001405c

08001570 <os_msgQ_updateAndCheck>:
 * @param os_hMsgQ_t msgQ : [in] msgQ to update
 *
 * @return bool : (1) current task should yeild
 *
 **********************************************************************/
bool os_msgQ_updateAndCheck(os_hMsgQ_t msgQ){
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

	/* Error check
	 ---------------------------------------------------*/
	if(msgQ == NULL) return 0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <os_msgQ_updateAndCheck+0x12>
 800157e:	2300      	movs	r3, #0
 8001580:	e081      	b.n	8001686 <os_msgQ_updateAndCheck+0x116>
	if(msgQ->obj.type != OS_OBJ_MSGQ) return 0;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b05      	cmp	r3, #5
 8001588:	d001      	beq.n	800158e <os_msgQ_updateAndCheck+0x1e>
 800158a:	2300      	movs	r3, #0
 800158c:	e07b      	b.n	8001686 <os_msgQ_updateAndCheck+0x116>

	/* Enter critical
	 ---------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 800158e:	f3ef 8310 	mrs	r3, PRIMASK
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	b672      	cpsid	i
 8001596:	f3bf 8f6f 	isb	sy

	/* Declares auxiliary variables and starts the update
	 ---------------------------------------------------*/
	int8_t maxPrio = -1;
 800159a:	23ff      	movs	r3, #255	; 0xff
 800159c:	77fb      	strb	r3, [r7, #31]

	/* Sort List
	 ---------------------------------------------------*/
	os_task_list_sort(msgQ->obj.blockList);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fcbc 	bl	8000f20 <os_task_list_sort>

	/* Get the number of times we can get the object
	 ---------------------------------------------------*/
	uint32_t freeCount = ((os_list_head_t*)msgQ->msgList)->listSize;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	61bb      	str	r3, [r7, #24]

	/* Updates every task on the block list
	 ---------------------------------------------------*/
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e044      	b.n	8001644 <os_msgQ_updateAndCheck+0xd4>

		/* Ignore deleting and ended tasks
		 ---------------------------------------------------*/
		os_task_t* t = (os_task_t*)it->element;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	60fb      	str	r3, [r7, #12]
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	7e1b      	ldrb	r3, [r3, #24]
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d039      	beq.n	800163c <os_msgQ_updateAndCheck+0xcc>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	7e1b      	ldrb	r3, [r3, #24]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d035      	beq.n	800163c <os_msgQ_updateAndCheck+0xcc>

		/* If the object can still be taken
		 ---------------------------------------------------*/
		if(freeCount != 0){
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d012      	beq.n	80015fc <os_msgQ_updateAndCheck+0x8c>

			/* Tag task as ready
			 ---------------------------------------------------*/
			t->objWanted = 0;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
			t->state = OS_TASK_READY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2202      	movs	r2, #2
 80015e0:	761a      	strb	r2, [r3, #24]

			/* Decrement freecount if needed
			 ---------------------------------------------------*/
			freeCount = freeCount != OS_OBJ_COUNT_INF && freeCount > 0 ? freeCount - 1 : freeCount;
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d005      	beq.n	80015f6 <os_msgQ_updateAndCheck+0x86>
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <os_msgQ_updateAndCheck+0x86>
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	e000      	b.n	80015f8 <os_msgQ_updateAndCheck+0x88>
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	e00c      	b.n	8001616 <os_msgQ_updateAndCheck+0xa6>
		 ---------------------------------------------------*/
		else{

			/* Just update task infos
			 ---------------------------------------------------*/
			t->objWanted = 0xFFFFFFFF;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001602:	635a      	str	r2, [r3, #52]	; 0x34
			t->state = t->wakeCoutdown == 0 ? OS_TASK_READY : OS_TASK_BLOCKED;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <os_msgQ_updateAndCheck+0xa0>
 800160c:	2202      	movs	r2, #2
 800160e:	e000      	b.n	8001612 <os_msgQ_updateAndCheck+0xa2>
 8001610:	2203      	movs	r2, #3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	761a      	strb	r2, [r3, #24]
		}

		/* If the task is ready, get its priority to check if we should yeild
		 ---------------------------------------------------*/
		maxPrio = t->state == OS_TASK_READY && maxPrio < t->priority ? t->priority : maxPrio;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	7e1b      	ldrb	r3, [r3, #24]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d10a      	bne.n	8001634 <os_msgQ_updateAndCheck+0xc4>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8001624:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001628:	429a      	cmp	r2, r3
 800162a:	da03      	bge.n	8001634 <os_msgQ_updateAndCheck+0xc4>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8001632:	e001      	b.n	8001638 <os_msgQ_updateAndCheck+0xc8>
 8001634:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001638:	77fb      	strb	r3, [r7, #31]
 800163a:	e000      	b.n	800163e <os_msgQ_updateAndCheck+0xce>
		if(t->state == OS_TASK_DELETING || t->state == OS_TASK_ENDED) continue;
 800163c:	bf00      	nop
	for(os_list_cell_t* it = ((os_list_head_t*)msgQ->obj.blockList)->head.next; it != NULL; it = it->next){
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1b7      	bne.n	80015ba <os_msgQ_updateAndCheck+0x4a>
	}

	/* Calculate if we must yield or not
	 ---------------------------------------------------*/
	bool mustYield = maxPrio > 0 ? maxPrio > os_task_getPrio(os_cur_task->element) : 0;
 800164a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800164e:	2b00      	cmp	r3, #0
 8001650:	dd0d      	ble.n	800166e <os_msgQ_updateAndCheck+0xfe>
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <os_msgQ_updateAndCheck+0x120>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4618      	mov	r0, r3
 800165a:	f001 fb73 	bl	8002d44 <os_task_getPrio>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001666:	4293      	cmp	r3, r2
 8001668:	dd01      	ble.n	800166e <os_msgQ_updateAndCheck+0xfe>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <os_msgQ_updateAndCheck+0x100>
 800166e:	2300      	movs	r3, #0
 8001670:	74fb      	strb	r3, [r7, #19]
 8001672:	7cfb      	ldrb	r3, [r7, #19]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	74fb      	strb	r3, [r7, #19]

	OS_EXIT_CRITICAL();
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	f383 8810 	msr	PRIMASK, r3
 8001680:	f3bf 8f6f 	isb	sy
	return mustYield;
 8001684:	7cfb      	ldrb	r3, [r7, #19]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2001405c 	.word	0x2001405c

08001694 <os_msgQ_getFreeCount>:
 * @param os_handle_t h : [in] object to verify the availability
 *
 * @return uint32_t : the amount of times the object can be taken
 *
 **********************************************************************/
static uint32_t os_msgQ_getFreeCount(os_handle_t h){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(h);
	return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <os_msgQ_objTake>:
 *
 * @param os_handle_t h 			: [in] object to take
 * @param os_handle_t takingTask	: [in] handle to the task that is taking the object
 *
 **********************************************************************/
static void os_msgQ_objTake(os_handle_t h, os_handle_t takingTask){
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
	UNUSED_ARG(h);
	UNUSED_ARG(takingTask);
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <os_msgQ_create>:
 * @param os_msgQ_mode_e mode 	: [ in] The queue's mode: FIFO or LIFO
 * @param char* name			: [ in] messqge Q name. If a queue with the same name already exists, its reference is returned. A null name always creates a nameless queue.
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_msgQ_create(os_hMsgQ_t* msgQ, os_msgQ_mode_e mode, char const * name){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	460b      	mov	r3, r1
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	72fb      	strb	r3, [r7, #11]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(msgQ == NULL) 							return OS_ERR_BAD_ARG;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <os_msgQ_create+0x18>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e055      	b.n	8001784 <os_msgQ_create+0xc4>
	if(mode >= __OS_MSGQ_MODE_INVALID) 		return OS_ERR_BAD_ARG;
 80016d8:	7afb      	ldrb	r3, [r7, #11]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d901      	bls.n	80016e2 <os_msgQ_create+0x22>
 80016de:	2301      	movs	r3, #1
 80016e0:	e050      	b.n	8001784 <os_msgQ_create+0xc4>
	if(os_init_get() == false)				return OS_ERR_NOT_READY;
 80016e2:	f7fe fefb 	bl	80004dc <os_init_get>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f083 0301 	eor.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <os_msgQ_create+0x36>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e046      	b.n	8001784 <os_msgQ_create+0xc4>

	/* If messageQ exists, return it
	 ------------------------------------------------------*/
	if(name != NULL){
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00e      	beq.n	800171a <os_msgQ_create+0x5a>
		os_list_cell_t* obj = os_handle_list_searchByName(&os_obj_head, OS_OBJ_MSGQ, name);
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	2105      	movs	r1, #5
 8001700:	4822      	ldr	r0, [pc, #136]	; (800178c <os_msgQ_create+0xcc>)
 8001702:	f7ff fa5a 	bl	8000bba <os_handle_list_searchByName>
 8001706:	61f8      	str	r0, [r7, #28]
		if(obj != NULL){
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <os_msgQ_create+0x5a>
			*msgQ = obj->element;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	601a      	str	r2, [r3, #0]
			return OS_ERR_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e034      	b.n	8001784 <os_msgQ_create+0xc4>
		}
	}

	/* Alloc the msgQ block
	 ------------------------------------------------------*/
	os_msgQ_t* q = (os_msgQ_t*)os_heap_alloc(sizeof(os_msgQ_t));
 800171a:	2020      	movs	r0, #32
 800171c:	f7ff f814 	bl	8000748 <os_heap_alloc>
 8001720:	61b8      	str	r0, [r7, #24]

	/* Check allocation
	 ------------------------------------------------------*/
	if(q == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <os_msgQ_create+0x6c>
 8001728:	2303      	movs	r3, #3
 800172a:	e02b      	b.n	8001784 <os_msgQ_create+0xc4>

	/* Init msgQ
	 ------------------------------------------------------*/
	q->obj.type 			= OS_OBJ_MSGQ;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2205      	movs	r2, #5
 8001730:	701a      	strb	r2, [r3, #0]
	q->obj.name 			= (char*)name;
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	605a      	str	r2, [r3, #4]
	q->obj.objUpdate 		= 0;
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2200      	movs	r2, #0
 800173c:	721a      	strb	r2, [r3, #8]
	q->obj.getFreeCount		= os_msgQ_getFreeCount;
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4a13      	ldr	r2, [pc, #76]	; (8001790 <os_msgQ_create+0xd0>)
 8001742:	60da      	str	r2, [r3, #12]
	q->obj.obj_take 		= os_msgQ_objTake;
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	4a13      	ldr	r2, [pc, #76]	; (8001794 <os_msgQ_create+0xd4>)
 8001748:	611a      	str	r2, [r3, #16]
	q->obj.blockList		= os_list_init();
 800174a:	f7ff f9e3 	bl	8000b14 <os_list_init>
 800174e:	4602      	mov	r2, r0
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	615a      	str	r2, [r3, #20]

	q->msgList		 		= os_list_init();
 8001754:	f7ff f9de 	bl	8000b14 <os_list_init>
 8001758:	4602      	mov	r2, r0
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	619a      	str	r2, [r3, #24]
	q->mode		 			= mode;
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	7afa      	ldrb	r2, [r7, #11]
 8001762:	771a      	strb	r2, [r3, #28]

	/* Add object to object list
	 ------------------------------------------------------*/
	os_err_e ret = os_list_add(&os_obj_head, (os_handle_t) q, OS_LIST_FIRST);
 8001764:	2200      	movs	r2, #0
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <os_msgQ_create+0xcc>)
 800176a:	f7ff fa68 	bl	8000c3e <os_list_add>
 800176e:	4603      	mov	r3, r0
 8001770:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <os_msgQ_create+0xbc>
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	e003      	b.n	8001784 <os_msgQ_create+0xc4>

	/* Return
	 ------------------------------------------------------*/
	*msgQ = q;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	601a      	str	r2, [r3, #0]
	return OS_ERR_OK;
 8001782:	2300      	movs	r3, #0


}
 8001784:	4618      	mov	r0, r3
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20014068 	.word	0x20014068
 8001790:	08001695 	.word	0x08001695
 8001794:	080016ab 	.word	0x080016ab

08001798 <os_msgQ_push>:
 * @param os_hMsgQ_t msgQ  	: [ in] Handle to the queue
 * @param void* msg      	: [ in] Reference to the message
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_msgQ_push(os_hMsgQ_t msgQ, void* msg){
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]

	/* Check arguments
	 ------------------------------------------------------*/
	if(msgQ == NULL) return OS_ERR_BAD_ARG;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <os_msgQ_push+0x14>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e022      	b.n	80017f2 <os_msgQ_push+0x5a>
	if(msgQ->obj.type != OS_OBJ_MSGQ) return OS_ERR_BAD_ARG;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d001      	beq.n	80017b8 <os_msgQ_push+0x20>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e01c      	b.n	80017f2 <os_msgQ_push+0x5a>

	/* add message on list
	 ------------------------------------------------------*/
	os_err_e ret = os_list_add(((os_list_head_t*)msgQ->msgList), msg, msgQ->mode);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6998      	ldr	r0, [r3, #24]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7f1b      	ldrb	r3, [r3, #28]
 80017c0:	461a      	mov	r2, r3
 80017c2:	6839      	ldr	r1, [r7, #0]
 80017c4:	f7ff fa3b 	bl	8000c3e <os_list_add>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]
	if(ret != OS_ERR_OK)
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <os_msgQ_push+0x3e>
		return ret;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	e00d      	b.n	80017f2 <os_msgQ_push+0x5a>

	/* Update block list
	 ------------------------------------------------------*/
	if(os_msgQ_updateAndCheck(msgQ) && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff feca 	bl	8001570 <os_msgQ_updateAndCheck>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <os_msgQ_push+0x58>
 80017e2:	f000 fed7 	bl	8002594 <os_scheduler_state_get>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <os_msgQ_push+0x58>
 80017ec:	f001 fa98 	bl	8002d20 <os_task_yeild>
	return OS_ERR_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <os_msgQ_delete>:
 * @param os_hMsgQ_t msgQ  	: [ in] Handle to the queue
 * @param void* msg      	: [ in] Reference to the message
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_msgQ_delete(os_hMsgQ_t msgQ){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(msgQ == NULL) return OS_ERR_BAD_ARG;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <os_msgQ_delete+0x12>
 800180a:	2301      	movs	r3, #1
 800180c:	e017      	b.n	800183e <os_msgQ_delete+0x42>
	if(msgQ->obj.type != OS_OBJ_MSGQ) return OS_ERR_BAD_ARG;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d001      	beq.n	800181a <os_msgQ_delete+0x1e>
 8001816:	2301      	movs	r3, #1
 8001818:	e011      	b.n	800183e <os_msgQ_delete+0x42>

	/* Deletes from obj list
	 ------------------------------------------------------*/
	os_list_remove(&os_obj_head, msgQ);
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	480a      	ldr	r0, [pc, #40]	; (8001848 <os_msgQ_delete+0x4c>)
 800181e:	f7ff fa7c 	bl	8000d1a <os_list_remove>

	/* Free block list
	 ------------------------------------------------------*/
	os_list_clear(msgQ->obj.blockList);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fb52 	bl	8000ed0 <os_list_clear>

	/* Free msg list
	 ------------------------------------------------------*/
	os_list_clear(msgQ->msgList);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fb4d 	bl	8000ed0 <os_list_clear>

	return os_heap_free(msgQ);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7fe ffec 	bl	8000814 <os_heap_free>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20014068 	.word	0x20014068

0800184c <os_msgQ_getNumberOfMsgs>:
 *
 * @param os_hMsgQ_t msgQ  	: [ in] Handle to the queue
 *
 * @return uint32_t : 0xFFFFFFFF if error. The number of messages in the queue if >=0
 **********************************************************************/
uint32_t os_msgQ_getNumberOfMsgs(os_hMsgQ_t msgQ){
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(msgQ == NULL) return 0xFFFFFFFF;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <os_msgQ_getNumberOfMsgs+0x14>
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e009      	b.n	8001874 <os_msgQ_getNumberOfMsgs+0x28>
	if(msgQ->obj.type != OS_OBJ_MSGQ) return 0xFFFFFFFF;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b05      	cmp	r3, #5
 8001866:	d002      	beq.n	800186e <os_msgQ_getNumberOfMsgs+0x22>
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	e002      	b.n	8001874 <os_msgQ_getNumberOfMsgs+0x28>

	/* return number of messages
	 ------------------------------------------------------*/
	return ((os_list_head_t*)msgQ->msgList)->listSize;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	699b      	ldr	r3, [r3, #24]
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <os_msgQ_wait>:
 * @param uint32_t timeout_ticks	: [ in] Wait timeout. OS_WAIT_FOREVER to wait forever. OS_WAIT_NONE to not block.
 * @param os_err_e* err				: [out] Error code or NULL to ignore
 *
 * @return int32_t : negative number if error. The number of messages in the queue if >=0
 **********************************************************************/
void* os_msgQ_wait(os_hMsgQ_t msgQ, uint32_t timeout_ticks, os_err_e* err){
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(msgQ == NULL || msgQ->obj.type != OS_OBJ_MSGQ) {
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <os_msgQ_wait+0x1a>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b05      	cmp	r3, #5
 8001898:	d007      	beq.n	80018aa <os_msgQ_wait+0x2a>
		if(err == NULL) *err = OS_ERR_BAD_ARG;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <os_msgQ_wait+0x26>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
		return NULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e102      	b.n	8001ab0 <os_msgQ_wait+0x230>
	}

	/* Enter critical to access possible shared resource
	 ---------------------------------------------------*/
	bool blocked = false;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 80018b0:	f3ef 8310 	mrs	r3, PRIMASK
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	b672      	cpsid	i
 80018b8:	f3bf 8f6f 	isb	sy

	/* Get xPSR register
	 ---------------------------------------------------*/
	register uint32_t volatile xPSR = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
	__asm volatile("mrs %[out], xpsr" : [out] "=r" (xPSR));
 80018c0:	f3ef 8303 	mrs	r3, PSR
 80018c4:	617b      	str	r3, [r7, #20]
	 ------------------------------------------------------*/
	while(1){

		/* Get number of messages
		 ------------------------------------------------------*/
		uint32_t msgs = os_msgQ_getNumberOfMsgs(msgQ);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ffbf 	bl	800184c <os_msgQ_getNumberOfMsgs>
 80018ce:	6238      	str	r0, [r7, #32]

		/* If there is a message
		 ------------------------------------------------------*/
		if(msgs > 0){
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d02f      	beq.n	8001936 <os_msgQ_wait+0xb6>

			/* Pop it
			 ---------------------------------------------------*/
			void* msg = os_list_pop(((os_list_head_t*)msgQ->msgList), OS_LIST_FIRST, err);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fa6e 	bl	8000dc0 <os_list_pop>
 80018e4:	61f8      	str	r0, [r7, #28]

			/* If task blocked, remove from block list
			 ---------------------------------------------------*/
			if(blocked) {
 80018e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <os_msgQ_wait+0x80>
				os_list_remove(msgQ->obj.blockList, (os_handle_t)os_cur_task->element);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	4b71      	ldr	r3, [pc, #452]	; (8001ab8 <os_msgQ_wait+0x238>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f7ff fa0d 	bl	8000d1a <os_list_remove>
			}

			/* Update block list
			 ---------------------------------------------------*/
			os_msgQ_updateAndCheck(msgQ);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fe34 	bl	8001570 <os_msgQ_updateAndCheck>

			/* Exit critical
			 ---------------------------------------------------*/
			OS_EXIT_CRITICAL();
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	f383 8810 	msr	PRIMASK, r3
 800190e:	f3bf 8f6f 	isb	sy

			/* call cb if needed
			 ---------------------------------------------------*/
			if(blocked)  os_task_on_ready_cb(os_cur_task->element);
 8001912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <os_msgQ_wait+0xa6>
 800191a:	4b67      	ldr	r3, [pc, #412]	; (8001ab8 <os_msgQ_wait+0x238>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe4f 	bl	80005c4 <os_task_on_ready_cb>

			/* Return address of the object
			 ---------------------------------------------------*/
			if(err != NULL) *err = OS_ERR_OK;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <os_msgQ_wait+0xb2>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
			return msg;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	e0bc      	b.n	8001ab0 <os_msgQ_wait+0x230>
		}

		/* If the timout set is 0, then just return
		 ---------------------------------------------------*/
		if(timeout_ticks <= OS_WAIT_NONE){
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d119      	bne.n	8001970 <os_msgQ_wait+0xf0>

			/* If task blocked, remove from list
			 ---------------------------------------------------*/
			if(blocked) {
 800193c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <os_msgQ_wait+0xd6>
				os_list_remove(msgQ->obj.blockList, (os_handle_t)os_cur_task->element);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <os_msgQ_wait+0x238>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f7ff f9e2 	bl	8000d1a <os_list_remove>
			}

			/* Return
			 ---------------------------------------------------*/
			OS_EXIT_CRITICAL();
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f383 8810 	msr	PRIMASK, r3
 800195c:	f3bf 8f6f 	isb	sy
			if(err != NULL) *err = OS_ERR_TIMEOUT;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <os_msgQ_wait+0xec>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2206      	movs	r2, #6
 800196a:	701a      	strb	r2, [r3, #0]
			return NULL;
 800196c:	2300      	movs	r3, #0
 800196e:	e09f      	b.n	8001ab0 <os_msgQ_wait+0x230>
		}

		/* Task cannot block of scheduler is not running
		 ---------------------------------------------------*/
		if(os_scheduler_state_get() != OS_SCHEDULER_START) {
 8001970:	f000 fe10 	bl	8002594 <os_scheduler_state_get>
 8001974:	4603      	mov	r3, r0
 8001976:	2b01      	cmp	r3, #1
 8001978:	d019      	beq.n	80019ae <os_msgQ_wait+0x12e>

			/* If task blocked, remove from block list
			 ---------------------------------------------------*/
			if(blocked) {
 800197a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <os_msgQ_wait+0x114>
				os_list_remove(msgQ->obj.blockList, (os_handle_t)os_cur_task->element);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <os_msgQ_wait+0x238>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4619      	mov	r1, r3
 800198e:	4610      	mov	r0, r2
 8001990:	f7ff f9c3 	bl	8000d1a <os_list_remove>
			}

			if(err != NULL) *err = OS_ERR_NOT_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <os_msgQ_wait+0x120>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2204      	movs	r2, #4
 800199e:	701a      	strb	r2, [r3, #0]
			OS_EXIT_CRITICAL();
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	f383 8810 	msr	PRIMASK, r3
 80019a6:	f3bf 8f6f 	isb	sy
			return NULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e080      	b.n	8001ab0 <os_msgQ_wait+0x230>
		}

		/* Check if we are in thread mode (cannot block in interupt mode)
		 ---------------------------------------------------*/
		if( (xPSR & 0x1F) != 0) {
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00c      	beq.n	80019d2 <os_msgQ_wait+0x152>
			if(err != NULL) *err = OS_ERR_FORBIDDEN;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <os_msgQ_wait+0x144>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2205      	movs	r2, #5
 80019c2:	701a      	strb	r2, [r3, #0]
			OS_EXIT_CRITICAL();
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f383 8810 	msr	PRIMASK, r3
 80019ca:	f3bf 8f6f 	isb	sy
			return NULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e06e      	b.n	8001ab0 <os_msgQ_wait+0x230>
		}

		/* Save information on task structure
		 ---------------------------------------------------*/
		((os_task_t*)os_cur_task->element)->state 			= OS_TASK_BLOCKED;
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <os_msgQ_wait+0x238>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2203      	movs	r2, #3
 80019da:	761a      	strb	r2, [r3, #24]
		((os_task_t*)os_cur_task->element)->wakeCoutdown 	= timeout_ticks;
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <os_msgQ_wait+0x238>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	61da      	str	r2, [r3, #28]
		((os_task_t*)os_cur_task->element)->objWaited 		= (os_handle_t*)&msgQ;
 80019e6:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <os_msgQ_wait+0x238>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f107 020c 	add.w	r2, r7, #12
 80019f0:	62da      	str	r2, [r3, #44]	; 0x2c
		((os_task_t*)os_cur_task->element)->sizeObjs		= 1;
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <os_msgQ_wait+0x238>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2201      	movs	r2, #1
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
		((os_task_t*)os_cur_task->element)->objWanted		= 0xFFFFFFFF;
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <os_msgQ_wait+0x238>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f04f 32ff 	mov.w	r2, #4294967295
 8001a06:	635a      	str	r2, [r3, #52]	; 0x34
		((os_task_t*)os_cur_task->element)->waitFlag		= OS_OBJ_WAIT_ONE;
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <os_msgQ_wait+0x238>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		/* If not yet blocked
		 ---------------------------------------------------*/
		if(!blocked){
 8001a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a18:	f083 0301 	eor.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d019      	beq.n	8001a56 <os_msgQ_wait+0x1d6>

			/* Add task to object's block list if not already
			 ---------------------------------------------------*/
			os_list_add(msgQ->obj.blockList, (os_handle_t)os_cur_task->element, OS_LIST_FIRST);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6958      	ldr	r0, [r3, #20]
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <os_msgQ_wait+0x238>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff f905 	bl	8000c3e <os_list_add>

			/* Call CB
			 ---------------------------------------------------*/
			OS_EXIT_CRITICAL();
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f383 8810 	msr	PRIMASK, r3
 8001a3a:	f3bf 8f6f 	isb	sy
			os_task_on_block_cb(os_cur_task->element);
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <os_msgQ_wait+0x238>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fdc7 	bl	80005d8 <os_task_on_block_cb>
			OS_ENTER_CRITICAL();
 8001a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	b672      	cpsid	i
 8001a52:	f3bf 8f6f 	isb	sy
		}

		blocked = true;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/* Yeild
		 ---------------------------------------------------*/
		OS_SET_PENDSV();
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <os_msgQ_wait+0x23c>)
 8001a5e:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8001a62:	4a16      	ldr	r2, [pc, #88]	; (8001abc <os_msgQ_wait+0x23c>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc

		/* Reenable interrupts
		 ---------------------------------------------------*/
		__enable_irq();
 8001a6c:	b662      	cpsie	i
		/* This line will be executed once the task is woken up by object freeing or timeout
		 * The object freeing means that the object was freed and this task was the chosen to wake up
		 * but there is no guarantee that the object will be available (as an interrupt can occur, or another higher priority
		 * task can get the object before this task has the chance to run. Because of this, we have to loop here
		 ---------------------------------------------------*/
		OS_ENTER_CRITICAL();
 8001a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	b672      	cpsid	i
 8001a76:	f3bf 8f6f 	isb	sy

		/* Update ticks
		 ---------------------------------------------------*/
		timeout_ticks 										= ((os_task_t*)os_cur_task->element)->wakeCoutdown;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <os_msgQ_wait+0x238>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	60bb      	str	r3, [r7, #8]
		((os_task_t*)os_cur_task->element)->objWaited 		= NULL;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <os_msgQ_wait+0x238>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c
		((os_task_t*)os_cur_task->element)->wakeCoutdown 	= 0;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <os_msgQ_wait+0x238>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
		((os_task_t*)os_cur_task->element)->sizeObjs		= 0;
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <os_msgQ_wait+0x238>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	631a      	str	r2, [r3, #48]	; 0x30
		((os_task_t*)os_cur_task->element)->objWanted		= 0xFFFFFFFF;
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <os_msgQ_wait+0x238>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
	while(1){
 8001aae:	e70a      	b.n	80018c6 <os_msgQ_wait+0x46>
	/* Return
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
	if(err != NULL) *err = OS_ERR_UNKNOWN;
	return NULL;
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2001405c 	.word	0x2001405c
 8001abc:	e000e008 	.word	0xe000e008

08001ac0 <os_mutex_getFreeCount>:
 * @param os_handle_t h : [in] object to verify the availability
 *
 * @return uint32_t : the amount of times the object can be taken
 *
 **********************************************************************/
static uint32_t os_mutex_getFreeCount(os_handle_t h){
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return 0;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <os_mutex_getFreeCount+0x12>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e00c      	b.n	8001aec <os_mutex_getFreeCount+0x2c>
	if(h->type != OS_OBJ_MUTEX) return 0;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d001      	beq.n	8001ade <os_mutex_getFreeCount+0x1e>
 8001ada:	2300      	movs	r3, #0
 8001adc:	e006      	b.n	8001aec <os_mutex_getFreeCount+0x2c>

	/* Returns the if the mutex free state
	 ------------------------------------------------------*/
	return ((os_mutex_t*)h)->state == OS_MUTEX_STATE_UNLOCKED ? 1 : 0;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7f1b      	ldrb	r3, [r3, #28]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <os_mutex_objTake>:
 *
 * @param os_handle_t h 			: [in] object to take
 * @param os_handle_t takingTask	: [in] handle to the task that is taking the object
 *
 **********************************************************************/
static void os_mutex_objTake(os_handle_t h, os_handle_t takingTask){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t	  = (os_task_t*)takingTask;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
	os_mutex_t* mutex = (os_mutex_t*)h;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60bb      	str	r3, [r7, #8]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01c      	beq.n	8001b4a <os_mutex_objTake+0x52>
	if(h->type != OS_OBJ_MUTEX) return;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d11a      	bne.n	8001b4e <os_mutex_objTake+0x56>
	if(mutex->state == OS_MUTEX_STATE_LOCKED) return;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	7f1b      	ldrb	r3, [r3, #28]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d018      	beq.n	8001b52 <os_mutex_objTake+0x5a>

	if(takingTask == NULL) return;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d017      	beq.n	8001b56 <os_mutex_objTake+0x5e>
	if(takingTask->type != OS_OBJ_TASK) return;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d115      	bne.n	8001b5a <os_mutex_objTake+0x62>

	/* Store owner task
	 ------------------------------------------------------*/
	mutex->owner = takingTask;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	619a      	str	r2, [r3, #24]

	/* flag as taken
	 ------------------------------------------------------*/
	mutex->state = OS_MUTEX_STATE_LOCKED;
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2201      	movs	r2, #1
 8001b38:	771a      	strb	r2, [r3, #28]

	/* Add mutex to the owned mutex list
	 ------------------------------------------------------*/
	os_list_add(t->ownedMutex, h, OS_LIST_FIRST);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3e:	2200      	movs	r2, #0
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f87b 	bl	8000c3e <os_list_add>
 8001b48:	e008      	b.n	8001b5c <os_mutex_objTake+0x64>
	if(h == NULL) return;
 8001b4a:	bf00      	nop
 8001b4c:	e006      	b.n	8001b5c <os_mutex_objTake+0x64>
	if(h->type != OS_OBJ_MUTEX) return;
 8001b4e:	bf00      	nop
 8001b50:	e004      	b.n	8001b5c <os_mutex_objTake+0x64>
	if(mutex->state == OS_MUTEX_STATE_LOCKED) return;
 8001b52:	bf00      	nop
 8001b54:	e002      	b.n	8001b5c <os_mutex_objTake+0x64>
	if(takingTask == NULL) return;
 8001b56:	bf00      	nop
 8001b58:	e000      	b.n	8001b5c <os_mutex_objTake+0x64>
	if(takingTask->type != OS_OBJ_TASK) return;
 8001b5a:	bf00      	nop
}
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <os_mutex_create>:
 * @param os_handle_t* h 		: [out] handle to semaphore
 * @param char* name			: [ in] Mutex's name. If a mutex with the same name already exists, its reference is returned. A null name always creates a nameless mutex.
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_mutex_create(os_handle_t* h, char const * name){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(h == NULL) 					return OS_ERR_BAD_ARG;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <os_mutex_create+0x14>
 8001b74:	2301      	movs	r3, #1
 8001b76:	e051      	b.n	8001c1c <os_mutex_create+0xb8>
	if(os_init_get() == false)		return OS_ERR_NOT_READY;
 8001b78:	f7fe fcb0 	bl	80004dc <os_init_get>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f083 0301 	eor.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <os_mutex_create+0x28>
 8001b88:	2304      	movs	r3, #4
 8001b8a:	e047      	b.n	8001c1c <os_mutex_create+0xb8>

	/* If mutex exists, return it
	 ------------------------------------------------------*/
	if(name != NULL){
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00e      	beq.n	8001bb0 <os_mutex_create+0x4c>
		os_list_cell_t* obj = os_handle_list_searchByName(&os_obj_head, OS_OBJ_MUTEX, name);
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	2102      	movs	r1, #2
 8001b96:	4823      	ldr	r0, [pc, #140]	; (8001c24 <os_mutex_create+0xc0>)
 8001b98:	f7ff f80f 	bl	8000bba <os_handle_list_searchByName>
 8001b9c:	6178      	str	r0, [r7, #20]
		if(obj != NULL){
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <os_mutex_create+0x4c>
			*h = obj->element;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	601a      	str	r2, [r3, #0]
			return OS_ERR_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e035      	b.n	8001c1c <os_mutex_create+0xb8>
		}
	}

	/* Alloc the mutex block
	 ------------------------------------------------------*/
	os_mutex_t* mutex = (os_mutex_t*)os_heap_alloc(sizeof(os_mutex_t));
 8001bb0:	2020      	movs	r0, #32
 8001bb2:	f7fe fdc9 	bl	8000748 <os_heap_alloc>
 8001bb6:	6138      	str	r0, [r7, #16]

	/* Check allocation
	 ------------------------------------------------------*/
	if(mutex == 0) return OS_ERR_INSUFFICIENT_HEAP;
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <os_mutex_create+0x5e>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e02c      	b.n	8001c1c <os_mutex_create+0xb8>

	/* Init mutex
	 ------------------------------------------------------*/
	mutex->obj.objUpdate		= 0;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	721a      	strb	r2, [r3, #8]
	mutex->obj.type				= OS_OBJ_MUTEX;
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	701a      	strb	r2, [r3, #0]
	mutex->obj.getFreeCount		= os_mutex_getFreeCount;
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4a15      	ldr	r2, [pc, #84]	; (8001c28 <os_mutex_create+0xc4>)
 8001bd2:	60da      	str	r2, [r3, #12]
	mutex->obj.obj_take			= os_mutex_objTake;
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <os_mutex_create+0xc8>)
 8001bd8:	611a      	str	r2, [r3, #16]
	mutex->obj.blockList		= os_list_init();
 8001bda:	f7fe ff9b 	bl	8000b14 <os_list_init>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	615a      	str	r2, [r3, #20]
	mutex->obj.name				= (char*)name;
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	605a      	str	r2, [r3, #4]

	mutex->state 				= OS_MUTEX_STATE_UNLOCKED;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2200      	movs	r2, #0
 8001bee:	771a      	strb	r2, [r3, #28]
	mutex->owner 				= NULL;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
	mutex->max_prio 			= -1;
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	22ff      	movs	r2, #255	; 0xff
 8001bfa:	775a      	strb	r2, [r3, #29]

	/* Add object to object list
	 ------------------------------------------------------*/
	os_err_e ret = os_list_add(&os_obj_head, (os_handle_t) mutex, OS_LIST_FIRST);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6939      	ldr	r1, [r7, #16]
 8001c00:	4808      	ldr	r0, [pc, #32]	; (8001c24 <os_mutex_create+0xc0>)
 8001c02:	f7ff f81c 	bl	8000c3e <os_list_add>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]
	if(ret != OS_ERR_OK) return ret;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <os_mutex_create+0xb0>
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	e003      	b.n	8001c1c <os_mutex_create+0xb8>

	/* Return
	 ------------------------------------------------------*/
	*h = (os_handle_t)mutex;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	601a      	str	r2, [r3, #0]
	return OS_ERR_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20014068 	.word	0x20014068
 8001c28:	08001ac1 	.word	0x08001ac1
 8001c2c:	08001af9 	.word	0x08001af9

08001c30 <os_mutex_delete>:
 *
 * @param os_handle_t h : [ in] Pointer to the mutex to delete
 *
 * @return os_err_e OS_ERR_OK if OK
 **********************************************************************/
os_err_e os_mutex_delete(os_handle_t h){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_ERR_BAD_ARG;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <os_mutex_delete+0x12>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e012      	b.n	8001c68 <os_mutex_delete+0x38>
	if(h->type != OS_OBJ_MUTEX) return OS_ERR_BAD_ARG;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d001      	beq.n	8001c4e <os_mutex_delete+0x1e>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00c      	b.n	8001c68 <os_mutex_delete+0x38>

	/* Deletes from obj list
	 ------------------------------------------------------*/
	os_list_remove(&os_obj_head, h);
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4807      	ldr	r0, [pc, #28]	; (8001c70 <os_mutex_delete+0x40>)
 8001c52:	f7ff f862 	bl	8000d1a <os_list_remove>

	/* Free memory
	 ------------------------------------------------------*/
	os_list_clear(h->blockList);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f938 	bl	8000ed0 <os_list_clear>

	return os_heap_free(h);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7fe fdd7 	bl	8000814 <os_heap_free>
 8001c66:	4603      	mov	r3, r0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20014068 	.word	0x20014068

08001c74 <os_obj_wait>:
 * @param uint32_t timeout_ticks : [ in] Amount of time before a timeout is detected. If OS_WAIT_FOREVER, the task blocks forever. If OS_WAIT_NONE, the task returns immediately
 * @parem os_err_e* err			 : [out] Error code. Ignored if NULL.
 *
 * @return os_handle_t : handle to the object taken or NULL if error (see error code for more info)
 **********************************************************************/
static os_handle_t os_obj_wait(os_handle_t objList[], size_t objNum, os_obj_wait_e waitFlag, uint32_t timeout_ticks, os_err_e* err){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b096      	sub	sp, #88	; 0x58
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71fb      	strb	r3, [r7, #7]

	/* Check for errors
	 ---------------------------------------------------*/
	bool error  = objList == NULL;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bf0c      	ite	eq
 8001c8a:	2301      	moveq	r3, #1
 8001c8c:	2300      	movne	r3, #0
 8001c8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		 error |= objNum == 0;
 8001c92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2201      	moveq	r2, #1
 8001c9e:	2200      	movne	r2, #0
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf14      	ite	ne
 8001ca8:	2301      	movne	r3, #1
 8001caa:	2300      	moveq	r3, #0
 8001cac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		 error |= objNum == 0xFFFFFFFF;
 8001cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001cba:	bf0c      	ite	eq
 8001cbc:	2201      	moveq	r2, #1
 8001cbe:	2200      	movne	r2, #0
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf14      	ite	ne
 8001cc8:	2301      	movne	r3, #1
 8001cca:	2300      	moveq	r3, #0
 8001ccc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	for(size_t i = 0; i < objNum; i++){
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8001cd4:	e030      	b.n	8001d38 <os_obj_wait+0xc4>
		error |= objList[i] == NULL;
 8001cd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001cda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	68f9      	ldr	r1, [r7, #12]
 8001ce0:	440a      	add	r2, r1
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	2a00      	cmp	r2, #0
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2201      	moveq	r2, #1
 8001cea:	2200      	movne	r2, #0
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf14      	ite	ne
 8001cf4:	2301      	movne	r3, #1
 8001cf6:	2300      	moveq	r3, #0
 8001cf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if(objList[i] != NULL){
 8001cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d013      	beq.n	8001d32 <os_obj_wait+0xbe>
			error |= objList[i]->type == OS_OBJ_MSGQ;
 8001d0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	68f9      	ldr	r1, [r7, #12]
 8001d14:	440a      	add	r2, r1
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	2a05      	cmp	r2, #5
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2201      	moveq	r2, #1
 8001d20:	2200      	movne	r2, #0
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	4313      	orrs	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	bf14      	ite	ne
 8001d2a:	2301      	movne	r3, #1
 8001d2c:	2300      	moveq	r3, #0
 8001d2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for(size_t i = 0; i < objNum; i++){
 8001d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d34:	3301      	adds	r3, #1
 8001d36:	653b      	str	r3, [r7, #80]	; 0x50
 8001d38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3ca      	bcc.n	8001cd6 <os_obj_wait+0x62>
		}
	}

	/* Return if error
	 ---------------------------------------------------*/
	if(error) {
 8001d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <os_obj_wait+0xe4>
		if(err != NULL) *err = OS_ERR_BAD_ARG;
 8001d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <os_obj_wait+0xe0>
 8001d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
		return NULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e299      	b.n	800228c <os_obj_wait+0x618>
	}

	/* Enter critical to access possible shared resource
	 ---------------------------------------------------*/
	bool blocked = false;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8001d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	b672      	cpsid	i
 8001d66:	f3bf 8f6f 	isb	sy

	/* Get xPSR register
	 ---------------------------------------------------*/
	register uint32_t volatile xPSR = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
	__asm volatile("mrs %[out], xpsr" : [out] "=r" (xPSR));
 8001d6e:	f3ef 8303 	mrs	r3, PSR
 8001d72:	613b      	str	r3, [r7, #16]
	 ---------------------------------------------------*/
	while(1){

		/* Declare auxiliary variables and iterate objects
		 ---------------------------------------------------*/
		size_t takingPos = 0xFFFFFFFF;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	64bb      	str	r3, [r7, #72]	; 0x48
		bool allObjFree = 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		for(size_t i = 0; i < objNum; i++){
 8001d80:	2300      	movs	r3, #0
 8001d82:	643b      	str	r3, [r7, #64]	; 0x40
 8001d84:	e034      	b.n	8001df0 <os_obj_wait+0x17c>

			/* Get free count
			 ---------------------------------------------------*/
			uint32_t freeCount = ( (objList[i]->getFreeCount != NULL) ? objList[i]->getFreeCount(objList[i]) : 1 );
 8001d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00e      	beq.n	8001db4 <os_obj_wait+0x140>
 8001d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	68f9      	ldr	r1, [r7, #12]
 8001da8:	440a      	add	r2, r1
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	4610      	mov	r0, r2
 8001dae:	4798      	blx	r3
 8001db0:	4603      	mov	r3, r0
 8001db2:	e000      	b.n	8001db6 <os_obj_wait+0x142>
 8001db4:	2301      	movs	r3, #1
 8001db6:	61bb      	str	r3, [r7, #24]

			/* Update flag to use if we should wait all
			 ---------------------------------------------------*/
			allObjFree &= freeCount > 0;
 8001db8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	bf14      	ite	ne
 8001dc2:	2201      	movne	r2, #1
 8001dc4:	2200      	moveq	r2, #0
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bf14      	ite	ne
 8001dce:	2301      	movne	r3, #1
 8001dd0:	2300      	moveq	r3, #0
 8001dd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			/* If we should check everyone, or the current object is not free, we continue
			 ---------------------------------------------------*/
			if(waitFlag != OS_OBJ_WAIT_ONE || freeCount == 0) continue;
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <os_obj_wait+0x16e>
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d103      	bne.n	8001dea <os_obj_wait+0x176>
		for(size_t i = 0; i < objNum; i++){
 8001de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001de4:	3301      	adds	r3, #1
 8001de6:	643b      	str	r3, [r7, #64]	; 0x40
 8001de8:	e002      	b.n	8001df0 <os_obj_wait+0x17c>

			/* Otherwise save the position and break
			 ---------------------------------------------------*/
			takingPos = i;
 8001dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dec:	64bb      	str	r3, [r7, #72]	; 0x48
			break;
 8001dee:	e003      	b.n	8001df8 <os_obj_wait+0x184>
		for(size_t i = 0; i < objNum; i++){
 8001df0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d3c6      	bcc.n	8001d86 <os_obj_wait+0x112>
		}

		/* All objects must be taken and everyone is free
		 ---------------------------------------------------*/
		if(waitFlag == OS_OBJ_WAIT_ALL && allObjFree == 1){
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	f040 808a 	bne.w	8001f14 <os_obj_wait+0x2a0>
 8001e00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 8085 	beq.w	8001f14 <os_obj_wait+0x2a0>

			/* Iterate to take every object
			 ---------------------------------------------------*/
			for(size_t i = 0; i < objNum; i++){
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e0e:	e04d      	b.n	8001eac <os_obj_wait+0x238>

				/* Check if we are in thread mode (cannot take a mutex in interupt mode)
				 ---------------------------------------------------*/
				if( (xPSR & 0x1F) != 0 && objList[i]->type == OS_OBJ_MUTEX) {
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d014      	beq.n	8001e44 <os_obj_wait+0x1d0>
 8001e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d10c      	bne.n	8001e44 <os_obj_wait+0x1d0>
					if(err != NULL) *err = OS_ERR_FORBIDDEN;
 8001e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <os_obj_wait+0x1c2>
 8001e30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e32:	2205      	movs	r2, #5
 8001e34:	701a      	strb	r2, [r3, #0]
					OS_EXIT_CRITICAL();
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f383 8810 	msr	PRIMASK, r3
 8001e3c:	f3bf 8f6f 	isb	sy
					return NULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	e223      	b.n	800228c <os_obj_wait+0x618>
				}

				/* Take object
				 ---------------------------------------------------*/
				if(objList[i]->obj_take != NULL) objList[i]->obj_take(objList[i], os_cur_task->element);
 8001e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00f      	beq.n	8001e74 <os_obj_wait+0x200>
 8001e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e62:	0092      	lsls	r2, r2, #2
 8001e64:	68f9      	ldr	r1, [r7, #12]
 8001e66:	440a      	add	r2, r1
 8001e68:	6810      	ldr	r0, [r2, #0]
 8001e6a:	4aa5      	ldr	r2, [pc, #660]	; (8002100 <os_obj_wait+0x48c>)
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	6892      	ldr	r2, [r2, #8]
 8001e70:	4611      	mov	r1, r2
 8001e72:	4798      	blx	r3

				/* Remove task from block list if needed
				 ---------------------------------------------------*/
				if(blocked) {
 8001e74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d014      	beq.n	8001ea6 <os_obj_wait+0x232>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 8001e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	4b9d      	ldr	r3, [pc, #628]	; (8002100 <os_obj_wait+0x48c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4610      	mov	r0, r2
 8001e92:	f7fe ff42 	bl	8000d1a <os_list_remove>
					os_obj_updatePrio(objList[i]);
 8001e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fdd3 	bl	8000a4c <os_obj_updatePrio>
			for(size_t i = 0; i < objNum; i++){
 8001ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d3ad      	bcc.n	8001e10 <os_obj_wait+0x19c>

			}

			/* Update prio from current task
			 ---------------------------------------------------*/
			os_obj_updatePrio(os_cur_task->element);
 8001eb4:	4b92      	ldr	r3, [pc, #584]	; (8002100 <os_obj_wait+0x48c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fdc6 	bl	8000a4c <os_obj_updatePrio>

			/* Update blocklist for every object
			 ---------------------------------------------------*/
			for(size_t i = 0; i < objNum; i++){
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ec4:	e00a      	b.n	8001edc <os_obj_wait+0x268>
				os_handle_list_updateAndCheck(objList[i]);
 8001ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4413      	add	r3, r2
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f9af 	bl	8001234 <os_handle_list_updateAndCheck>
			for(size_t i = 0; i < objNum; i++){
 8001ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed8:	3301      	adds	r3, #1
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8001edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d3f0      	bcc.n	8001ec6 <os_obj_wait+0x252>
			}

			/* Exit critical
			 ---------------------------------------------------*/
			OS_EXIT_CRITICAL();
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f383 8810 	msr	PRIMASK, r3
 8001eea:	f3bf 8f6f 	isb	sy

			/* call cb if needed
			 ---------------------------------------------------*/
			if(blocked)  os_task_on_ready_cb(os_cur_task->element);
 8001eee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <os_obj_wait+0x28e>
 8001ef6:	4b82      	ldr	r3, [pc, #520]	; (8002100 <os_obj_wait+0x48c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb61 	bl	80005c4 <os_task_on_ready_cb>

			if(err != NULL) *err = OS_ERR_OK;
 8001f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <os_obj_wait+0x29a>
 8001f08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
			return objList[0];
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	e1bb      	b.n	800228c <os_obj_wait+0x618>

		}

		/* One object must be taken and at least one is free
		 ---------------------------------------------------*/
		if(waitFlag == OS_OBJ_WAIT_ONE && takingPos != 0xFFFFFFFF){
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 8082 	bne.w	8002020 <os_obj_wait+0x3ac>
 8001f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f22:	d07d      	beq.n	8002020 <os_obj_wait+0x3ac>

			/* Check if we are in thread mode (cannot take a mutex in interupt mode)
			 ---------------------------------------------------*/
			if( (xPSR & 0x1F) != 0 && objList[takingPos]->type == OS_OBJ_MUTEX) {
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d014      	beq.n	8001f58 <os_obj_wait+0x2e4>
 8001f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4413      	add	r3, r2
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d10c      	bne.n	8001f58 <os_obj_wait+0x2e4>
				if(err != NULL) *err = OS_ERR_FORBIDDEN;
 8001f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <os_obj_wait+0x2d6>
 8001f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f46:	2205      	movs	r2, #5
 8001f48:	701a      	strb	r2, [r3, #0]
				OS_EXIT_CRITICAL();
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f383 8810 	msr	PRIMASK, r3
 8001f50:	f3bf 8f6f 	isb	sy
				return NULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e199      	b.n	800228c <os_obj_wait+0x618>
			}

			/* Take object
			 ---------------------------------------------------*/
			if(objList[takingPos]->obj_take != NULL) objList[takingPos]->obj_take(objList[takingPos], os_cur_task->element);
 8001f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00f      	beq.n	8001f88 <os_obj_wait+0x314>
 8001f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	68f9      	ldr	r1, [r7, #12]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	6810      	ldr	r0, [r2, #0]
 8001f7e:	4a60      	ldr	r2, [pc, #384]	; (8002100 <os_obj_wait+0x48c>)
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	6892      	ldr	r2, [r2, #8]
 8001f84:	4611      	mov	r1, r2
 8001f86:	4798      	blx	r3

			/* Update prio from current task
			 ---------------------------------------------------*/
			os_obj_updatePrio(os_cur_task->element);
 8001f88:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <os_obj_wait+0x48c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fd5c 	bl	8000a4c <os_obj_updatePrio>

			/* If task blocked, remove from everyone's list
			 ---------------------------------------------------*/
			if(blocked) {
 8001f94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01e      	beq.n	8001fda <os_obj_wait+0x366>
				for(size_t i = 0; i < objNum; i++){
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa0:	e017      	b.n	8001fd2 <os_obj_wait+0x35e>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 8001fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4413      	add	r3, r2
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	4b54      	ldr	r3, [pc, #336]	; (8002100 <os_obj_wait+0x48c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	f7fe feaf 	bl	8000d1a <os_list_remove>
					os_obj_updatePrio(objList[i]);
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fd40 	bl	8000a4c <os_obj_updatePrio>
				for(size_t i = 0; i < objNum; i++){
 8001fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fce:	3301      	adds	r3, #1
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d3e3      	bcc.n	8001fa2 <os_obj_wait+0x32e>
				}
			}

			/* Update blocklist
			 ---------------------------------------------------*/
			os_handle_list_updateAndCheck(objList[takingPos]);
 8001fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff f925 	bl	8001234 <os_handle_list_updateAndCheck>

			/* Exit critical
			 ---------------------------------------------------*/
			OS_EXIT_CRITICAL();
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f383 8810 	msr	PRIMASK, r3
 8001ff0:	f3bf 8f6f 	isb	sy

			/* call cb if needed
			 ---------------------------------------------------*/
			if(blocked)  os_task_on_ready_cb(os_cur_task->element);
 8001ff4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <os_obj_wait+0x394>
 8001ffc:	4b40      	ldr	r3, [pc, #256]	; (8002100 <os_obj_wait+0x48c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fade 	bl	80005c4 <os_task_on_ready_cb>

			/* Return address of the object
			 ---------------------------------------------------*/
			if(err != NULL) *err = OS_ERR_OK;
 8002008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <os_obj_wait+0x3a0>
 800200e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
			return objList[takingPos];
 8002014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	e135      	b.n	800228c <os_obj_wait+0x618>
		}

		/* If the timout set is 0, then just return
		 ---------------------------------------------------*/
		if(timeout_ticks <= OS_WAIT_NONE){
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d141      	bne.n	80020aa <os_obj_wait+0x436>

			/* If task blocked, remove from everyone's list
			 ---------------------------------------------------*/
			if(blocked) {
 8002026:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800202a:	2b00      	cmp	r3, #0
 800202c:	d030      	beq.n	8002090 <os_obj_wait+0x41c>
				for(size_t i = 0; i < objNum; i++){
 800202e:	2300      	movs	r3, #0
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
 8002032:	e017      	b.n	8002064 <os_obj_wait+0x3f0>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 8002034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <os_obj_wait+0x48c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	4619      	mov	r1, r3
 8002048:	4610      	mov	r0, r2
 800204a:	f7fe fe66 	bl	8000d1a <os_list_remove>
					os_obj_updatePrio(objList[i]);
 800204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fcf7 	bl	8000a4c <os_obj_updatePrio>
				for(size_t i = 0; i < objNum; i++){
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	3301      	adds	r3, #1
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
 8002064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	429a      	cmp	r2, r3
 800206a:	d3e3      	bcc.n	8002034 <os_obj_wait+0x3c0>
				}

				/* Update blocklist for every object
				 ---------------------------------------------------*/
				for(size_t i = 0; i < objNum; i++){
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002070:	e00a      	b.n	8002088 <os_obj_wait+0x414>
					os_handle_list_updateAndCheck(objList[i]);
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4413      	add	r3, r2
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff f8d9 	bl	8001234 <os_handle_list_updateAndCheck>
				for(size_t i = 0; i < objNum; i++){
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002084:	3301      	adds	r3, #1
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	429a      	cmp	r2, r3
 800208e:	d3f0      	bcc.n	8002072 <os_obj_wait+0x3fe>
				}
			}

			/* Return
			 ---------------------------------------------------*/
			OS_EXIT_CRITICAL();
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f383 8810 	msr	PRIMASK, r3
 8002096:	f3bf 8f6f 	isb	sy
			if(err != NULL) *err = OS_ERR_TIMEOUT;
 800209a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <os_obj_wait+0x432>
 80020a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020a2:	2206      	movs	r2, #6
 80020a4:	701a      	strb	r2, [r3, #0]
			return NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e0f0      	b.n	800228c <os_obj_wait+0x618>
		}

		/* Task cannot block of scheduler is not running
		 ---------------------------------------------------*/
		if(os_scheduler_state_get() != OS_SCHEDULER_START) {
 80020aa:	f000 fa73 	bl	8002594 <os_scheduler_state_get>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d043      	beq.n	800213c <os_obj_wait+0x4c8>

			/* If task blocked, remove from everyone's list
			 ---------------------------------------------------*/
			if(blocked) {
 80020b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d032      	beq.n	8002122 <os_obj_wait+0x4ae>
				for(size_t i = 0; i < objNum; i++){
 80020bc:	2300      	movs	r3, #0
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c0:	e017      	b.n	80020f2 <os_obj_wait+0x47e>
					os_list_remove(objList[i]->blockList, (os_handle_t)os_cur_task->element);
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4413      	add	r3, r2
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <os_obj_wait+0x48c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f7fe fe1f 	bl	8000d1a <os_list_remove>
					os_obj_updatePrio(objList[i]);
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fcb0 	bl	8000a4c <os_obj_updatePrio>
				for(size_t i = 0; i < objNum; i++){
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	3301      	adds	r3, #1
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3e3      	bcc.n	80020c2 <os_obj_wait+0x44e>
				}

				/* Update blocklist for every object
				 ---------------------------------------------------*/
				for(size_t i = 0; i < objNum; i++){
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	e00c      	b.n	800211a <os_obj_wait+0x4a6>
 8002100:	2001405c 	.word	0x2001405c
					os_handle_list_updateAndCheck(objList[i]);
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f890 	bl	8001234 <os_handle_list_updateAndCheck>
				for(size_t i = 0; i < objNum; i++){
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	3301      	adds	r3, #1
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	d3f0      	bcc.n	8002104 <os_obj_wait+0x490>
				}
			}

			if(err != NULL) *err = OS_ERR_NOT_READY;
 8002122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <os_obj_wait+0x4ba>
 8002128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800212a:	2204      	movs	r2, #4
 800212c:	701a      	strb	r2, [r3, #0]
			OS_EXIT_CRITICAL();
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f383 8810 	msr	PRIMASK, r3
 8002134:	f3bf 8f6f 	isb	sy
			return NULL;
 8002138:	2300      	movs	r3, #0
 800213a:	e0a7      	b.n	800228c <os_obj_wait+0x618>
		}

		/* Check if we are in thread mode (cannot block in interupt mode)
		 ---------------------------------------------------*/
		if( (xPSR & 0x1F) != 0) {
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00c      	beq.n	8002160 <os_obj_wait+0x4ec>
			if(err != NULL) *err = OS_ERR_FORBIDDEN;
 8002146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <os_obj_wait+0x4de>
 800214c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800214e:	2205      	movs	r2, #5
 8002150:	701a      	strb	r2, [r3, #0]
			OS_EXIT_CRITICAL();
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f383 8810 	msr	PRIMASK, r3
 8002158:	f3bf 8f6f 	isb	sy
			return NULL;
 800215c:	2300      	movs	r3, #0
 800215e:	e095      	b.n	800228c <os_obj_wait+0x618>
		}

		/* Save information on task structure
		 ---------------------------------------------------*/
		((os_task_t*)os_cur_task->element)->state 			= OS_TASK_BLOCKED;
 8002160:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <os_obj_wait+0x620>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2203      	movs	r2, #3
 8002168:	761a      	strb	r2, [r3, #24]
		((os_task_t*)os_cur_task->element)->wakeCoutdown 	= timeout_ticks;
 800216a:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <os_obj_wait+0x620>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	61da      	str	r2, [r3, #28]
		((os_task_t*)os_cur_task->element)->objWaited 		= objList;
 8002174:	4b47      	ldr	r3, [pc, #284]	; (8002294 <os_obj_wait+0x620>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
		((os_task_t*)os_cur_task->element)->sizeObjs			= objNum;
 800217e:	4b45      	ldr	r3, [pc, #276]	; (8002294 <os_obj_wait+0x620>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
		((os_task_t*)os_cur_task->element)->objWanted		= 0xFFFFFFFF;
 8002188:	4b42      	ldr	r3, [pc, #264]	; (8002294 <os_obj_wait+0x620>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f04f 32ff 	mov.w	r2, #4294967295
 8002192:	635a      	str	r2, [r3, #52]	; 0x34
		((os_task_t*)os_cur_task->element)->waitFlag			= waitFlag;
 8002194:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <os_obj_wait+0x620>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	79fa      	ldrb	r2, [r7, #7]
 800219c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		/* If not yet blocked
		 ---------------------------------------------------*/
		if(!blocked){
 80021a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021a4:	f083 0301 	eor.w	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d041      	beq.n	8002232 <os_obj_wait+0x5be>

			/* Add task to object's block list if not already
			 ---------------------------------------------------*/
			for(size_t i = 0; i < objNum; i++){
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
 80021b2:	e017      	b.n	80021e4 <os_obj_wait+0x570>
				os_list_add(objList[i]->blockList, (os_handle_t)os_cur_task->element, OS_LIST_FIRST);
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6958      	ldr	r0, [r3, #20]
 80021c0:	4b34      	ldr	r3, [pc, #208]	; (8002294 <os_obj_wait+0x620>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2200      	movs	r2, #0
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fd38 	bl	8000c3e <os_list_add>
				os_obj_updatePrio(objList[i]);
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4413      	add	r3, r2
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fc37 	bl	8000a4c <os_obj_updatePrio>
			for(size_t i = 0; i < objNum; i++){
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	3301      	adds	r3, #1
 80021e2:	623b      	str	r3, [r7, #32]
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d3e3      	bcc.n	80021b4 <os_obj_wait+0x540>
			}

			/* Update blocklist for every object
			 ---------------------------------------------------*/
			for(size_t i = 0; i < objNum; i++){
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	e00a      	b.n	8002208 <os_obj_wait+0x594>
				os_handle_list_updateAndCheck(objList[i]);
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4413      	add	r3, r2
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f819 	bl	8001234 <os_handle_list_updateAndCheck>
			for(size_t i = 0; i < objNum; i++){
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3301      	adds	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	429a      	cmp	r2, r3
 800220e:	d3f0      	bcc.n	80021f2 <os_obj_wait+0x57e>
			}

			/* Call CB
			 ---------------------------------------------------*/
			OS_EXIT_CRITICAL();
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f383 8810 	msr	PRIMASK, r3
 8002216:	f3bf 8f6f 	isb	sy
			os_task_on_block_cb(os_cur_task->element);
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <os_obj_wait+0x620>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f9d9 	bl	80005d8 <os_task_on_block_cb>
			OS_ENTER_CRITICAL();
 8002226:	f3ef 8310 	mrs	r3, PRIMASK
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	b672      	cpsid	i
 800222e:	f3bf 8f6f 	isb	sy
		}

		blocked = true;
 8002232:	2301      	movs	r3, #1
 8002234:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		/* Yeild
		 ---------------------------------------------------*/
		OS_SET_PENDSV();
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <os_obj_wait+0x624>)
 800223a:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 800223e:	4a16      	ldr	r2, [pc, #88]	; (8002298 <os_obj_wait+0x624>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002244:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc

		/* Reenable interrupts
		 ---------------------------------------------------*/
		__enable_irq();
 8002248:	b662      	cpsie	i
		/* This line will be executed once the task is woken up by object freeing or timeout
		 * The object freeing means that the object was freed and this task was the chosen to wake up
		 * but there is no guarantee that the object will be available (as an interrupt can occur, or another higher priority
		 * task can get the object before this task has the chance to run. Because of this, we have to loop here
		 ---------------------------------------------------*/
		OS_ENTER_CRITICAL();
 800224a:	f3ef 8310 	mrs	r3, PRIMASK
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	b672      	cpsid	i
 8002252:	f3bf 8f6f 	isb	sy

		/* Update ticks
		 ---------------------------------------------------*/
		timeout_ticks 									= ((os_task_t*)os_cur_task->element)->wakeCoutdown;
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <os_obj_wait+0x620>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	603b      	str	r3, [r7, #0]
		((os_task_t*)os_cur_task->element)->objWaited 	= NULL;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <os_obj_wait+0x620>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2200      	movs	r2, #0
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
		((os_task_t*)os_cur_task->element)->wakeCoutdown = 0;
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <os_obj_wait+0x620>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2200      	movs	r2, #0
 8002272:	61da      	str	r2, [r3, #28]
		((os_task_t*)os_cur_task->element)->sizeObjs		= 0;
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <os_obj_wait+0x620>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
		((os_task_t*)os_cur_task->element)->objWanted	= 0xFFFFFFFF;
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <os_obj_wait+0x620>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
	while(1){
 800228a:	e573      	b.n	8001d74 <os_obj_wait+0x100>
	/* Return
	 ---------------------------------------------------*/
	OS_EXIT_CRITICAL();
	if(err != NULL) *err = OS_ERR_UNKNOWN;
	return NULL;
}
 800228c:	4618      	mov	r0, r3
 800228e:	3758      	adds	r7, #88	; 0x58
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	2001405c 	.word	0x2001405c
 8002298:	e000e008 	.word	0xe000e008

0800229c <os_obj_single_wait>:
 * @param uint32_t timeout_ticks : [ in] Amount of time before a timeout is detected. If OS_WAIT_FOREVER, the task blocks forever. If OS_WAIT_NONE, the task returns imediately
 * @parem os_err_e* err			 : [out] Error code. Ignored if NULL.
 *
 * @return os_handle_t : handle to the object taken or NULL if error (see error code for more info)
 **********************************************************************/
os_handle_t os_obj_single_wait(os_handle_t obj, uint32_t timeout_ticks, os_err_e* err){
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]

	/* Form array and call wait function
	 ---------------------------------------------------*/
	os_handle_t objList[] = { obj };
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	617b      	str	r3, [r7, #20]
	return os_obj_wait(objList, 1, OS_OBJ_WAIT_ONE, timeout_ticks, err);
 80022ac:	f107 0014 	add.w	r0, r7, #20
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2200      	movs	r2, #0
 80022b8:	2101      	movs	r1, #1
 80022ba:	f7ff fcdb 	bl	8001c74 <os_obj_wait>
 80022be:	4603      	mov	r3, r0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <os_obj_multiple_WaitAll>:
 * @param size_t objNum			 : [ in] number of objects to wait
 * @param ....					 : [ in] all handles to wait separated by comma
 *
 * @return os_handle_t : handle to the object taken or NULL if error (see error code for more info)
 **********************************************************************/
os_handle_t os_obj_multiple_WaitAll(os_err_e* err, uint32_t timeout_ticks, size_t objNum, ...){
 80022c8:	b40c      	push	{r2, r3}
 80022ca:	b5b0      	push	{r4, r5, r7, lr}
 80022cc:	b08a      	sub	sp, #40	; 0x28
 80022ce:	af02      	add	r7, sp, #8
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
 80022d4:	466b      	mov	r3, sp
 80022d6:	461d      	mov	r5, r3

	/* Init var function
	 ---------------------------------------------------*/
	va_list args;
	os_handle_t objList[objNum];
 80022d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022da:	4603      	mov	r3, r0
 80022dc:	3b01      	subs	r3, #1
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	4601      	mov	r1, r0
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	f04f 0400 	mov.w	r4, #0
 80022ee:	0154      	lsls	r4, r2, #5
 80022f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022f4:	014b      	lsls	r3, r1, #5
 80022f6:	4601      	mov	r1, r0
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	f04f 0400 	mov.w	r4, #0
 8002304:	0154      	lsls	r4, r2, #5
 8002306:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800230a:	014b      	lsls	r3, r1, #5
 800230c:	0083      	lsls	r3, r0, #2
 800230e:	3303      	adds	r3, #3
 8002310:	3307      	adds	r3, #7
 8002312:	08db      	lsrs	r3, r3, #3
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	ebad 0d03 	sub.w	sp, sp, r3
 800231a:	ab02      	add	r3, sp, #8
 800231c:	3303      	adds	r3, #3
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	617b      	str	r3, [r7, #20]

	/* Form array
	 ---------------------------------------------------*/
	va_start(args, objNum);
 8002324:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002328:	60fb      	str	r3, [r7, #12]
	for(size_t i = 0; i < objNum; i++)	objList[i] = va_arg(args, os_handle_t);
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e00a      	b.n	8002346 <os_obj_multiple_WaitAll+0x7e>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1d1a      	adds	r2, r3, #4
 8002334:	60fa      	str	r2, [r7, #12]
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	3301      	adds	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	429a      	cmp	r2, r3
 800234c:	d3f0      	bcc.n	8002330 <os_obj_multiple_WaitAll+0x68>

	/* Call wait function
	 ---------------------------------------------------*/
	void* ret = os_obj_wait(objList, objNum, OS_OBJ_WAIT_ALL, timeout_ticks, err);
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2201      	movs	r2, #1
 8002358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800235a:	f7ff fc8b 	bl	8001c74 <os_obj_wait>
 800235e:	6138      	str	r0, [r7, #16]

	/* End var function and return
	 ---------------------------------------------------*/
	va_end(args);
	return ret;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	46ad      	mov	sp, r5
}
 8002364:	4618      	mov	r0, r3
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800236e:	b002      	add	sp, #8
 8002370:	4770      	bx	lr
	...

08002374 <os_round_robin>:
 *
 * @brief This function decides the task that will gain the cpu
 *
 * @return task_list_t : Reference to the chosen task
 **********************************************************************/
static os_list_cell_t* os_round_robin(){
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0

	/* Declare iterators
	 ------------------------------------------------------*/
	os_list_cell_t* it = os_head.head.next;
 800237a:	4b37      	ldr	r3, [pc, #220]	; (8002458 <os_round_robin+0xe4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	61fb      	str	r3, [r7, #28]
	os_list_cell_t* it_low = os_cur_task;
 8002380:	4b36      	ldr	r3, [pc, #216]	; (800245c <os_round_robin+0xe8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]

	/* Saves first higher priority available in the higher side (all tasks before the current one in list order)
	 ------------------------------------------------------*/
	int8_t highSidePrio = -1;
 8002386:	23ff      	movs	r3, #255	; 0xff
 8002388:	75fb      	strb	r3, [r7, #23]
	os_list_cell_t* highSide= NULL;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]

	/* Saves first higher priority available in the lower side (all tasks after and including the current one in list order)
	 ------------------------------------------------------*/
	int8_t lowSidePrio = -1;
 800238e:	23ff      	movs	r3, #255	; 0xff
 8002390:	73fb      	strb	r3, [r7, #15]
	os_list_cell_t* lowSide = NULL;
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]

	/* Search the high side of the list
	 ------------------------------------------------------*/
	while(it != os_cur_task){
 8002396:	e018      	b.n	80023ca <os_round_robin+0x56>

		/* Check only ready tasks
		 ------------------------------------------------------*/
		if(((os_task_t*)it->element)->state == OS_TASK_READY){
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	7e1b      	ldrb	r3, [r3, #24]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d110      	bne.n	80023c4 <os_round_robin+0x50>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio((os_handle_t)it->element);
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fccc 	bl	8002d44 <os_task_getPrio>
 80023ac:	4603      	mov	r3, r0
 80023ae:	71bb      	strb	r3, [r7, #6]

			/* If the task is ready and its priority is higher, save it
			 ------------------------------------------------------*/
			if(highSidePrio <= task_prio){
 80023b0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80023b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	dc03      	bgt.n	80023c4 <os_round_robin+0x50>
				highSidePrio = task_prio;
 80023bc:	79bb      	ldrb	r3, [r7, #6]
 80023be:	75fb      	strb	r3, [r7, #23]
				highSide = it;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	613b      	str	r3, [r7, #16]

		}

		/* Otherwise continue
		 ------------------------------------------------------*/
		it = it->next;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61fb      	str	r3, [r7, #28]
	while(it != os_cur_task){
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <os_round_robin+0xe8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1e1      	bne.n	8002398 <os_round_robin+0x24>
	}

	/* Search the low side of the list
	 ------------------------------------------------------*/
	while(it_low != NULL){
 80023d4:	e018      	b.n	8002408 <os_round_robin+0x94>

		/* Check only ready tasks
		 ------------------------------------------------------*/
		if(((os_task_t*)it_low->element)->state == OS_TASK_READY){
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	7e1b      	ldrb	r3, [r3, #24]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d110      	bne.n	8002402 <os_round_robin+0x8e>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio((os_handle_t)it_low->element);
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fcad 	bl	8002d44 <os_task_getPrio>
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]

			/* If the task is ready and its priority is higher, save it
			 ------------------------------------------------------*/
			if(lowSidePrio <= task_prio ){
 80023ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	dc03      	bgt.n	8002402 <os_round_robin+0x8e>
				lowSidePrio = task_prio;
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	73fb      	strb	r3, [r7, #15]
				lowSide = it_low;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	60bb      	str	r3, [r7, #8]
			}

		}

		it_low = it_low->next;
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	61bb      	str	r3, [r7, #24]
	while(it_low != NULL){
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1e3      	bne.n	80023d6 <os_round_robin+0x62>
	}

	/* If nothing was found, return NULL
	 ------------------------------------------------------*/
	if(lowSide == NULL && highSide == NULL) return NULL;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d104      	bne.n	800241e <os_round_robin+0xaa>
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <os_round_robin+0xaa>
 800241a:	2300      	movs	r3, #0
 800241c:	e018      	b.n	8002450 <os_round_robin+0xdc>

	/* If only the low side found something, return it
	 ------------------------------------------------------*/
	if(highSide == NULL && lowSide != NULL) return lowSide;
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <os_round_robin+0xba>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <os_round_robin+0xba>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	e010      	b.n	8002450 <os_round_robin+0xdc>

	/* If only the high side found something, return it
	 ------------------------------------------------------*/
	if(lowSide == NULL && highSide != NULL) return highSide;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d104      	bne.n	800243e <os_round_robin+0xca>
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <os_round_robin+0xca>
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	e008      	b.n	8002450 <os_round_robin+0xdc>

	/* If both found something, return the task with higher priority.
	 * If both are equal, chose the lower side to peform the round robin for the same priority task
	 ------------------------------------------------------*/
	return ( (lowSidePrio > highSidePrio) ? lowSide : highSide);
 800243e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002442:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002446:	429a      	cmp	r2, r3
 8002448:	dd01      	ble.n	800244e <os_round_robin+0xda>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	e000      	b.n	8002450 <os_round_robin+0xdc>
 800244e:	693b      	ldr	r3, [r7, #16]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20014088 	.word	0x20014088
 800245c:	2001405c 	.word	0x2001405c

08002460 <os_scheduler>:
 * OS Scheduler
 *
 * @brief This function performs the stack management of the context change (must be called in PENDSV interrupt)
 *
 **********************************************************************/
__used static void os_scheduler(){
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0

	/* Test if scheduler is ON
	 ------------------------------------------------------*/
	if(state != OS_SCHEDULER_START) return;
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <os_scheduler+0x8c>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d139      	bne.n	80024e2 <os_scheduler+0x82>

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	__disable_irq();
 800246e:	b672      	cpsid	i

	/* Save current task stack into task memory block
	 ------------------------------------------------------*/
	register uint32_t volatile psp = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	603b      	str	r3, [r7, #0]
	__asm volatile ("mrs %[out], psp" : [out] "=r" (psp));
 8002474:	f3ef 8309 	mrs	r3, PSP
 8002478:	603b      	str	r3, [r7, #0]

	if(os_cur_task != NULL) ((os_task_t*)os_cur_task->element)->pStack = (uint32_t*)psp;
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <os_scheduler+0x90>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d004      	beq.n	800248c <os_scheduler+0x2c>
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <os_scheduler+0x90>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	621a      	str	r2, [r3, #32]

	/* Save last task
	 ------------------------------------------------------*/
	os_list_cell_t* last_task = os_cur_task;
 800248c:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <os_scheduler+0x90>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	607b      	str	r3, [r7, #4]
	 ------------------------------------------------------*/
	do {

		/* Decide next task
		 ------------------------------------------------------*/
		os_cur_task = os_round_robin();
 8002492:	f7ff ff6f 	bl	8002374 <os_round_robin>
 8002496:	4602      	mov	r2, r0
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <os_scheduler+0x90>)
 800249a:	601a      	str	r2, [r3, #0]

		/* Call CB if needed
		 ------------------------------------------------------*/
		if(os_cur_task == NULL) {
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <os_scheduler+0x90>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d103      	bne.n	80024ac <os_scheduler+0x4c>
			__enable_irq();
 80024a4:	b662      	cpsie	i
			os_no_task_ready_cb();
 80024a6:	f7fe f8a6 	bl	80005f6 <os_no_task_ready_cb>
			__disable_irq();
 80024aa:	b672      	cpsid	i
		}

	}while(os_cur_task == NULL);
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <os_scheduler+0x90>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ee      	beq.n	8002492 <os_scheduler+0x32>

	/* Write task stack location into current stack
	 ------------------------------------------------------*/
	psp = (uint32_t) ((os_task_t*)os_cur_task->element)->pStack;
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <os_scheduler+0x90>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	603b      	str	r3, [r7, #0]
	__asm volatile ("msr psp, %[in]" : : [in] "r" (psp));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f383 8809 	msr	PSP, r3

	/* If last task is deleting state, remove it
	 ------------------------------------------------------*/
	if(last_task != NULL && ((os_task_t*)last_task->element)->state == OS_TASK_DELETING) os_task_delete((os_handle_t)last_task->element);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <os_scheduler+0x7e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	7e1b      	ldrb	r3, [r3, #24]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d104      	bne.n	80024de <os_scheduler+0x7e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fb67 	bl	8002bac <os_task_delete>

	/* Enable IRQ
	 ------------------------------------------------------*/
	__enable_irq();
 80024de:	b662      	cpsie	i
 80024e0:	e000      	b.n	80024e4 <os_scheduler+0x84>
	if(state != OS_SCHEDULER_START) return;
 80024e2:	bf00      	nop

}
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20014058 	.word	0x20014058
 80024f0:	2001405c 	.word	0x2001405c

080024f4 <PendSV_Handler>:
__naked void PendSV_Handler(void)
{

	/* Get PSP
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 80024f4:	f3ef 8009 	mrs	r0, PSP

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Save FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 80024f8:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 80024fc:	bf08      	it	eq
	__asm volatile("vstmdbeq r0!, {s16-s31}");		//then, push s16 to s31 (FPU context) into stack (psp)
 80024fe:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

	/* Save current context
	 ------------------------------------------------------*/
	__asm volatile ("stmdb r0!, {r4-r11, lr}");		//Push R4-R11 and LR to stack (PSP)
 8002502:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm volatile ("msr psp, r0");					//PSP = R0
 8002506:	f380 8809 	msr	PSP, r0

	/* Call scheduler
	 ------------------------------------------------------*/
	__asm volatile ("push {lr}");
 800250a:	b500      	push	{lr}
	__asm volatile ("bl os_scheduler");
 800250c:	f7ff ffa8 	bl	8002460 <os_scheduler>
	__asm volatile ("pop {lr}");
 8002510:	f85d eb04 	ldr.w	lr, [sp], #4

	/* Recover context
	 ------------------------------------------------------*/
	__asm volatile ("mrs r0, psp");					//R0 = PSP
 8002514:	f3ef 8009 	mrs	r0, PSP
	__asm volatile ("ldmia r0!, {r4-r11, lr}");		//Recover R4-R11 and LR from stack (PSP)
 8002518:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if defined(OS_FPU_EN) && OS_FPU_EN == 1
	/* Recover FPU context
	 ------------------------------------------------------*/
	__asm volatile("tst lr, #0x10");				//If LR & 1 << 4 == 0
 800251c:	f01e 0f10 	tst.w	lr, #16
	__asm volatile("it eq");						//If previous instruction was 0,
 8002520:	bf08      	it	eq
	__asm volatile("vldmiaeq r0!, {s16-s31}");		//then, pop s16 to s31 (FPU context) from stack (psp)
 8002522:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

	__asm volatile ("msr psp, r0");					//PSP = R0
 8002526:	f380 8809 	msr	PSP, r0

	/* Return
	 ------------------------------------------------------*/
	__asm volatile ("bx lr");
 800252a:	4770      	bx	lr

}
 800252c:	bf00      	nop
	...

08002530 <os_scheduler_start>:
 * @brief Starts the scheduler and yields the current task if there is a higher priority one waiting
 *
 * @return os_err_e : OS_ERR_OK if OK
 *
 **********************************************************************/
os_err_e os_scheduler_start(){
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0

	/* Check if OS was initialized
	 ------------------------------------------------------*/
	if(os_init_get() != 1) return OS_ERR_NOT_READY;
 8002536:	f7fd ffd1 	bl	80004dc <os_init_get>
 800253a:	4603      	mov	r3, r0
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <os_scheduler_start+0x1a>
 8002546:	2304      	movs	r3, #4
 8002548:	e01b      	b.n	8002582 <os_scheduler_start+0x52>

	/* Enter critical to avoid interupts during assignment
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 800254a:	f3ef 8310 	mrs	r3, PRIMASK
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	b672      	cpsid	i
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <os_scheduler_start+0x5c>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	f000 f932 	bl	80027c4 <os_task_must_yeild>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <os_scheduler_start+0x46>
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <os_scheduler_start+0x60>)
 8002568:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <os_scheduler_start+0x60>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002572:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f383 8810 	msr	PRIMASK, r3
 800257c:	f3bf 8f6f 	isb	sy
		 ------------------------------------------------------*/
		if(os_task_must_yeild()) OS_SET_PENDSV();

	);

	return OS_ERR_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20014058 	.word	0x20014058
 8002590:	e000e008 	.word	0xe000e008

08002594 <os_scheduler_state_get>:
 * @brief Returns the state of the scheduler
 *
 * @return os_scheduler_state_e : stop or start
 *
 **********************************************************************/
os_scheduler_state_e os_scheduler_state_get(){
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
	return state;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <os_scheduler_state_get+0x14>)
 800259a:	781b      	ldrb	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20014058 	.word	0x20014058

080025ac <os_task_init_stack>:
 * @param uint32_t interruptStackSize : [in] size of the interrupt stack
 *
 * @return os_err_e : error code (0 = OK)
 *
 **********************************************************************/
static os_err_e os_task_init_stack(uint32_t interruptStackSize){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

	/* Check errors
	 ------------------------------------------------------*/
	if(interruptStackSize < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80025ba:	d201      	bcs.n	80025c0 <os_task_init_stack+0x14>
 80025bc:	2301      	movs	r3, #1
 80025be:	e021      	b.n	8002604 <os_task_init_stack+0x58>

	/* Allocate the stack
	 ------------------------------------------------------*/
	uint32_t stk = (uint32_t) os_heap_alloc(interruptStackSize);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7fe f8c1 	bl	8000748 <os_heap_alloc>
 80025c6:	4603      	mov	r3, r0
 80025c8:	60fb      	str	r3, [r7, #12]

	/* Check if allocation was OK
	 ------------------------------------------------------*/
	if(stk == 0) return OS_ERR_INSUFFICIENT_HEAP;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <os_task_init_stack+0x28>
 80025d0:	2303      	movs	r3, #3
 80025d2:	e017      	b.n	8002604 <os_task_init_stack+0x58>

	/* Save context and make PSP = MSP
	 ------------------------------------------------------*/
	__asm volatile ("push {r6, lr}"); 		//Save R6 and LR
 80025d4:	b540      	push	{r6, lr}
	__asm volatile ("mrs r6, msp"); 		//R6 = MSP
 80025d6:	f3ef 8608 	mrs	r6, MSP
	__asm volatile ("msr psp, r6"); 		//PSP = R6
 80025da:	f386 8809 	msr	PSP, r6

	/* Position MSP to interrput stack
	 ------------------------------------------------------*/
	uint32_t volatile mspReg = (uint32_t) ( (stk + interruptStackSize) & (~0x7UL) ); //logic and to guarantee that we are word aligned
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	f023 0307 	bic.w	r3, r3, #7
 80025e8:	60bb      	str	r3, [r7, #8]
	__asm volatile ("mov r6, %[in]" : : [in] "r" (mspReg)); //R6 = mspReg
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	461e      	mov	r6, r3
	__asm volatile ("msr msp, r6"); //MSP = R6
 80025ee:	f386 8808 	msr	MSP, r6

	/* Select PSP as current stack pointer
	 ------------------------------------------------------*/
	__asm volatile ("mrs r6, control");		//R6 = CTRL
 80025f2:	f3ef 8614 	mrs	r6, CONTROL
	__asm volatile ("orr r6, r6, #0x2");	//R6 |= 0x2
 80025f6:	f046 0602 	orr.w	r6, r6, #2
	__asm volatile ("msr control, r6");		//CTRL = R6
 80025fa:	f386 8814 	msr	CONTROL, r6

	/* Recover stack
	 ------------------------------------------------------*/
	__asm volatile ("pop {r6, lr}");
 80025fe:	e8bd 4040 	ldmia.w	sp!, {r6, lr}

	return OS_ERR_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <os_task_getFreeCount>:
 * @param os_handle_t h : [in] object to verify the availability
 *
 * @return uint32_t : the amount of times the object can be taken
 *
 **********************************************************************/
static uint32_t os_task_getFreeCount(os_handle_t h){
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return 0;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <os_task_getFreeCount+0x12>
 800261a:	2300      	movs	r3, #0
 800261c:	e031      	b.n	8002682 <os_task_getFreeCount+0x76>
	if(h->type != OS_OBJ_TASK) return 0;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d001      	beq.n	800262a <os_task_getFreeCount+0x1e>
 8002626:	2300      	movs	r3, #0
 8002628:	e02b      	b.n	8002682 <os_task_getFreeCount+0x76>

	/* Check if task ended
	 ------------------------------------------------------*/
	os_task_state_e state = os_task_getState(h);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fbd2 	bl	8002dd4 <os_task_getState>
 8002630:	4603      	mov	r3, r0
 8002632:	73fb      	strb	r3, [r7, #15]

	/* Determines if task ended
	 ------------------------------------------------------*/
	bool task_ended  = (state == OS_TASK_NOT_EXIST);
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf0c      	ite	eq
 800263a:	2301      	moveq	r3, #1
 800263c:	2300      	movne	r3, #0
 800263e:	73bb      	strb	r3, [r7, #14]
		 task_ended |= (state == OS_TASK_ENDED);
 8002640:	7bbb      	ldrb	r3, [r7, #14]
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	2a01      	cmp	r2, #1
 8002646:	bf0c      	ite	eq
 8002648:	2201      	moveq	r2, #1
 800264a:	2200      	movne	r2, #0
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	4313      	orrs	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	73bb      	strb	r3, [r7, #14]
		 task_ended |= (state == OS_TASK_DELETING);
 800265a:	7bbb      	ldrb	r3, [r7, #14]
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	2a04      	cmp	r2, #4
 8002660:	bf0c      	ite	eq
 8002662:	2201      	moveq	r2, #1
 8002664:	2200      	movne	r2, #0
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	4313      	orrs	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf14      	ite	ne
 800266e:	2301      	movne	r3, #1
 8002670:	2300      	moveq	r3, #0
 8002672:	73bb      	strb	r3, [r7, #14]

	return task_ended ? OS_OBJ_COUNT_INF : 0;
 8002674:	7bbb      	ldrb	r3, [r7, #14]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <os_task_getFreeCount+0x74>
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e000      	b.n	8002682 <os_task_getFreeCount+0x76>
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <os_task_objTake>:
 * @param os_handle_t takingTask	: [in] handle to the task that is taking the object
 *
 * @return os_err_e : error code (0 = OK)
 *
 **********************************************************************/
static void os_task_objTake(os_handle_t h, os_handle_t takingTask){
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
	UNUSED_ARG(h);
	UNUSED_ARG(takingTask);
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <os_task_init>:
 * @param uint32_t idle_stack_size 		: [in] size of the idle stack
 *
 * @return os_err_e : Error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_init(char* main_name, int8_t main_task_priority, uint32_t interrput_stack_size, uint32_t idle_stack_size){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	460b      	mov	r3, r1
 80026ae:	72fb      	strb	r3, [r7, #11]

	/* Check errors
	 ------------------------------------------------------*/
	if(main_task_priority < 0) return OS_ERR_BAD_ARG;
 80026b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	da01      	bge.n	80026bc <os_task_init+0x1c>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e073      	b.n	80027a4 <os_task_init+0x104>
	if(interrput_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80026c2:	d201      	bcs.n	80026c8 <os_task_init+0x28>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e06d      	b.n	80027a4 <os_task_init+0x104>
	if(idle_stack_size < OS_MINIMUM_STACK_SIZE) return OS_ERR_BAD_ARG;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80026ce:	d201      	bcs.n	80026d4 <os_task_init+0x34>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e067      	b.n	80027a4 <os_task_init+0x104>

	/* Init stack by changing the register used (MSP to PSP) and allocate interrupt stack
	 ------------------------------------------------------*/
	os_err_e ret = os_task_init_stack(interrput_stack_size);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff69 	bl	80025ac <os_task_init_stack>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <os_task_init+0x48>
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	e05d      	b.n	80027a4 <os_task_init+0x104>

	/* Allocate task block
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 80026e8:	2048      	movs	r0, #72	; 0x48
 80026ea:	f7fe f82d 	bl	8000748 <os_heap_alloc>
 80026ee:	6138      	str	r0, [r7, #16]

	/* Check allocation
	 ------------------------------------------------------*/
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <os_task_init+0x5a>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e054      	b.n	80027a4 <os_task_init+0x104>

	/* Init main task
	 ------------------------------------------------------*/
	t->obj.objUpdate		= 0;
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2200      	movs	r2, #0
 80026fe:	721a      	strb	r2, [r3, #8]
	t->obj.type				= OS_OBJ_TASK;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
	t->obj.getFreeCount		= &os_task_getFreeCount;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4a28      	ldr	r2, [pc, #160]	; (80027ac <os_task_init+0x10c>)
 800270a:	60da      	str	r2, [r3, #12]
	t->obj.blockList		= os_list_init();
 800270c:	f7fe fa02 	bl	8000b14 <os_list_init>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	615a      	str	r2, [r3, #20]
	t->obj.obj_take			= &os_task_objTake;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <os_task_init+0x110>)
 800271a:	611a      	str	r2, [r3, #16]
	t->obj.name 			= main_name;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	605a      	str	r2, [r3, #4]

	t->basePriority 		= main_task_priority;
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	7afa      	ldrb	r2, [r7, #11]
 8002726:	765a      	strb	r2, [r3, #25]
	t->priority		    	= main_task_priority;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	7afa      	ldrb	r2, [r7, #11]
 800272c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	t->state	 			= OS_TASK_READY;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2202      	movs	r2, #2
 8002734:	761a      	strb	r2, [r3, #24]
	t->pStack   			= NULL;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
	t->wakeCoutdown  		= 0;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
	t->stackBase	    	= 0;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2200      	movs	r2, #0
 8002746:	629a      	str	r2, [r3, #40]	; 0x28
	t->objWaited			= NULL;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2200      	movs	r2, #0
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
	t->sizeObjs 			= 0;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2200      	movs	r2, #0
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
	t->retVal				= NULL;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2200      	movs	r2, #0
 8002758:	641a      	str	r2, [r3, #64]	; 0x40

	t->ownedMutex			= os_list_init();
 800275a:	f7fe f9db 	bl	8000b14 <os_list_init>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Init head list and Add main task
	 ------------------------------------------------------*/
	ret = os_list_add(&os_head, (os_handle_t) t, OS_LIST_FIRST);
 8002764:	2200      	movs	r2, #0
 8002766:	6939      	ldr	r1, [r7, #16]
 8002768:	4812      	ldr	r0, [pc, #72]	; (80027b4 <os_task_init+0x114>)
 800276a:	f7fe fa68 	bl	8000c3e <os_list_add>
 800276e:	4603      	mov	r3, r0
 8002770:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <os_task_init+0xdc>
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	e013      	b.n	80027a4 <os_task_init+0x104>

	/* Add object to object list
	 ------------------------------------------------------*/
	ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 800277c:	2200      	movs	r2, #0
 800277e:	6939      	ldr	r1, [r7, #16]
 8002780:	480d      	ldr	r0, [pc, #52]	; (80027b8 <os_task_init+0x118>)
 8002782:	f7fe fa5c 	bl	8000c3e <os_list_add>
 8002786:	4603      	mov	r3, r0
 8002788:	75fb      	strb	r3, [r7, #23]
	if(ret != OS_ERR_OK) return ret;
 800278a:	7dfb      	ldrb	r3, [r7, #23]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <os_task_init+0xf4>
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	e007      	b.n	80027a4 <os_task_init+0x104>

	/* Point to current task
	 ------------------------------------------------------*/
	os_cur_task = os_head.head.next;
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <os_task_init+0x114>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a08      	ldr	r2, [pc, #32]	; (80027bc <os_task_init+0x11c>)
 800279a:	6013      	str	r3, [r2, #0]

	/* Link handle with task
	 ------------------------------------------------------*/
	main_task = (os_handle_t) t;
 800279c:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <os_task_init+0x120>)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	6013      	str	r3, [r2, #0]

	/* Init idle task
	 ------------------------------------------------------*/
	return ret;
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	0800260d 	.word	0x0800260d
 80027b0:	0800268b 	.word	0x0800268b
 80027b4:	20014088 	.word	0x20014088
 80027b8:	20014068 	.word	0x20014068
 80027bc:	2001405c 	.word	0x2001405c
 80027c0:	200140a4 	.word	0x200140a4

080027c4 <os_task_must_yeild>:
 * @brief This function checks the priority of all tasks and decides if the current task should yield
 *
 * @return bool : 1 = yeild
 *
 **********************************************************************/
bool os_task_must_yeild(){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0

	/* Enter critical
	 ------------------------------------------------------*/
	OS_CRITICAL_SECTION(
 80027ca:	f3ef 8310 	mrs	r3, PRIMASK
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	b672      	cpsid	i
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <os_task_must_yeild+0x80>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <os_task_must_yeild+0x84>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <os_task_must_yeild+0x30>
 80027e4:	4b18      	ldr	r3, [pc, #96]	; (8002848 <os_task_must_yeild+0x84>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 faaa 	bl	8002d44 <os_task_getPrio>
 80027f0:	4603      	mov	r3, r0
 80027f2:	e001      	b.n	80027f8 <os_task_must_yeild+0x34>
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	72fb      	strb	r3, [r7, #11]
 80027fa:	e016      	b.n	800282a <os_task_must_yeild+0x66>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fa9f 	bl	8002d44 <os_task_getPrio>
 8002806:	4603      	mov	r3, r0
 8002808:	72bb      	strb	r3, [r7, #10]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	7e1b      	ldrb	r3, [r3, #24]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d107      	bne.n	8002824 <os_task_must_yeild+0x60>
 8002814:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8002818:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800281c:	429a      	cmp	r2, r3
 800281e:	da01      	bge.n	8002824 <os_task_must_yeild+0x60>
 8002820:	2301      	movs	r3, #1
 8002822:	e00b      	b.n	800283c <os_task_must_yeild+0x78>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e5      	bne.n	80027fc <os_task_must_yeild+0x38>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f383 8810 	msr	PRIMASK, r3
 8002836:	f3bf 8f6f 	isb	sy
			 ------------------------------------------------------*/
			it = it->next;
		}
	);

	return false;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20014088 	.word	0x20014088
 8002848:	2001405c 	.word	0x2001405c

0800284c <os_task_create>:
 * @param void* arg				: [ in] Argument to be passed to the task
 *
 * @return os_err_e : An error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_create(os_handle_t* h, char const * name, void* (*fn)(void* i), int8_t priority, uint32_t stack_size, void* arg){
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	70fb      	strb	r3, [r7, #3]

	/* Check for argument errors
	 ------------------------------------------------------*/
	if(h == NULL) 							return OS_ERR_BAD_ARG;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <os_task_create+0x18>
 8002860:	2301      	movs	r3, #1
 8002862:	e166      	b.n	8002b32 <os_task_create+0x2e6>
	if(fn == NULL) 							return OS_ERR_BAD_ARG;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <os_task_create+0x22>
 800286a:	2301      	movs	r3, #1
 800286c:	e161      	b.n	8002b32 <os_task_create+0x2e6>
	if(priority < 0) 						return OS_ERR_BAD_ARG;
 800286e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002872:	2b00      	cmp	r3, #0
 8002874:	da01      	bge.n	800287a <os_task_create+0x2e>
 8002876:	2301      	movs	r3, #1
 8002878:	e15b      	b.n	8002b32 <os_task_create+0x2e6>
	if(stack_size < OS_MINIMUM_STACK_SIZE)  return OS_ERR_BAD_ARG;
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002880:	d201      	bcs.n	8002886 <os_task_create+0x3a>
 8002882:	2301      	movs	r3, #1
 8002884:	e155      	b.n	8002b32 <os_task_create+0x2e6>
	if(os_init_get() == false)				return OS_ERR_NOT_READY;
 8002886:	f7fd fe29 	bl	80004dc <os_init_get>
 800288a:	4603      	mov	r3, r0
 800288c:	f083 0301 	eor.w	r3, r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <os_task_create+0x4e>
 8002896:	2304      	movs	r3, #4
 8002898:	e14b      	b.n	8002b32 <os_task_create+0x2e6>

	/* If task exists, return it
	 ------------------------------------------------------*/
	if(name != NULL){
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <os_task_create+0x72>
		os_list_cell_t* obj = os_handle_list_searchByName(&os_obj_head, OS_OBJ_TASK, name);
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	2101      	movs	r1, #1
 80028a4:	4890      	ldr	r0, [pc, #576]	; (8002ae8 <os_task_create+0x29c>)
 80028a6:	f7fe f988 	bl	8000bba <os_handle_list_searchByName>
 80028aa:	61f8      	str	r0, [r7, #28]
		if(obj != NULL){
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <os_task_create+0x72>
			*h = obj->element;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	601a      	str	r2, [r3, #0]
			return OS_ERR_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e139      	b.n	8002b32 <os_task_create+0x2e6>
		}
	}

	/* Alloc the task block
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*)os_heap_alloc(sizeof(os_task_t));
 80028be:	2048      	movs	r0, #72	; 0x48
 80028c0:	f7fd ff42 	bl	8000748 <os_heap_alloc>
 80028c4:	61b8      	str	r0, [r7, #24]

	/* Check allocation
	 ------------------------------------------------------*/
	if(t == 0) return OS_ERR_INSUFFICIENT_HEAP;
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <os_task_create+0x84>
 80028cc:	2303      	movs	r3, #3
 80028ce:	e130      	b.n	8002b32 <os_task_create+0x2e6>

	/* Alloc the stack
	 ------------------------------------------------------*/
	uint32_t stk = (uint32_t) os_heap_alloc(stack_size);
 80028d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d2:	f7fd ff39 	bl	8000748 <os_heap_alloc>
 80028d6:	4603      	mov	r3, r0
 80028d8:	617b      	str	r3, [r7, #20]

	/* Check if allocation was OK
	 ------------------------------------------------------*/
	if(stk == 0) return OS_ERR_INSUFFICIENT_HEAP;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <os_task_create+0x98>
 80028e0:	2303      	movs	r3, #3
 80028e2:	e126      	b.n	8002b32 <os_task_create+0x2e6>

	/* Init Task
	 ------------------------------------------------------*/
	t->obj.objUpdate	= 0;
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2200      	movs	r2, #0
 80028e8:	721a      	strb	r2, [r3, #8]
	t->obj.type			= OS_OBJ_TASK;
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
	t->obj.getFreeCount	= &os_task_getFreeCount;
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	4a7e      	ldr	r2, [pc, #504]	; (8002aec <os_task_create+0x2a0>)
 80028f4:	60da      	str	r2, [r3, #12]
	t->obj.blockList	= os_list_init();
 80028f6:	f7fe f90d 	bl	8000b14 <os_list_init>
 80028fa:	4602      	mov	r2, r0
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	615a      	str	r2, [r3, #20]
	t->obj.obj_take		= &os_task_objTake;
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4a7b      	ldr	r2, [pc, #492]	; (8002af0 <os_task_create+0x2a4>)
 8002904:	611a      	str	r2, [r3, #16]
	t->obj.name			= (char*) name;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	605a      	str	r2, [r3, #4]

	t->basePriority		= priority;
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	765a      	strb	r2, [r3, #25]
	t->priority		    = priority;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	t->state			= OS_TASK_READY;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2202      	movs	r2, #2
 800291e:	761a      	strb	r2, [r3, #24]
	t->wakeCoutdown	 	= 0;
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2200      	movs	r2, #0
 8002924:	61da      	str	r2, [r3, #28]
	t->stackBase		= (stk + stack_size);
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292a:	441a      	add	r2, r3
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
	t->stackSize 		= stack_size;
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002934:	625a      	str	r2, [r3, #36]	; 0x24
	t->pStack			= (uint32_t*) ( t->stackBase & (~0x7UL) );
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	f023 0307 	bic.w	r3, r3, #7
 800293e:	461a      	mov	r2, r3
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	621a      	str	r2, [r3, #32]
	t->objWaited		= NULL;
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2200      	movs	r2, #0
 8002948:	62da      	str	r2, [r3, #44]	; 0x2c
	t->sizeObjs 		= 0;
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
	t->retVal			= NULL;
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2200      	movs	r2, #0
 8002954:	641a      	str	r2, [r3, #64]	; 0x40

	t->ownedMutex		= os_list_init();
 8002956:	f7fe f8dd 	bl	8000b14 <os_list_init>
 800295a:	4602      	mov	r2, r0
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Init Task Stack
	 ------------------------------------------------------*/
	*--t->pStack = (uint32_t) 0x01000000;	 	//xPSR (bit 24 must be 1 otherwise BOOM)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	1f1a      	subs	r2, r3, #4
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	621a      	str	r2, [r3, #32]
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002972:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) fn;				//Return
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	1f1a      	subs	r2, r3, #4
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	621a      	str	r2, [r3, #32]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) &os_task_return;  //LR
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	1f1a      	subs	r2, r3, #4
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	621a      	str	r2, [r3, #32]
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <os_task_create+0x2a8>)
 8002996:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R12
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	1f1a      	subs	r2, r3, #4
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	621a      	str	r2, [r3, #32]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R3
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	1f1a      	subs	r2, r3, #4
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	621a      	str	r2, [r3, #32]
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R2
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	1f1a      	subs	r2, r3, #4
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	621a      	str	r2, [r3, #32]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R1
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	1f1a      	subs	r2, r3, #4
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	621a      	str	r2, [r3, #32]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) arg;			 	//R0 (argument)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	1f1a      	subs	r2, r3, #4
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	621a      	str	r2, [r3, #32]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f0:	601a      	str	r2, [r3, #0]

	*--t->pStack = (uint32_t) 0xFFFFFFFD;    	//LR (when called by the interrupt, flag as basic frame used always)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	1f1a      	subs	r2, r3, #4
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	621a      	str	r2, [r3, #32]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f06f 0202 	mvn.w	r2, #2
 8002a04:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R11
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	1f1a      	subs	r2, r3, #4
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	621a      	str	r2, [r3, #32]
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R10
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	1f1a      	subs	r2, r3, #4
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	621a      	str	r2, [r3, #32]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0; 			 	//R9
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	1f1a      	subs	r2, r3, #4
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	621a      	str	r2, [r3, #32]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;			 	//R8
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	1f1a      	subs	r2, r3, #4
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	621a      	str	r2, [r3, #32]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R7
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	1f1a      	subs	r2, r3, #4
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	621a      	str	r2, [r3, #32]
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R6
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	1f1a      	subs	r2, r3, #4
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	621a      	str	r2, [r3, #32]
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R5
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	1f1a      	subs	r2, r3, #4
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	621a      	str	r2, [r3, #32]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
	*--t->pStack = (uint32_t) 0;				//R4
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	1f1a      	subs	r2, r3, #4
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	621a      	str	r2, [r3, #32]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]

	/* Add task to list
	 ------------------------------------------------------*/
	os_err_e err = os_list_add(&os_head, (os_handle_t)t, OS_LIST_FIRST);
 8002a96:	2200      	movs	r2, #0
 8002a98:	69b9      	ldr	r1, [r7, #24]
 8002a9a:	4817      	ldr	r0, [pc, #92]	; (8002af8 <os_task_create+0x2ac>)
 8002a9c:	f7fe f8cf 	bl	8000c3e <os_list_add>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	74fb      	strb	r3, [r7, #19]
	if(err != OS_ERR_OK) return err;
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <os_task_create+0x262>
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	e041      	b.n	8002b32 <os_task_create+0x2e6>

	/* Add object to object list
	 ------------------------------------------------------*/
	os_err_e ret = os_list_add(&os_obj_head, (os_handle_t) t, OS_LIST_FIRST);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	69b9      	ldr	r1, [r7, #24]
 8002ab2:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <os_task_create+0x29c>)
 8002ab4:	f7fe f8c3 	bl	8000c3e <os_list_add>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	74bb      	strb	r3, [r7, #18]
	if(ret != OS_ERR_OK) return ret;
 8002abc:	7cbb      	ldrb	r3, [r7, #18]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <os_task_create+0x27a>
 8002ac2:	7cbb      	ldrb	r3, [r7, #18]
 8002ac4:	e035      	b.n	8002b32 <os_task_create+0x2e6>

	/* Calculate task priority
	 ------------------------------------------------------*/
	int8_t task_prio = os_task_getPrio((os_handle_t) t);
 8002ac6:	69b8      	ldr	r0, [r7, #24]
 8002ac8:	f000 f93c 	bl	8002d44 <os_task_getPrio>
 8002acc:	4603      	mov	r3, r0
 8002ace:	747b      	strb	r3, [r7, #17]
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <os_task_create+0x2b0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d013      	beq.n	8002b00 <os_task_create+0x2b4>
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <os_task_create+0x2b0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f930 	bl	8002d44 <os_task_getPrio>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	e00d      	b.n	8002b04 <os_task_create+0x2b8>
 8002ae8:	20014068 	.word	0x20014068
 8002aec:	0800260d 	.word	0x0800260d
 8002af0:	0800268b 	.word	0x0800268b
 8002af4:	08002b55 	.word	0x08002b55
 8002af8:	20014088 	.word	0x20014088
 8002afc:	2001405c 	.word	0x2001405c
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
 8002b04:	743b      	strb	r3, [r7, #16]

	/* If created task was a higher priority, and scheduler is running, yeild
	 ---------------------------------------------------*/
	if(task_prio > cur_prio && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 8002b06:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8002b0a:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	dd06      	ble.n	8002b20 <os_task_create+0x2d4>
 8002b12:	f7ff fd3f 	bl	8002594 <os_scheduler_state_get>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <os_task_create+0x2d4>
 8002b1c:	f000 f900 	bl	8002d20 <os_task_yeild>

	/* link handle with task object
	 ---------------------------------------------------*/
	*h = ( (err == OS_ERR_OK) ? (os_handle_t) t : NULL );
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <os_task_create+0x2de>
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	e000      	b.n	8002b2c <os_task_create+0x2e0>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	6013      	str	r3, [r2, #0]

	return err;
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop

08002b3c <os_task_end>:
 *
 * @brief This function ends the current running task. Use this to safely end a task if you do not care about its return
 * The task block is freed from the heap, and all tasks waiting for it to finish will be set to ready
 *
 **********************************************************************/
void os_task_end(){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	os_task_delete((os_handle_t) os_cur_task->element);
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <os_task_end+0x14>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f830 	bl	8002bac <os_task_delete>
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	2001405c 	.word	0x2001405c

08002b54 <os_task_return>:
 * @param void* retVal : [in] return value
 *
 * @return os_err_e : should never return. If it does, a problem occurred
 *
 **********************************************************************/
os_err_e os_task_return(void* retVal){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

	/* Check scheduler
	 ------------------------------------------------------*/
	if(os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 8002b5c:	f7ff fd1a 	bl	8002594 <os_scheduler_state_get>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d001      	beq.n	8002b6a <os_task_return+0x16>
 8002b66:	2304      	movs	r3, #4
 8002b68:	e019      	b.n	8002b9e <os_task_return+0x4a>

	/* Enter critical section
	------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	b672      	cpsid	i
 8002b72:	f3bf 8f6f 	isb	sy

	/* Store return value and tag as ended
	 ------------------------------------------------------*/
	((os_task_t*)os_cur_task->element)->state = OS_TASK_ENDED;
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <os_task_return+0x54>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	761a      	strb	r2, [r3, #24]
	((os_task_t*)os_cur_task->element)->retVal = retVal;
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <os_task_return+0x54>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40

	/* Update blocked list to inform handles that task has finished
	 ------------------------------------------------------*/
	os_handle_list_updateAndCheck(os_cur_task->element);
 8002b8a:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <os_task_return+0x54>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fb4f 	bl	8001234 <os_handle_list_updateAndCheck>
	 ------------------------------------------------------*/
	while(1){

		/* Yeild task
		 ------------------------------------------------------*/
		os_task_yeild();
 8002b96:	f000 f8c3 	bl	8002d20 <os_task_yeild>

		/* Enable IRQ no matter what
		 ------------------------------------------------------*/
		__enable_irq();
 8002b9a:	b662      	cpsie	i
		os_task_yeild();
 8002b9c:	e7fb      	b.n	8002b96 <os_task_return+0x42>
	OS_EXIT_CRITICAL();

	/* Another Failsafe
	 ------------------------------------------------------*/
	return OS_ERR_UNKNOWN;
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	2001405c 	.word	0x2001405c

08002bac <os_task_delete>:
 * @param os_handle_t h : [in] handle containing the task to kill
 *
 * @return os_err_e : An error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_delete(os_handle_t h){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) h;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	613b      	str	r3, [r7, #16]

	/* Search to see if task exists
	 ------------------------------------------------------*/
	os_list_cell_t* list = os_list_search(&os_head, h);
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4856      	ldr	r0, [pc, #344]	; (8002d14 <os_task_delete+0x168>)
 8002bbc:	f7fd ffcd 	bl	8000b5a <os_list_search>
 8002bc0:	60f8      	str	r0, [r7, #12]

	/* Check for errors
	 ------------------------------------------------------*/
	if(t == NULL) return OS_ERR_BAD_ARG;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <os_task_delete+0x20>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e09e      	b.n	8002d0a <os_task_delete+0x15e>
	if(list == NULL) return OS_ERR_INVALID;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <os_task_delete+0x2a>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e099      	b.n	8002d0a <os_task_delete+0x15e>
	if(h->type != OS_OBJ_TASK) return OS_ERR_BAD_ARG;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d001      	beq.n	8002be2 <os_task_delete+0x36>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e093      	b.n	8002d0a <os_task_delete+0x15e>

	/* Check scheduler, we cannot kill the current task if scheduler is not ready
	 ------------------------------------------------------*/
	if(h == os_cur_task->element && os_scheduler_state_get() != OS_SCHEDULER_START) return OS_ERR_NOT_READY;
 8002be2:	4b4d      	ldr	r3, [pc, #308]	; (8002d18 <os_task_delete+0x16c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d106      	bne.n	8002bfc <os_task_delete+0x50>
 8002bee:	f7ff fcd1 	bl	8002594 <os_scheduler_state_get>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d001      	beq.n	8002bfc <os_task_delete+0x50>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	e086      	b.n	8002d0a <os_task_delete+0x15e>

	/* Enter critical section
	------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	b672      	cpsid	i
 8002c04:	f3bf 8f6f 	isb	sy

	/* Tag as ended
	 ------------------------------------------------------*/
	t->state = OS_TASK_ENDED;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	761a      	strb	r2, [r3, #24]

	/* Update blocked list to inform handles that task has finished
	 ------------------------------------------------------*/
	os_handle_list_updateAndCheck(h);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fb10 	bl	8001234 <os_handle_list_updateAndCheck>

	/* Check and store if we are killing the current task
	 ------------------------------------------------------*/
	if(h == os_cur_task->element){
 8002c14:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <os_task_delete+0x16c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d106      	bne.n	8002c2e <os_task_delete+0x82>

		/* Tag task to delete
		 ------------------------------------------------------*/
		t->state = OS_TASK_DELETING;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2204      	movs	r2, #4
 8002c24:	761a      	strb	r2, [r3, #24]
		 ------------------------------------------------------*/
		while(1){

			/* Yeild task
			 ------------------------------------------------------*/
			os_task_yeild();
 8002c26:	f000 f87b 	bl	8002d20 <os_task_yeild>

			/* Enable IRQ no matter what
			 ------------------------------------------------------*/
			__enable_irq();
 8002c2a:	b662      	cpsie	i
			os_task_yeild();
 8002c2c:	e7fb      	b.n	8002c26 <os_task_delete+0x7a>
		return OS_ERR_UNKNOWN;
	}

	/* Remove task from object block list if needed
	 ------------------------------------------------------*/
	if( t->objWaited != NULL) {
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d031      	beq.n	8002c9a <os_task_delete+0xee>

		for(uint32_t i = 0; i < t->sizeObjs; i++){
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	e029      	b.n	8002c90 <os_task_delete+0xe4>

			/* Failsafe
			 ------------------------------------------------------*/
			if(t->objWaited[i] == NULL) continue;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01d      	beq.n	8002c88 <os_task_delete+0xdc>

			/* Remove from block list
			 ------------------------------------------------------*/
			os_list_remove(t->objWaited[i]->blockList, h);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe f85c 	bl	8000d1a <os_list_remove>

			/* Update object's priority
			 ------------------------------------------------------*/
			os_obj_updatePrio(t->objWaited[i]);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd feec 	bl	8000a4c <os_obj_updatePrio>

			/* Update block list
			 ------------------------------------------------------*/
			os_handle_list_updateAndCheck(t->objWaited[i]);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe fad7 	bl	8001234 <os_handle_list_updateAndCheck>
 8002c86:	e000      	b.n	8002c8a <os_task_delete+0xde>
			if(t->objWaited[i] == NULL) continue;
 8002c88:	bf00      	nop
		for(uint32_t i = 0; i < t->sizeObjs; i++){
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d3d0      	bcc.n	8002c3c <os_task_delete+0x90>

	}

	/* Deletes from obj list
	 ------------------------------------------------------*/
	os_list_remove(&os_obj_head, h);
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	481f      	ldr	r0, [pc, #124]	; (8002d1c <os_task_delete+0x170>)
 8002c9e:	f7fe f83c 	bl	8000d1a <os_list_remove>

	/* Remove task from list
	 ------------------------------------------------------*/
	os_list_remove(&os_head, h);
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	481b      	ldr	r0, [pc, #108]	; (8002d14 <os_task_delete+0x168>)
 8002ca6:	f7fe f838 	bl	8000d1a <os_list_remove>

	/* Clear blocked list
	 ------------------------------------------------------*/
	os_list_clear(h->blockList);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe f90e 	bl	8000ed0 <os_list_clear>

	/* Clear owned mutex list
	 ------------------------------------------------------*/
	os_list_clear(t->ownedMutex);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe f909 	bl	8000ed0 <os_list_clear>

	/* Free the stack memory
	 ------------------------------------------------------*/
	os_heap_free( (void*) (t->stackBase - t->stackSize) );
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fda3 	bl	8000814 <os_heap_free>

	/* Reset values just in case
	 ------------------------------------------------------*/
	t->state = OS_TASK_ENDED;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	761a      	strb	r2, [r3, #24]
	t->objWaited = NULL;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c
	t->sizeObjs = 0;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
	t->pStack = 0;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	621a      	str	r2, [r3, #32]
	t->stackBase = 0;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
	t->stackSize = 0;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24
	t->wakeCoutdown = 0;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	61da      	str	r2, [r3, #28]

	/* Delete task
	 ------------------------------------------------------*/
	os_heap_free(h);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7fd fd8b 	bl	8000814 <os_heap_free>

	/* Return
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f383 8810 	msr	PRIMASK, r3
 8002d04:	f3bf 8f6f 	isb	sy
	return OS_ERR_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20014088 	.word	0x20014088
 8002d18:	2001405c 	.word	0x2001405c
 8002d1c:	20014068 	.word	0x20014068

08002d20 <os_task_yeild>:
 * OS Task Yeild
 *
 * @brief This function calls the scheduler in order to let other tasks to run
 *
 **********************************************************************/
void os_task_yeild(){
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0

	/* Set Pend SV
	 ------------------------------------------------------*/
	OS_SET_PENDSV();
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <os_task_yeild+0x20>)
 8002d26:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8002d2a:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <os_task_yeild+0x20>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	f8c2 3cfc 	str.w	r3, [r2, #3324]	; 0xcfc
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000e008 	.word	0xe000e008

08002d44 <os_task_getPrio>:
 * @param task_t* t : [in] handle to task
 *
 * @return int8_t : The effective priority or -1 if argument error
 *
 **********************************************************************/
int8_t os_task_getPrio(os_handle_t h){
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* t = (os_task_t*) h;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

	/* Check for errors
	 ------------------------------------------------------	*/
	if(t == NULL) return -1;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d102      	bne.n	8002d5c <os_task_getPrio+0x18>
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5a:	e009      	b.n	8002d70 <os_task_getPrio+0x2c>
	if(h->type != OS_OBJ_TASK) return -1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d002      	beq.n	8002d6a <os_task_getPrio+0x26>
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
 8002d68:	e002      	b.n	8002d70 <os_task_getPrio+0x2c>

	return t->priority;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <os_task_sleep>:
 * @param uint32_t sleep_ticks : [in] amount of ticks to sleep
 *
 * @return os_err_e : error code (0 = OK)
 *
 **********************************************************************/
os_err_e os_task_sleep(uint32_t sleep_ticks){
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

	/* Get xPSR register
	 ---------------------------------------------------*/
	register uint32_t volatile xPSR = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
	__asm volatile("mrs %[out], xpsr" : [out] "=r" (xPSR));
 8002d88:	f3ef 8303 	mrs	r3, PSR
 8002d8c:	60fb      	str	r3, [r7, #12]

	/* Check scheduler stop
	 ------------------------------------------------------*/
	if(os_scheduler_state_get() == OS_SCHEDULER_STOP) return OS_ERR_NOT_READY;
 8002d8e:	f7ff fc01 	bl	8002594 <os_scheduler_state_get>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <os_task_sleep+0x20>
 8002d98:	2304      	movs	r3, #4
 8002d9a:	e015      	b.n	8002dc8 <os_task_sleep+0x4c>

	/* Check if we are in thread mode (cannot sleep in interupt mode)
	 ---------------------------------------------------*/
	if( (xPSR & 0x1F) != 0) return OS_ERR_FORBIDDEN;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <os_task_sleep+0x2e>
 8002da6:	2305      	movs	r3, #5
 8002da8:	e00e      	b.n	8002dc8 <os_task_sleep+0x4c>

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	__disable_irq();
 8002daa:	b672      	cpsid	i

	/* Put task to blocked and change countdown
	 ------------------------------------------------------*/
	((os_task_t*)os_cur_task->element)->wakeCoutdown = sleep_ticks;
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <os_task_sleep+0x54>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	61da      	str	r2, [r3, #28]
	((os_task_t*)os_cur_task->element)->state = OS_TASK_BLOCKED;
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <os_task_sleep+0x54>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	761a      	strb	r2, [r3, #24]

	/* Prepare scheduler to run
	 ------------------------------------------------------*/
	os_task_yeild();
 8002dc0:	f7ff ffae 	bl	8002d20 <os_task_yeild>

	/* Enable IRQ no matter what
	 ------------------------------------------------------*/
	__enable_irq();
 8002dc4:	b662      	cpsie	i

	return OS_ERR_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	2001405c 	.word	0x2001405c

08002dd4 <os_task_getState>:
 * @param os_handle_t h : [in] task to get the state
 *
 * @return os_task_state_e: The state of the task (Not exist = it was never created or got deleted ; Blocked if it is blocked ; Ready if it is ready ; Ended if it ended)
 *
 **********************************************************************/
os_task_state_e os_task_getState(os_handle_t h){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

	/* Convert address
	 ------------------------------------------------------*/
	os_task_t* task = (os_task_t*) h;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	60fb      	str	r3, [r7, #12]

	/* Check arguments
	 ------------------------------------------------------*/
	if(h == NULL) return OS_TASK_NOT_EXIST;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <os_task_getState+0x16>
 8002de6:	2300      	movs	r3, #0
 8002de8:	e023      	b.n	8002e32 <os_task_getState+0x5e>
	if(h->type != OS_OBJ_TASK) return OS_TASK_NOT_EXIST;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <os_task_getState+0x22>
 8002df2:	2300      	movs	r3, #0
 8002df4:	e01d      	b.n	8002e32 <os_task_getState+0x5e>
	if(os_list_search(&os_head, h) == NULL) return OS_TASK_NOT_EXIST;
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4810      	ldr	r0, [pc, #64]	; (8002e3c <os_task_getState+0x68>)
 8002dfa:	f7fd feae 	bl	8000b5a <os_list_search>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <os_task_getState+0x34>
 8002e04:	2300      	movs	r3, #0
 8002e06:	e014      	b.n	8002e32 <os_task_getState+0x5e>
	if(task->state == OS_TASK_DELETING) return OS_TASK_NOT_EXIST;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	7e1b      	ldrb	r3, [r3, #24]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d101      	bne.n	8002e14 <os_task_getState+0x40>
 8002e10:	2300      	movs	r3, #0
 8002e12:	e00e      	b.n	8002e32 <os_task_getState+0x5e>

	/* Check if task is ended
	 ------------------------------------------------------*/
	os_task_state_e state = task->state;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	7e1b      	ldrb	r3, [r3, #24]
 8002e18:	72fb      	strb	r3, [r7, #11]

	/* Force blocked if task is waiting for an object
	 * This scenario can happen if the object is free, but the task did not have the chance to take it yet
	 ------------------------------------------------------*/
	state = state == OS_TASK_READY && task->objWaited != NULL ? OS_TASK_BLOCKED : state;
 8002e1a:	7afb      	ldrb	r3, [r7, #11]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d103      	bne.n	8002e28 <os_task_getState+0x54>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <os_task_getState+0x58>
 8002e28:	7afb      	ldrb	r3, [r7, #11]
 8002e2a:	e000      	b.n	8002e2e <os_task_getState+0x5a>
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	72fb      	strb	r3, [r7, #11]

	return state;
 8002e30:	7afb      	ldrb	r3, [r7, #11]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20014088 	.word	0x20014088

08002e40 <os_tick>:
 * @brief This function is called periodically to tick tasks' counters and call the scheduler when necessary
 *
 * @param uint32_t increment : [in] amount of ms to increment
 *
 **********************************************************************/
void os_tick(uint32_t ms_inc){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

	/* Enter Critical -> If the list is changed during the process, this can corrupt our references
	 ------------------------------------------------------*/
	OS_DECLARE_IRQ_STATE;
	OS_ENTER_CRITICAL();
 8002e48:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	b672      	cpsid	i
 8002e50:	f3bf 8f6f 	isb	sy

	/* Increment ticks
	 ------------------------------------------------------*/
	os_ticks_ms += ms_inc;
 8002e54:	4b3a      	ldr	r3, [pc, #232]	; (8002f40 <os_tick+0x100>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a38      	ldr	r2, [pc, #224]	; (8002f40 <os_tick+0x100>)
 8002e5e:	6013      	str	r3, [r2, #0]

	/* Create iterators
	 ------------------------------------------------------*/
	uint8_t pend_req = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	75fb      	strb	r3, [r7, #23]
	os_list_cell_t* it = os_head.head.next;
 8002e64:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <os_tick+0x104>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	613b      	str	r3, [r7, #16]
	int8_t cur_prio = ( (os_cur_task == NULL) ? -1 : os_task_getPrio(os_cur_task->element) );
 8002e6a:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <os_tick+0x108>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <os_tick+0x42>
 8002e72:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <os_tick+0x108>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff63 	bl	8002d44 <os_task_getPrio>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	e001      	b.n	8002e86 <os_tick+0x46>
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	73fb      	strb	r3, [r7, #15]

	/* Check if there is any high priority task to execute and wake up tasks
	 ------------------------------------------------------*/
	while(it != NULL){
 8002e88:	e044      	b.n	8002f14 <os_tick+0xd4>

		/* Tick counter if necessary
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->wakeCoutdown > 0 && ((os_task_t*)it->element)->wakeCoutdown < OS_WAIT_FOREVER)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d015      	beq.n	8002ec0 <os_tick+0x80>
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d00f      	beq.n	8002ec0 <os_tick+0x80>
			((os_task_t*)it->element)->wakeCoutdown = ((os_task_t*)it->element)->wakeCoutdown < ms_inc ? 0 : ((os_task_t*)it->element)->wakeCoutdown - ms_inc;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d805      	bhi.n	8002eb8 <os_tick+0x78>
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	e000      	b.n	8002eba <os_tick+0x7a>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	6892      	ldr	r2, [r2, #8]
 8002ebe:	61d3      	str	r3, [r2, #28]

		/* Wake up blocked functions if timeout has elapsed
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->wakeCoutdown == 0 && ((os_task_t*)it->element)->state == OS_TASK_BLOCKED) ((os_task_t*)it->element)->state = OS_TASK_READY;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d108      	bne.n	8002edc <os_tick+0x9c>
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	7e1b      	ldrb	r3, [r3, #24]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d103      	bne.n	8002edc <os_tick+0x9c>
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	761a      	strb	r2, [r3, #24]

		/* If current task is ready
		 ------------------------------------------------------*/
		if( ((os_task_t*)it->element)->state == OS_TASK_READY ){
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	7e1b      	ldrb	r3, [r3, #24]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d113      	bne.n	8002f0e <os_tick+0xce>

			/* Calculate task priority
			 ------------------------------------------------------*/
			int8_t task_prio = os_task_getPrio(it->element);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff2a 	bl	8002d44 <os_task_getPrio>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73bb      	strb	r3, [r7, #14]

			/* If there is a task with priority higher or equal to current task that is ready, than scheduling is called
			 ------------------------------------------------------*/
			 if(task_prio >= cur_prio && it != os_cur_task) pend_req = 1;
 8002ef4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	db06      	blt.n	8002f0e <os_tick+0xce>
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <os_tick+0x108>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d001      	beq.n	8002f0e <os_tick+0xce>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]

		}

		/* Keep going
		 ------------------------------------------------------*/
		it = it->next;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	613b      	str	r3, [r7, #16]
	while(it != NULL){
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1b7      	bne.n	8002e8a <os_tick+0x4a>
	}

	/* PendSV if necessary
	 ------------------------------------------------------*/
	if(pend_req == 1 && os_scheduler_state_get() == OS_SCHEDULER_START) os_task_yeild();
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d106      	bne.n	8002f2e <os_tick+0xee>
 8002f20:	f7ff fb38 	bl	8002594 <os_scheduler_state_get>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <os_tick+0xee>
 8002f2a:	f7ff fef9 	bl	8002d20 <os_task_yeild>

	/* Return
	 ------------------------------------------------------*/
	OS_EXIT_CRITICAL();
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f383 8810 	msr	PRIMASK, r3
 8002f34:	f3bf 8f6f 	isb	sy
	return;
 8002f38:	bf00      	nop
}
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20014060 	.word	0x20014060
 8002f44:	20014088 	.word	0x20014088
 8002f48:	2001405c 	.word	0x2001405c

08002f4c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08c      	sub	sp, #48	; 0x30
 8002f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f52:	f107 031c 	add.w	r3, r7, #28
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	60da      	str	r2, [r3, #12]
 8002f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	4b66      	ldr	r3, [pc, #408]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a65      	ldr	r2, [pc, #404]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002f6c:	f043 0310 	orr.w	r3, r3, #16
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b63      	ldr	r3, [pc, #396]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	4b5f      	ldr	r3, [pc, #380]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	4a5e      	ldr	r2, [pc, #376]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8e:	4b5c      	ldr	r3, [pc, #368]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	4b58      	ldr	r3, [pc, #352]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	4a57      	ldr	r2, [pc, #348]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002faa:	4b55      	ldr	r3, [pc, #340]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	4b51      	ldr	r3, [pc, #324]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4a50      	ldr	r2, [pc, #320]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc6:	4b4e      	ldr	r3, [pc, #312]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a49      	ldr	r2, [pc, #292]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b47      	ldr	r3, [pc, #284]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	4b43      	ldr	r3, [pc, #268]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	4a42      	ldr	r2, [pc, #264]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffe:	4b40      	ldr	r3, [pc, #256]	; (8003100 <MX_GPIO_Init+0x1b4>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800300a:	2200      	movs	r2, #0
 800300c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003010:	483c      	ldr	r0, [pc, #240]	; (8003104 <MX_GPIO_Init+0x1b8>)
 8003012:	f000 fe9f 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800301a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800301c:	2303      	movs	r3, #3
 800301e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	4619      	mov	r1, r3
 800302a:	4837      	ldr	r0, [pc, #220]	; (8003108 <MX_GPIO_Init+0x1bc>)
 800302c:	f000 fcf8 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC4 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8003030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003034:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003036:	2303      	movs	r3, #3
 8003038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303e:	f107 031c 	add.w	r3, r7, #28
 8003042:	4619      	mov	r1, r3
 8003044:	4831      	ldr	r0, [pc, #196]	; (800310c <MX_GPIO_Init+0x1c0>)
 8003046:	f000 fceb 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800304a:	2303      	movs	r3, #3
 800304c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800304e:	2303      	movs	r3, #3
 8003050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003056:	f107 031c 	add.w	r3, r7, #28
 800305a:	4619      	mov	r1, r3
 800305c:	482c      	ldr	r0, [pc, #176]	; (8003110 <MX_GPIO_Init+0x1c4>)
 800305e:	f000 fcdf 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003062:	2301      	movs	r3, #1
 8003064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003066:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <MX_GPIO_Init+0x1c8>)
 8003068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800306e:	f107 031c 	add.w	r3, r7, #28
 8003072:	4619      	mov	r1, r3
 8003074:	4828      	ldr	r0, [pc, #160]	; (8003118 <MX_GPIO_Init+0x1cc>)
 8003076:	f000 fcd3 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA6 PA7 PA8 
                           PA9 PA10 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800307a:	f649 73fe 	movw	r3, #40958	; 0x9ffe
 800307e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003080:	2303      	movs	r3, #3
 8003082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003088:	f107 031c 	add.w	r3, r7, #28
 800308c:	4619      	mov	r1, r3
 800308e:	4822      	ldr	r0, [pc, #136]	; (8003118 <MX_GPIO_Init+0x1cc>)
 8003090:	f000 fcc6 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8003094:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8003098:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800309a:	2303      	movs	r3, #3
 800309c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a2:	f107 031c 	add.w	r3, r7, #28
 80030a6:	4619      	mov	r1, r3
 80030a8:	481c      	ldr	r0, [pc, #112]	; (800311c <MX_GPIO_Init+0x1d0>)
 80030aa:	f000 fcb9 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80030ae:	f640 73ff 	movw	r3, #4095	; 0xfff
 80030b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030b4:	2303      	movs	r3, #3
 80030b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	4619      	mov	r1, r3
 80030c2:	4810      	ldr	r0, [pc, #64]	; (8003104 <MX_GPIO_Init+0x1b8>)
 80030c4:	f000 fcac 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80030c8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80030cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ce:	2301      	movs	r3, #1
 80030d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030da:	f107 031c 	add.w	r3, r7, #28
 80030de:	4619      	mov	r1, r3
 80030e0:	4808      	ldr	r0, [pc, #32]	; (8003104 <MX_GPIO_Init+0x1b8>)
 80030e2:	f000 fc9d 	bl	8003a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	210f      	movs	r1, #15
 80030ea:	2006      	movs	r0, #6
 80030ec:	f000 fc61 	bl	80039b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80030f0:	2006      	movs	r0, #6
 80030f2:	f000 fc7a 	bl	80039ea <HAL_NVIC_EnableIRQ>

}
 80030f6:	bf00      	nop
 80030f8:	3730      	adds	r7, #48	; 0x30
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	40020c00 	.word	0x40020c00
 8003108:	40021000 	.word	0x40021000
 800310c:	40020800 	.word	0x40020800
 8003110:	40021c00 	.word	0x40021c00
 8003114:	10110000 	.word	0x10110000
 8003118:	40020000 	.word	0x40020000
 800311c:	40020400 	.word	0x40020400

08003120 <HAL_GPIO_EXTI_Callback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]

}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <t0>:
/* USER CODE END PFP */
uint32_t jebatest;
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void* t0(void* arg){
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(arg);

	ASSERT(os_obj_single_wait(mutex[0], OS_WAIT_FOREVER, NULL) != NULL);
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <t0+0x40>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2200      	movs	r2, #0
 8003146:	f04f 31ff 	mov.w	r1, #4294967295
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff f8a6 	bl	800229c <os_obj_single_wait>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <t0+0x22>
 8003156:	f000 f9c7 	bl	80034e8 <Error_Handler>

	ASSERT(os_msgQ_wait(queue, OS_WAIT_FOREVER, NULL) == &jebatest);
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <t0+0x44>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	f04f 31ff 	mov.w	r1, #4294967295
 8003164:	4618      	mov	r0, r3
 8003166:	f7fe fb8b 	bl	8001880 <os_msgQ_wait>
 800316a:	4602      	mov	r2, r0
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <t0+0x48>)
 800316e:	429a      	cmp	r2, r3
 8003170:	d001      	beq.n	8003176 <t0+0x3e>
 8003172:	f000 f9b9 	bl	80034e8 <Error_Handler>

	while(1){
 8003176:	e7fe      	b.n	8003176 <t0+0x3e>
 8003178:	200140c4 	.word	0x200140c4
 800317c:	200140bc 	.word	0x200140bc
 8003180:	200140c0 	.word	0x200140c0

08003184 <t1>:

	os_task_end();
	return NULL;
}

void* t1(void* arg){
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(arg);

	os_task_sleep(500);
 800318c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003190:	f7ff fdf4 	bl	8002d7c <os_task_sleep>

	ASSERT(os_msgQ_wait(queue, OS_WAIT_FOREVER, NULL) == &jebatest);
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <t1+0x30>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2200      	movs	r2, #0
 800319a:	f04f 31ff 	mov.w	r1, #4294967295
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fb6e 	bl	8001880 <os_msgQ_wait>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <t1+0x34>)
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <t1+0x2c>
 80031ac:	f000 f99c 	bl	80034e8 <Error_Handler>

	while(1){
 80031b0:	e7fe      	b.n	80031b0 <t1+0x2c>
 80031b2:	bf00      	nop
 80031b4:	200140bc 	.word	0x200140bc
 80031b8:	200140c0 	.word	0x200140c0

080031bc <t2>:

	os_task_end();
	return NULL;
}

void* t2(void* arg){
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(arg);

	os_task_sleep(1000);
 80031c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031c8:	f7ff fdd8 	bl	8002d7c <os_task_sleep>

	os_msgQ_push(queue, &jebatest);
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <t2+0x44>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	490c      	ldr	r1, [pc, #48]	; (8003204 <t2+0x48>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe fae0 	bl	8001798 <os_msgQ_push>
	ASSERT(os_obj_single_wait(mutex[0], 500, NULL) != NULL);
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <t2+0x4c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2200      	movs	r2, #0
 80031de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f85a 	bl	800229c <os_obj_single_wait>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <t2+0x36>
 80031ee:	f000 f97b 	bl	80034e8 <Error_Handler>

	os_task_end();
 80031f2:	f7ff fca3 	bl	8002b3c <os_task_end>
	return NULL;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	200140bc 	.word	0x200140bc
 8003204:	200140c0 	.word	0x200140c0
 8003208:	200140c4 	.word	0x200140c4

0800320c <t3>:

void* t3(void* arg){
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(arg);

	os_task_sleep(10000);
 8003214:	f242 7010 	movw	r0, #10000	; 0x2710
 8003218:	f7ff fdb0 	bl	8002d7c <os_task_sleep>

	os_msgQ_wait(queue, OS_WAIT_FOREVER, NULL);
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <t3+0x64>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2200      	movs	r2, #0
 8003222:	f04f 31ff 	mov.w	r1, #4294967295
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fb2a 	bl	8001880 <os_msgQ_wait>
	os_msgQ_push(queue, &jebatest);
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <t3+0x64>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4910      	ldr	r1, [pc, #64]	; (8003274 <t3+0x68>)
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fab0 	bl	8001798 <os_msgQ_push>
	os_msgQ_wait(queue, OS_WAIT_FOREVER, NULL);
 8003238:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <t3+0x64>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2200      	movs	r2, #0
 800323e:	f04f 31ff 	mov.w	r1, #4294967295
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fb1c 	bl	8001880 <os_msgQ_wait>

	while(1){

		os_task_sleep(1000);
 8003248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800324c:	f7ff fd96 	bl	8002d7c <os_task_sleep>

		os_msgQ_push(queue, &jebatest);
 8003250:	4b07      	ldr	r3, [pc, #28]	; (8003270 <t3+0x64>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4907      	ldr	r1, [pc, #28]	; (8003274 <t3+0x68>)
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe fa9e 	bl	8001798 <os_msgQ_push>
		os_msgQ_wait(queue, OS_WAIT_FOREVER, NULL);
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <t3+0x64>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	f04f 31ff 	mov.w	r1, #4294967295
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fb0a 	bl	8001880 <os_msgQ_wait>
		os_task_sleep(1000);
 800326c:	e7ec      	b.n	8003248 <t3+0x3c>
 800326e:	bf00      	nop
 8003270:	200140bc 	.word	0x200140bc
 8003274:	200140c0 	.word	0x200140c0

08003278 <t4>:

	os_task_end();
	return NULL;
}

void* t4(void* arg){
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
	UNUSED_ARG(arg);

	os_task_end();
 8003280:	f7ff fc5c 	bl	8002b3c <os_task_end>
	return NULL;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003296:	f000 fa3f 	bl	8003718 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800329a:	f000 f8bd 	bl	8003418 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800329e:	f7ff fe55 	bl	8002f4c <MX_GPIO_Init>
	MX_TIM13_Init();
 80032a2:	f000 f9c1 	bl	8003628 <MX_TIM13_Init>
	/* USER CODE BEGIN 2 */

	ASSERT(os_init("main", 9, OS_DEFAULT_STACK_SIZE, "idle", OS_DEFAULT_STACK_SIZE) == OS_ERR_OK);
 80032a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <main+0x15c>)
 80032ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032b2:	2109      	movs	r1, #9
 80032b4:	484e      	ldr	r0, [pc, #312]	; (80033f0 <main+0x160>)
 80032b6:	f7fd f91d 	bl	80004f4 <os_init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <main+0x34>
 80032c0:	f000 f912 	bl	80034e8 <Error_Handler>

	ASSERT(os_task_create(&tasks[0], task_name[0], tsks[0], (int8_t)(10), OS_DEFAULT_STACK_SIZE, (void*) NULL) == OS_ERR_OK);
 80032c4:	4b4b      	ldr	r3, [pc, #300]	; (80033f4 <main+0x164>)
 80032c6:	6819      	ldr	r1, [r3, #0]
 80032c8:	4b4b      	ldr	r3, [pc, #300]	; (80033f8 <main+0x168>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	2300      	movs	r3, #0
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	230a      	movs	r3, #10
 80032d8:	4848      	ldr	r0, [pc, #288]	; (80033fc <main+0x16c>)
 80032da:	f7ff fab7 	bl	800284c <os_task_create>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <main+0x58>
 80032e4:	f000 f900 	bl	80034e8 <Error_Handler>
	ASSERT(os_task_create(&tasks[1], task_name[1], tsks[1], (int8_t)(11), OS_DEFAULT_STACK_SIZE, (void*) NULL) == OS_ERR_OK);
 80032e8:	4b42      	ldr	r3, [pc, #264]	; (80033f4 <main+0x164>)
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	4b42      	ldr	r3, [pc, #264]	; (80033f8 <main+0x168>)
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	2300      	movs	r3, #0
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	230b      	movs	r3, #11
 80032fc:	4840      	ldr	r0, [pc, #256]	; (8003400 <main+0x170>)
 80032fe:	f7ff faa5 	bl	800284c <os_task_create>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <main+0x7c>
 8003308:	f000 f8ee 	bl	80034e8 <Error_Handler>
	ASSERT(os_task_create(&tasks[2], task_name[2], tsks[2], (int8_t)(12), OS_DEFAULT_STACK_SIZE, (void*) NULL) == OS_ERR_OK);
 800330c:	4b39      	ldr	r3, [pc, #228]	; (80033f4 <main+0x164>)
 800330e:	6899      	ldr	r1, [r3, #8]
 8003310:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <main+0x168>)
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	2300      	movs	r3, #0
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	230c      	movs	r3, #12
 8003320:	4838      	ldr	r0, [pc, #224]	; (8003404 <main+0x174>)
 8003322:	f7ff fa93 	bl	800284c <os_task_create>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <main+0xa0>
 800332c:	f000 f8dc 	bl	80034e8 <Error_Handler>
	ASSERT(os_task_create(&tasks[3], task_name[3], tsks[3], (int8_t)(13), OS_DEFAULT_STACK_SIZE, (void*) NULL) == OS_ERR_OK);
 8003330:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <main+0x164>)
 8003332:	68d9      	ldr	r1, [r3, #12]
 8003334:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <main+0x168>)
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	2300      	movs	r3, #0
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	230d      	movs	r3, #13
 8003344:	4830      	ldr	r0, [pc, #192]	; (8003408 <main+0x178>)
 8003346:	f7ff fa81 	bl	800284c <os_task_create>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <main+0xc4>
 8003350:	f000 f8ca 	bl	80034e8 <Error_Handler>
	ASSERT(os_msgQ_create(&queue, OS_MSGQ_MODE_FIFO, "Jeba") == OS_ERR_OK);
 8003354:	4a2d      	ldr	r2, [pc, #180]	; (800340c <main+0x17c>)
 8003356:	2100      	movs	r1, #0
 8003358:	482d      	ldr	r0, [pc, #180]	; (8003410 <main+0x180>)
 800335a:	f7fe f9b1 	bl	80016c0 <os_msgQ_create>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <main+0xd8>
 8003364:	f000 f8c0 	bl	80034e8 <Error_Handler>
	ASSERT(os_mutex_create(&mutex[0], "Jeba") == OS_ERR_OK);
 8003368:	4928      	ldr	r1, [pc, #160]	; (800340c <main+0x17c>)
 800336a:	482a      	ldr	r0, [pc, #168]	; (8003414 <main+0x184>)
 800336c:	f7fe fbfa 	bl	8001b64 <os_mutex_create>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <main+0xea>
 8003376:	f000 f8b7 	bl	80034e8 <Error_Handler>

	os_scheduler_start();
 800337a:	f7ff f8d9 	bl	8002530 <os_scheduler_start>

	ASSERT(os_obj_multiple_WaitAll(NULL, OS_WAIT_FOREVER, 2, tasks[0], tasks[1]) != NULL);
 800337e:	4b1f      	ldr	r3, [pc, #124]	; (80033fc <main+0x16c>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <main+0x16c>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	2202      	movs	r2, #2
 800338c:	f04f 31ff 	mov.w	r1, #4294967295
 8003390:	2000      	movs	r0, #0
 8003392:	f7fe ff99 	bl	80022c8 <os_obj_multiple_WaitAll>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <main+0x110>
 800339c:	f000 f8a4 	bl	80034e8 <Error_Handler>

	for(int i = 0; i < COUNTOF(tasks); i++){
 80033a0:	2300      	movs	r3, #0
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	e009      	b.n	80033ba <main+0x12a>
		os_task_delete(tasks[i]);
 80033a6:	4a15      	ldr	r2, [pc, #84]	; (80033fc <main+0x16c>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fbfc 	bl	8002bac <os_task_delete>
	for(int i = 0; i < COUNTOF(tasks); i++){
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3301      	adds	r3, #1
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b04      	cmp	r3, #4
 80033be:	ddf2      	ble.n	80033a6 <main+0x116>
	}

	for(int i = 0; i < COUNTOF(mutex); i++){
 80033c0:	2300      	movs	r3, #0
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	e009      	b.n	80033da <main+0x14a>
		os_mutex_delete(mutex[i]);
 80033c6:	4a13      	ldr	r2, [pc, #76]	; (8003414 <main+0x184>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fc2e 	bl	8001c30 <os_mutex_delete>
	for(int i = 0; i < COUNTOF(mutex); i++){
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	3301      	adds	r3, #1
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	ddf2      	ble.n	80033c6 <main+0x136>
	}

	os_msgQ_delete(queue);
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <main+0x180>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe fa09 	bl	80017fc <os_msgQ_delete>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while(1){
 80033ea:	e7fe      	b.n	80033ea <main+0x15a>
 80033ec:	080048bc 	.word	0x080048bc
 80033f0:	080048c4 	.word	0x080048c4
 80033f4:	20000000 	.word	0x20000000
 80033f8:	20000014 	.word	0x20000014
 80033fc:	200140a8 	.word	0x200140a8
 8003400:	200140ac 	.word	0x200140ac
 8003404:	200140b0 	.word	0x200140b0
 8003408:	200140b4 	.word	0x200140b4
 800340c:	080048cc 	.word	0x080048cc
 8003410:	200140bc 	.word	0x200140bc
 8003414:	200140c4 	.word	0x200140c4

08003418 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b094      	sub	sp, #80	; 0x50
 800341c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800341e:	f107 0320 	add.w	r3, r7, #32
 8003422:	2230      	movs	r2, #48	; 0x30
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f001 fa2a 	bl	8004880 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800342c:	f107 030c 	add.w	r3, r7, #12
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <SystemClock_Config+0xc8>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <SystemClock_Config+0xc8>)
 8003446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344a:	6413      	str	r3, [r2, #64]	; 0x40
 800344c:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <SystemClock_Config+0xc8>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003458:	2300      	movs	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <SystemClock_Config+0xcc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a20      	ldr	r2, [pc, #128]	; (80034e4 <SystemClock_Config+0xcc>)
 8003462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <SystemClock_Config+0xcc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003474:	2302      	movs	r3, #2
 8003476:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003478:	2301      	movs	r3, #1
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800347c:	2310      	movs	r3, #16
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003480:	2302      	movs	r3, #2
 8003482:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003484:	2300      	movs	r3, #0
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003488:	2308      	movs	r3, #8
 800348a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800348c:	2354      	movs	r3, #84	; 0x54
 800348e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003490:	2302      	movs	r3, #2
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003494:	2307      	movs	r3, #7
 8003496:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003498:	f107 0320 	add.w	r3, r7, #32
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fc8b 	bl	8003db8 <HAL_RCC_OscConfig>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <SystemClock_Config+0x94>
	{
		Error_Handler();
 80034a8:	f000 f81e 	bl	80034e8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034ac:	230f      	movs	r3, #15
 80034ae:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b0:	2302      	movs	r3, #2
 80034b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034c2:	f107 030c 	add.w	r3, r7, #12
 80034c6:	2102      	movs	r1, #2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fee5 	bl	8004298 <HAL_RCC_ClockConfig>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80034d4:	f000 f808 	bl	80034e8 <Error_Handler>
	}
}
 80034d8:	bf00      	nop
 80034da:	3750      	adds	r7, #80	; 0x50
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40007000 	.word	0x40007000

080034e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	errCount++;
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <Error_Handler+0x18>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3301      	adds	r3, #1
 80034f2:	4a03      	ldr	r2, [pc, #12]	; (8003500 <Error_Handler+0x18>)
 80034f4:	6013      	str	r3, [r2, #0]
	/* USER CODE END Error_Handler_Debug */
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	20014064 	.word	0x20014064

08003504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_MspInit+0x90>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	4a20      	ldr	r2, [pc, #128]	; (8003594 <HAL_MspInit+0x90>)
 8003514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003518:	6453      	str	r3, [r2, #68]	; 0x44
 800351a:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <HAL_MspInit+0x90>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <HAL_MspInit+0x90>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	4a19      	ldr	r2, [pc, #100]	; (8003594 <HAL_MspInit+0x90>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003534:	6413      	str	r3, [r2, #64]	; 0x40
 8003536:	4b17      	ldr	r3, [pc, #92]	; (8003594 <HAL_MspInit+0x90>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	210f      	movs	r1, #15
 8003546:	f06f 000b 	mvn.w	r0, #11
 800354a:	f000 fa32 	bl	80039b2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 800354e:	2200      	movs	r2, #0
 8003550:	210f      	movs	r1, #15
 8003552:	f06f 000a 	mvn.w	r0, #10
 8003556:	f000 fa2c 	bl	80039b2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 800355a:	2200      	movs	r2, #0
 800355c:	210f      	movs	r1, #15
 800355e:	f06f 0009 	mvn.w	r0, #9
 8003562:	f000 fa26 	bl	80039b2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	210f      	movs	r1, #15
 800356a:	f06f 0004 	mvn.w	r0, #4
 800356e:	f000 fa20 	bl	80039b2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8003572:	2200      	movs	r2, #0
 8003574:	210f      	movs	r1, #15
 8003576:	f06f 0003 	mvn.w	r0, #3
 800357a:	f000 fa1a 	bl	80039b2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	210f      	movs	r1, #15
 8003582:	f06f 0001 	mvn.w	r0, #1
 8003586:	f000 fa14 	bl	80039b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800

08003598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800359c:	bf00      	nop
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a6:	b480      	push	{r7}
 80035a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035aa:	e7fe      	b.n	80035aa <HardFault_Handler+0x4>

080035ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035b0:	e7fe      	b.n	80035b0 <MemManage_Handler+0x4>

080035b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035b6:	e7fe      	b.n	80035b6 <BusFault_Handler+0x4>

080035b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035bc:	e7fe      	b.n	80035bc <UsageFault_Handler+0x4>

080035be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035be:	b480      	push	{r7}
 80035c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035de:	f000 f8ed 	bl	80037bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  os_tick(1);
 80035e2:	2001      	movs	r0, #1
 80035e4:	f7ff fc2c 	bl	8002e40 <os_tick>
  /* USER CODE END SysTick_IRQn 1 */
}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}

080035ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80035f0:	2001      	movs	r0, #1
 80035f2:	f000 fbc9 	bl	8003d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003600:	4b08      	ldr	r3, [pc, #32]	; (8003624 <SystemInit+0x28>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	4a07      	ldr	r2, [pc, #28]	; (8003624 <SystemInit+0x28>)
 8003608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800360c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <SystemInit+0x28>)
 8003612:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003616:	609a      	str	r2, [r3, #8]
#endif
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <MX_TIM13_Init>:

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <MX_TIM13_Init+0x50>)
 800362e:	4a13      	ldr	r2, [pc, #76]	; (800367c <MX_TIM13_Init+0x54>)
 8003630:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <MX_TIM13_Init+0x50>)
 8003634:	2200      	movs	r2, #0
 8003636:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <MX_TIM13_Init+0x50>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0xFFFF;
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <MX_TIM13_Init+0x50>)
 8003640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003644:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <MX_TIM13_Init+0x50>)
 8003648:	2200      	movs	r2, #0
 800364a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <MX_TIM13_Init+0x50>)
 800364e:	2200      	movs	r2, #0
 8003650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003652:	4809      	ldr	r0, [pc, #36]	; (8003678 <MX_TIM13_Init+0x50>)
 8003654:	f000 ffde 	bl	8004614 <HAL_TIM_Base_Init>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800365e:	f7ff ff43 	bl	80034e8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim13, TIM_OPMODE_SINGLE) != HAL_OK)
 8003662:	2108      	movs	r1, #8
 8003664:	4804      	ldr	r0, [pc, #16]	; (8003678 <MX_TIM13_Init+0x50>)
 8003666:	f001 f800 	bl	800466a <HAL_TIM_OnePulse_Init>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8003670:	f7ff ff3a 	bl	80034e8 <Error_Handler>
  }

}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}
 8003678:	200140d8 	.word	0x200140d8
 800367c:	40001c00 	.word	0x40001c00

08003680 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0b      	ldr	r2, [pc, #44]	; (80036bc <HAL_TIM_Base_MspInit+0x3c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10d      	bne.n	80036ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <HAL_TIM_Base_MspInit+0x40>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_TIM_Base_MspInit+0x40>)
 800369c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <HAL_TIM_Base_MspInit+0x40>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40001c00 	.word	0x40001c00
 80036c0:	40023800 	.word	0x40023800

080036c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036ca:	e003      	b.n	80036d4 <LoopCopyDataInit>

080036cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036d2:	3104      	adds	r1, #4

080036d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036d4:	480b      	ldr	r0, [pc, #44]	; (8003704 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036dc:	d3f6      	bcc.n	80036cc <CopyDataInit>
  ldr  r2, =_sbss
 80036de:	4a0b      	ldr	r2, [pc, #44]	; (800370c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036e0:	e002      	b.n	80036e8 <LoopFillZerobss>

080036e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036e4:	f842 3b04 	str.w	r3, [r2], #4

080036e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036ec:	d3f9      	bcc.n	80036e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036ee:	f7ff ff85 	bl	80035fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036f2:	f001 f8a1 	bl	8004838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036f6:	f7ff fdcb 	bl	8003290 <main>
  bx  lr    
 80036fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003700:	080048f4 	.word	0x080048f4
  ldr  r0, =_sdata
 8003704:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003708:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 800370c:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 8003710:	2001411c 	.word	0x2001411c

08003714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003714:	e7fe      	b.n	8003714 <ADC_IRQHandler>
	...

08003718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800371c:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_Init+0x40>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <HAL_Init+0x40>)
 8003722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_Init+0x40>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <HAL_Init+0x40>)
 800372e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <HAL_Init+0x40>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a07      	ldr	r2, [pc, #28]	; (8003758 <HAL_Init+0x40>)
 800373a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003740:	2003      	movs	r0, #3
 8003742:	f000 f92b 	bl	800399c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003746:	200f      	movs	r0, #15
 8003748:	f000 f808 	bl	800375c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800374c:	f7ff feda 	bl	8003504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023c00 	.word	0x40023c00

0800375c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <HAL_InitTick+0x54>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <HAL_InitTick+0x58>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	4619      	mov	r1, r3
 800376e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003772:	fbb3 f3f1 	udiv	r3, r3, r1
 8003776:	fbb2 f3f3 	udiv	r3, r2, r3
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f943 	bl	8003a06 <HAL_SYSTICK_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e00e      	b.n	80037a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b0f      	cmp	r3, #15
 800378e:	d80a      	bhi.n	80037a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003790:	2200      	movs	r2, #0
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	f04f 30ff 	mov.w	r0, #4294967295
 8003798:	f000 f90b 	bl	80039b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800379c:	4a06      	ldr	r2, [pc, #24]	; (80037b8 <HAL_InitTick+0x5c>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e000      	b.n	80037a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000028 	.word	0x20000028
 80037b4:	20000030 	.word	0x20000030
 80037b8:	2000002c 	.word	0x2000002c

080037bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_IncTick+0x20>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_IncTick+0x24>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4413      	add	r3, r2
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_IncTick+0x24>)
 80037ce:	6013      	str	r3, [r2, #0]
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000030 	.word	0x20000030
 80037e0:	20014118 	.word	0x20014118

080037e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return uwTick;
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_GetTick+0x14>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20014118 	.word	0x20014118

080037fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <__NVIC_SetPriorityGrouping+0x44>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003818:	4013      	ands	r3, r2
 800381a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800382e:	4a04      	ldr	r2, [pc, #16]	; (8003840 <__NVIC_SetPriorityGrouping+0x44>)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	60d3      	str	r3, [r2, #12]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <__NVIC_GetPriorityGrouping+0x18>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	0a1b      	lsrs	r3, r3, #8
 800384e:	f003 0307 	and.w	r3, r3, #7
}
 8003852:	4618      	mov	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	2b00      	cmp	r3, #0
 8003870:	db0b      	blt.n	800388a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	f003 021f 	and.w	r2, r3, #31
 8003878:	4907      	ldr	r1, [pc, #28]	; (8003898 <__NVIC_EnableIRQ+0x38>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	2001      	movs	r0, #1
 8003882:	fa00 f202 	lsl.w	r2, r0, r2
 8003886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	e000e100 	.word	0xe000e100

0800389c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	6039      	str	r1, [r7, #0]
 80038a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	db0a      	blt.n	80038c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	490c      	ldr	r1, [pc, #48]	; (80038e8 <__NVIC_SetPriority+0x4c>)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	0112      	lsls	r2, r2, #4
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	440b      	add	r3, r1
 80038c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038c4:	e00a      	b.n	80038dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	4908      	ldr	r1, [pc, #32]	; (80038ec <__NVIC_SetPriority+0x50>)
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	3b04      	subs	r3, #4
 80038d4:	0112      	lsls	r2, r2, #4
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	440b      	add	r3, r1
 80038da:	761a      	strb	r2, [r3, #24]
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	e000e100 	.word	0xe000e100
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b089      	sub	sp, #36	; 0x24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f1c3 0307 	rsb	r3, r3, #7
 800390a:	2b04      	cmp	r3, #4
 800390c:	bf28      	it	cs
 800390e:	2304      	movcs	r3, #4
 8003910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3304      	adds	r3, #4
 8003916:	2b06      	cmp	r3, #6
 8003918:	d902      	bls.n	8003920 <NVIC_EncodePriority+0x30>
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3b03      	subs	r3, #3
 800391e:	e000      	b.n	8003922 <NVIC_EncodePriority+0x32>
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003924:	f04f 32ff 	mov.w	r2, #4294967295
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43da      	mvns	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	401a      	ands	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003938:	f04f 31ff 	mov.w	r1, #4294967295
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	fa01 f303 	lsl.w	r3, r1, r3
 8003942:	43d9      	mvns	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003948:	4313      	orrs	r3, r2
         );
}
 800394a:	4618      	mov	r0, r3
 800394c:	3724      	adds	r7, #36	; 0x24
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
	...

08003958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3b01      	subs	r3, #1
 8003964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003968:	d301      	bcc.n	800396e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800396a:	2301      	movs	r3, #1
 800396c:	e00f      	b.n	800398e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800396e:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <SysTick_Config+0x40>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3b01      	subs	r3, #1
 8003974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003976:	210f      	movs	r1, #15
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	f7ff ff8e 	bl	800389c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <SysTick_Config+0x40>)
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003986:	4b04      	ldr	r3, [pc, #16]	; (8003998 <SysTick_Config+0x40>)
 8003988:	2207      	movs	r2, #7
 800398a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	e000e010 	.word	0xe000e010

0800399c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff29 	bl	80037fc <__NVIC_SetPriorityGrouping>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b086      	sub	sp, #24
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	4603      	mov	r3, r0
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039c4:	f7ff ff3e 	bl	8003844 <__NVIC_GetPriorityGrouping>
 80039c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	6978      	ldr	r0, [r7, #20]
 80039d0:	f7ff ff8e 	bl	80038f0 <NVIC_EncodePriority>
 80039d4:	4602      	mov	r2, r0
 80039d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff5d 	bl	800389c <__NVIC_SetPriority>
}
 80039e2:	bf00      	nop
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	4603      	mov	r3, r0
 80039f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff31 	bl	8003860 <__NVIC_EnableIRQ>
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff ffa2 	bl	8003958 <SysTick_Config>
 8003a14:	4603      	mov	r3, r0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	e16b      	b.n	8003d14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	f040 815a 	bne.w	8003d0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d00b      	beq.n	8003a7a <HAL_GPIO_Init+0x5a>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d007      	beq.n	8003a7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a6e:	2b11      	cmp	r3, #17
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b12      	cmp	r3, #18
 8003a78:	d130      	bne.n	8003adc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	2203      	movs	r2, #3
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 0201 	and.w	r2, r3, #1
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0xfc>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b12      	cmp	r3, #18
 8003b1a:	d123      	bne.n	8003b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	08da      	lsrs	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3208      	adds	r2, #8
 8003b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	220f      	movs	r2, #15
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	08da      	lsrs	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3208      	adds	r2, #8
 8003b5e:	69b9      	ldr	r1, [r7, #24]
 8003b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2203      	movs	r2, #3
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0203 	and.w	r2, r3, #3
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80b4 	beq.w	8003d0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b5f      	ldr	r3, [pc, #380]	; (8003d28 <HAL_GPIO_Init+0x308>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	4a5e      	ldr	r2, [pc, #376]	; (8003d28 <HAL_GPIO_Init+0x308>)
 8003bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bb6:	4b5c      	ldr	r3, [pc, #368]	; (8003d28 <HAL_GPIO_Init+0x308>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bc2:	4a5a      	ldr	r2, [pc, #360]	; (8003d2c <HAL_GPIO_Init+0x30c>)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	3302      	adds	r3, #2
 8003bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	220f      	movs	r2, #15
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a51      	ldr	r2, [pc, #324]	; (8003d30 <HAL_GPIO_Init+0x310>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d02b      	beq.n	8003c46 <HAL_GPIO_Init+0x226>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a50      	ldr	r2, [pc, #320]	; (8003d34 <HAL_GPIO_Init+0x314>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d025      	beq.n	8003c42 <HAL_GPIO_Init+0x222>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4f      	ldr	r2, [pc, #316]	; (8003d38 <HAL_GPIO_Init+0x318>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01f      	beq.n	8003c3e <HAL_GPIO_Init+0x21e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4e      	ldr	r2, [pc, #312]	; (8003d3c <HAL_GPIO_Init+0x31c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d019      	beq.n	8003c3a <HAL_GPIO_Init+0x21a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4d      	ldr	r2, [pc, #308]	; (8003d40 <HAL_GPIO_Init+0x320>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_GPIO_Init+0x216>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4c      	ldr	r2, [pc, #304]	; (8003d44 <HAL_GPIO_Init+0x324>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00d      	beq.n	8003c32 <HAL_GPIO_Init+0x212>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4b      	ldr	r2, [pc, #300]	; (8003d48 <HAL_GPIO_Init+0x328>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <HAL_GPIO_Init+0x20e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <HAL_GPIO_Init+0x32c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_GPIO_Init+0x20a>
 8003c26:	2307      	movs	r3, #7
 8003c28:	e00e      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	e00c      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c2e:	2306      	movs	r3, #6
 8003c30:	e00a      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c32:	2305      	movs	r3, #5
 8003c34:	e008      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c36:	2304      	movs	r3, #4
 8003c38:	e006      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e004      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e002      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c46:	2300      	movs	r3, #0
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	f002 0203 	and.w	r2, r2, #3
 8003c4e:	0092      	lsls	r2, r2, #2
 8003c50:	4093      	lsls	r3, r2
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c58:	4934      	ldr	r1, [pc, #208]	; (8003d2c <HAL_GPIO_Init+0x30c>)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c66:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c8a:	4a31      	ldr	r2, [pc, #196]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c90:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cb4:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cba:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cde:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d08:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <HAL_GPIO_Init+0x330>)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b0f      	cmp	r3, #15
 8003d18:	f67f ae90 	bls.w	8003a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	3724      	adds	r7, #36	; 0x24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	40020000 	.word	0x40020000
 8003d34:	40020400 	.word	0x40020400
 8003d38:	40020800 	.word	0x40020800
 8003d3c:	40020c00 	.word	0x40020c00
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40021400 	.word	0x40021400
 8003d48:	40021800 	.word	0x40021800
 8003d4c:	40021c00 	.word	0x40021c00
 8003d50:	40013c00 	.word	0x40013c00

08003d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
 8003d60:	4613      	mov	r3, r2
 8003d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d64:	787b      	ldrb	r3, [r7, #1]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d70:	e003      	b.n	8003d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d72:	887b      	ldrh	r3, [r7, #2]
 8003d74:	041a      	lsls	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	619a      	str	r2, [r3, #24]
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d92:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d006      	beq.n	8003dac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d9e:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff f9ba 	bl	8003120 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40013c00 	.word	0x40013c00

08003db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e25b      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d075      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dd6:	4ba3      	ldr	r3, [pc, #652]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d00c      	beq.n	8003dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de2:	4ba0      	ldr	r3, [pc, #640]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d112      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b9d      	ldr	r3, [pc, #628]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dfa:	d10b      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	4b99      	ldr	r3, [pc, #612]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d05b      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x108>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d157      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e236      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_OscConfig+0x74>
 8003e1e:	4b91      	ldr	r3, [pc, #580]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a90      	ldr	r2, [pc, #576]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e01d      	b.n	8003e68 <HAL_RCC_OscConfig+0xb0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x98>
 8003e36:	4b8b      	ldr	r3, [pc, #556]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a8a      	ldr	r2, [pc, #552]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a87      	ldr	r2, [pc, #540]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0xb0>
 8003e50:	4b84      	ldr	r3, [pc, #528]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a83      	ldr	r2, [pc, #524]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b81      	ldr	r3, [pc, #516]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a80      	ldr	r2, [pc, #512]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d013      	beq.n	8003e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7ff fcb8 	bl	80037e4 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e78:	f7ff fcb4 	bl	80037e4 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e1fb      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	4b76      	ldr	r3, [pc, #472]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0xc0>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7ff fca4 	bl	80037e4 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7ff fca0 	bl	80037e4 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e1e7      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	4b6c      	ldr	r3, [pc, #432]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0xe8>
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d063      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ece:	4b65      	ldr	r3, [pc, #404]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eda:	4b62      	ldr	r3, [pc, #392]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d11c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee6:	4b5f      	ldr	r3, [pc, #380]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d116      	bne.n	8003f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	4b5c      	ldr	r3, [pc, #368]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_RCC_OscConfig+0x152>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e1bb      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0a:	4b56      	ldr	r3, [pc, #344]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4952      	ldr	r1, [pc, #328]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	e03a      	b.n	8003f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f28:	4b4f      	ldr	r3, [pc, #316]	; (8004068 <HAL_RCC_OscConfig+0x2b0>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7ff fc59 	bl	80037e4 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f36:	f7ff fc55 	bl	80037e4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e19c      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f48:	4b46      	ldr	r3, [pc, #280]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b43      	ldr	r3, [pc, #268]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4940      	ldr	r1, [pc, #256]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
 8003f68:	e015      	b.n	8003f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f6a:	4b3f      	ldr	r3, [pc, #252]	; (8004068 <HAL_RCC_OscConfig+0x2b0>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7ff fc38 	bl	80037e4 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f78:	f7ff fc34 	bl	80037e4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e17b      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8a:	4b36      	ldr	r3, [pc, #216]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d030      	beq.n	8004004 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003faa:	4b30      	ldr	r3, [pc, #192]	; (800406c <HAL_RCC_OscConfig+0x2b4>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7ff fc18 	bl	80037e4 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb8:	f7ff fc14 	bl	80037e4 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e15b      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x200>
 8003fd6:	e015      	b.n	8004004 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd8:	4b24      	ldr	r3, [pc, #144]	; (800406c <HAL_RCC_OscConfig+0x2b4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fde:	f7ff fc01 	bl	80037e4 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe6:	f7ff fbfd 	bl	80037e4 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e144      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80a0 	beq.w	8004152 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004016:	4b13      	ldr	r3, [pc, #76]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	4a0e      	ldr	r2, [pc, #56]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_OscConfig+0x2b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d121      	bne.n	8004092 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <HAL_RCC_OscConfig+0x2b8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a07      	ldr	r2, [pc, #28]	; (8004070 <HAL_RCC_OscConfig+0x2b8>)
 8004054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405a:	f7ff fbc3 	bl	80037e4 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	e011      	b.n	8004086 <HAL_RCC_OscConfig+0x2ce>
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	42470000 	.word	0x42470000
 800406c:	42470e80 	.word	0x42470e80
 8004070:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004074:	f7ff fbb6 	bl	80037e4 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0fd      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004086:	4b81      	ldr	r3, [pc, #516]	; (800428c <HAL_RCC_OscConfig+0x4d4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d106      	bne.n	80040a8 <HAL_RCC_OscConfig+0x2f0>
 800409a:	4b7d      	ldr	r3, [pc, #500]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a7c      	ldr	r2, [pc, #496]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	e01c      	b.n	80040e2 <HAL_RCC_OscConfig+0x32a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	d10c      	bne.n	80040ca <HAL_RCC_OscConfig+0x312>
 80040b0:	4b77      	ldr	r3, [pc, #476]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	4a76      	ldr	r2, [pc, #472]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040b6:	f043 0304 	orr.w	r3, r3, #4
 80040ba:	6713      	str	r3, [r2, #112]	; 0x70
 80040bc:	4b74      	ldr	r3, [pc, #464]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	4a73      	ldr	r2, [pc, #460]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
 80040c8:	e00b      	b.n	80040e2 <HAL_RCC_OscConfig+0x32a>
 80040ca:	4b71      	ldr	r3, [pc, #452]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	4a70      	ldr	r2, [pc, #448]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6713      	str	r3, [r2, #112]	; 0x70
 80040d6:	4b6e      	ldr	r3, [pc, #440]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a6d      	ldr	r2, [pc, #436]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040dc:	f023 0304 	bic.w	r3, r3, #4
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d015      	beq.n	8004116 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ea:	f7ff fb7b 	bl	80037e4 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f0:	e00a      	b.n	8004108 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7ff fb77 	bl	80037e4 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e0bc      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	4b61      	ldr	r3, [pc, #388]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ee      	beq.n	80040f2 <HAL_RCC_OscConfig+0x33a>
 8004114:	e014      	b.n	8004140 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004116:	f7ff fb65 	bl	80037e4 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7ff fb61 	bl	80037e4 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0a6      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	4b56      	ldr	r3, [pc, #344]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ee      	bne.n	800411e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d105      	bne.n	8004152 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004146:	4b52      	ldr	r3, [pc, #328]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	4a51      	ldr	r2, [pc, #324]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 800414c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004150:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8092 	beq.w	8004280 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800415c:	4b4c      	ldr	r3, [pc, #304]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d05c      	beq.n	8004222 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d141      	bne.n	80041f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004170:	4b48      	ldr	r3, [pc, #288]	; (8004294 <HAL_RCC_OscConfig+0x4dc>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004176:	f7ff fb35 	bl	80037e4 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417e:	f7ff fb31 	bl	80037e4 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e078      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004190:	4b3f      	ldr	r3, [pc, #252]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f0      	bne.n	800417e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	019b      	lsls	r3, r3, #6
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	085b      	lsrs	r3, r3, #1
 80041b4:	3b01      	subs	r3, #1
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	061b      	lsls	r3, r3, #24
 80041c0:	4933      	ldr	r1, [pc, #204]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c6:	4b33      	ldr	r3, [pc, #204]	; (8004294 <HAL_RCC_OscConfig+0x4dc>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7ff fb0a 	bl	80037e4 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d4:	f7ff fb06 	bl	80037e4 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e04d      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x41c>
 80041f2:	e045      	b.n	8004280 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f4:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_RCC_OscConfig+0x4dc>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fa:	f7ff faf3 	bl	80037e4 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004202:	f7ff faef 	bl	80037e4 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e036      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004214:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f0      	bne.n	8004202 <HAL_RCC_OscConfig+0x44a>
 8004220:	e02e      	b.n	8004280 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e029      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800422e:	4b18      	ldr	r3, [pc, #96]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	429a      	cmp	r2, r3
 8004240:	d11c      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d115      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004256:	4013      	ands	r3, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800425c:	4293      	cmp	r3, r2
 800425e:	d10d      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d106      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40007000 	.word	0x40007000
 8004290:	40023800 	.word	0x40023800
 8004294:	42470060 	.word	0x42470060

08004298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0cc      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ac:	4b68      	ldr	r3, [pc, #416]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d90c      	bls.n	80042d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b65      	ldr	r3, [pc, #404]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b63      	ldr	r3, [pc, #396]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0b8      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d020      	beq.n	8004322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042ec:	4b59      	ldr	r3, [pc, #356]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a58      	ldr	r2, [pc, #352]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004304:	4b53      	ldr	r3, [pc, #332]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a52      	ldr	r2, [pc, #328]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800430e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b50      	ldr	r3, [pc, #320]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	494d      	ldr	r1, [pc, #308]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d044      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d119      	bne.n	8004376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e07f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d003      	beq.n	8004356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004352:	2b03      	cmp	r3, #3
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004356:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e06f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004366:	4b3b      	ldr	r3, [pc, #236]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e067      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004376:	4b37      	ldr	r3, [pc, #220]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f023 0203 	bic.w	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4934      	ldr	r1, [pc, #208]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	4313      	orrs	r3, r2
 8004386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004388:	f7ff fa2c 	bl	80037e4 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	e00a      	b.n	80043a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004390:	f7ff fa28 	bl	80037e4 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	; 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e04f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 020c 	and.w	r2, r3, #12
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d1eb      	bne.n	8004390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b8:	4b25      	ldr	r3, [pc, #148]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d20c      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e032      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4916      	ldr	r1, [pc, #88]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800440a:	4b12      	ldr	r3, [pc, #72]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	490e      	ldr	r1, [pc, #56]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800441e:	f000 f821 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8004422:	4601      	mov	r1, r0
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <HAL_RCC_ClockConfig+0x1c0>)
 8004430:	5cd3      	ldrb	r3, [r2, r3]
 8004432:	fa21 f303 	lsr.w	r3, r1, r3
 8004436:	4a09      	ldr	r2, [pc, #36]	; (800445c <HAL_RCC_ClockConfig+0x1c4>)
 8004438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_RCC_ClockConfig+0x1c8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff f98c 	bl	800375c <HAL_InitTick>

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40023c00 	.word	0x40023c00
 8004454:	40023800 	.word	0x40023800
 8004458:	080048d4 	.word	0x080048d4
 800445c:	20000028 	.word	0x20000028
 8004460:	2000002c 	.word	0x2000002c

08004464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	2300      	movs	r3, #0
 8004474:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800447a:	4b63      	ldr	r3, [pc, #396]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	2b04      	cmp	r3, #4
 8004484:	d007      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x32>
 8004486:	2b08      	cmp	r3, #8
 8004488:	d008      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x38>
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 80b4 	bne.w	80045f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004490:	4b5e      	ldr	r3, [pc, #376]	; (800460c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004492:	60bb      	str	r3, [r7, #8]
       break;
 8004494:	e0b3      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004496:	4b5e      	ldr	r3, [pc, #376]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004498:	60bb      	str	r3, [r7, #8]
      break;
 800449a:	e0b0      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800449c:	4b5a      	ldr	r3, [pc, #360]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a6:	4b58      	ldr	r3, [pc, #352]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d04a      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b2:	4b55      	ldr	r3, [pc, #340]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	f04f 0400 	mov.w	r4, #0
 80044bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	ea03 0501 	and.w	r5, r3, r1
 80044c8:	ea04 0602 	and.w	r6, r4, r2
 80044cc:	4629      	mov	r1, r5
 80044ce:	4632      	mov	r2, r6
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	f04f 0400 	mov.w	r4, #0
 80044d8:	0154      	lsls	r4, r2, #5
 80044da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044de:	014b      	lsls	r3, r1, #5
 80044e0:	4619      	mov	r1, r3
 80044e2:	4622      	mov	r2, r4
 80044e4:	1b49      	subs	r1, r1, r5
 80044e6:	eb62 0206 	sbc.w	r2, r2, r6
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	f04f 0400 	mov.w	r4, #0
 80044f2:	0194      	lsls	r4, r2, #6
 80044f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044f8:	018b      	lsls	r3, r1, #6
 80044fa:	1a5b      	subs	r3, r3, r1
 80044fc:	eb64 0402 	sbc.w	r4, r4, r2
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	00e2      	lsls	r2, r4, #3
 800450a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800450e:	00d9      	lsls	r1, r3, #3
 8004510:	460b      	mov	r3, r1
 8004512:	4614      	mov	r4, r2
 8004514:	195b      	adds	r3, r3, r5
 8004516:	eb44 0406 	adc.w	r4, r4, r6
 800451a:	f04f 0100 	mov.w	r1, #0
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	0262      	lsls	r2, r4, #9
 8004524:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004528:	0259      	lsls	r1, r3, #9
 800452a:	460b      	mov	r3, r1
 800452c:	4614      	mov	r4, r2
 800452e:	4618      	mov	r0, r3
 8004530:	4621      	mov	r1, r4
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f04f 0400 	mov.w	r4, #0
 8004538:	461a      	mov	r2, r3
 800453a:	4623      	mov	r3, r4
 800453c:	f7fb fe4e 	bl	80001dc <__aeabi_uldivmod>
 8004540:	4603      	mov	r3, r0
 8004542:	460c      	mov	r4, r1
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e049      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004548:	4b2f      	ldr	r3, [pc, #188]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	099b      	lsrs	r3, r3, #6
 800454e:	f04f 0400 	mov.w	r4, #0
 8004552:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	ea03 0501 	and.w	r5, r3, r1
 800455e:	ea04 0602 	and.w	r6, r4, r2
 8004562:	4629      	mov	r1, r5
 8004564:	4632      	mov	r2, r6
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	f04f 0400 	mov.w	r4, #0
 800456e:	0154      	lsls	r4, r2, #5
 8004570:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004574:	014b      	lsls	r3, r1, #5
 8004576:	4619      	mov	r1, r3
 8004578:	4622      	mov	r2, r4
 800457a:	1b49      	subs	r1, r1, r5
 800457c:	eb62 0206 	sbc.w	r2, r2, r6
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	f04f 0400 	mov.w	r4, #0
 8004588:	0194      	lsls	r4, r2, #6
 800458a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800458e:	018b      	lsls	r3, r1, #6
 8004590:	1a5b      	subs	r3, r3, r1
 8004592:	eb64 0402 	sbc.w	r4, r4, r2
 8004596:	f04f 0100 	mov.w	r1, #0
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	00e2      	lsls	r2, r4, #3
 80045a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045a4:	00d9      	lsls	r1, r3, #3
 80045a6:	460b      	mov	r3, r1
 80045a8:	4614      	mov	r4, r2
 80045aa:	195b      	adds	r3, r3, r5
 80045ac:	eb44 0406 	adc.w	r4, r4, r6
 80045b0:	f04f 0100 	mov.w	r1, #0
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	02a2      	lsls	r2, r4, #10
 80045ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045be:	0299      	lsls	r1, r3, #10
 80045c0:	460b      	mov	r3, r1
 80045c2:	4614      	mov	r4, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	4621      	mov	r1, r4
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f04f 0400 	mov.w	r4, #0
 80045ce:	461a      	mov	r2, r3
 80045d0:	4623      	mov	r3, r4
 80045d2:	f7fb fe03 	bl	80001dc <__aeabi_uldivmod>
 80045d6:	4603      	mov	r3, r0
 80045d8:	460c      	mov	r4, r1
 80045da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	3301      	adds	r3, #1
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	60bb      	str	r3, [r7, #8]
      break;
 80045f6:	e002      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045fa:	60bb      	str	r3, [r7, #8]
      break;
 80045fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045fe:	68bb      	ldr	r3, [r7, #8]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004608:	40023800 	.word	0x40023800
 800460c:	00f42400 	.word	0x00f42400
 8004610:	007a1200 	.word	0x007a1200

08004614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e01d      	b.n	8004662 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff f820 	bl	8003680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f000 f850 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e02d      	b.n	80046da <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f825 	bl	80046e2 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f000 f824 	bl	80046f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0208 	bic.w	r2, r2, #8
 80046be:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6819      	ldr	r1, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a40      	ldr	r2, [pc, #256]	; (800480c <TIM_Base_SetConfig+0x114>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d013      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004716:	d00f      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a3d      	ldr	r2, [pc, #244]	; (8004810 <TIM_Base_SetConfig+0x118>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00b      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3c      	ldr	r2, [pc, #240]	; (8004814 <TIM_Base_SetConfig+0x11c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d007      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a3b      	ldr	r2, [pc, #236]	; (8004818 <TIM_Base_SetConfig+0x120>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3a      	ldr	r2, [pc, #232]	; (800481c <TIM_Base_SetConfig+0x124>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d108      	bne.n	800474a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a2f      	ldr	r2, [pc, #188]	; (800480c <TIM_Base_SetConfig+0x114>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d02b      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d027      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a2c      	ldr	r2, [pc, #176]	; (8004810 <TIM_Base_SetConfig+0x118>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d023      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2b      	ldr	r2, [pc, #172]	; (8004814 <TIM_Base_SetConfig+0x11c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01f      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2a      	ldr	r2, [pc, #168]	; (8004818 <TIM_Base_SetConfig+0x120>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01b      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a29      	ldr	r2, [pc, #164]	; (800481c <TIM_Base_SetConfig+0x124>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d017      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a28      	ldr	r2, [pc, #160]	; (8004820 <TIM_Base_SetConfig+0x128>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a27      	ldr	r2, [pc, #156]	; (8004824 <TIM_Base_SetConfig+0x12c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00f      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a26      	ldr	r2, [pc, #152]	; (8004828 <TIM_Base_SetConfig+0x130>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00b      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a25      	ldr	r2, [pc, #148]	; (800482c <TIM_Base_SetConfig+0x134>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d007      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a24      	ldr	r2, [pc, #144]	; (8004830 <TIM_Base_SetConfig+0x138>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a23      	ldr	r2, [pc, #140]	; (8004834 <TIM_Base_SetConfig+0x13c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d108      	bne.n	80047bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a0a      	ldr	r2, [pc, #40]	; (800480c <TIM_Base_SetConfig+0x114>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d003      	beq.n	80047f0 <TIM_Base_SetConfig+0xf8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a0c      	ldr	r2, [pc, #48]	; (800481c <TIM_Base_SetConfig+0x124>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d103      	bne.n	80047f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	615a      	str	r2, [r3, #20]
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40010000 	.word	0x40010000
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40010400 	.word	0x40010400
 8004820:	40014000 	.word	0x40014000
 8004824:	40014400 	.word	0x40014400
 8004828:	40014800 	.word	0x40014800
 800482c:	40001800 	.word	0x40001800
 8004830:	40001c00 	.word	0x40001c00
 8004834:	40002000 	.word	0x40002000

08004838 <__libc_init_array>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	4e0d      	ldr	r6, [pc, #52]	; (8004870 <__libc_init_array+0x38>)
 800483c:	4c0d      	ldr	r4, [pc, #52]	; (8004874 <__libc_init_array+0x3c>)
 800483e:	1ba4      	subs	r4, r4, r6
 8004840:	10a4      	asrs	r4, r4, #2
 8004842:	2500      	movs	r5, #0
 8004844:	42a5      	cmp	r5, r4
 8004846:	d109      	bne.n	800485c <__libc_init_array+0x24>
 8004848:	4e0b      	ldr	r6, [pc, #44]	; (8004878 <__libc_init_array+0x40>)
 800484a:	4c0c      	ldr	r4, [pc, #48]	; (800487c <__libc_init_array+0x44>)
 800484c:	f000 f820 	bl	8004890 <_init>
 8004850:	1ba4      	subs	r4, r4, r6
 8004852:	10a4      	asrs	r4, r4, #2
 8004854:	2500      	movs	r5, #0
 8004856:	42a5      	cmp	r5, r4
 8004858:	d105      	bne.n	8004866 <__libc_init_array+0x2e>
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004860:	4798      	blx	r3
 8004862:	3501      	adds	r5, #1
 8004864:	e7ee      	b.n	8004844 <__libc_init_array+0xc>
 8004866:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800486a:	4798      	blx	r3
 800486c:	3501      	adds	r5, #1
 800486e:	e7f2      	b.n	8004856 <__libc_init_array+0x1e>
 8004870:	080048ec 	.word	0x080048ec
 8004874:	080048ec 	.word	0x080048ec
 8004878:	080048ec 	.word	0x080048ec
 800487c:	080048f0 	.word	0x080048f0

08004880 <memset>:
 8004880:	4402      	add	r2, r0
 8004882:	4603      	mov	r3, r0
 8004884:	4293      	cmp	r3, r2
 8004886:	d100      	bne.n	800488a <memset+0xa>
 8004888:	4770      	bx	lr
 800488a:	f803 1b01 	strb.w	r1, [r3], #1
 800488e:	e7f9      	b.n	8004884 <memset+0x4>

08004890 <_init>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	bf00      	nop
 8004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004896:	bc08      	pop	{r3}
 8004898:	469e      	mov	lr, r3
 800489a:	4770      	bx	lr

0800489c <_fini>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	bf00      	nop
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr
